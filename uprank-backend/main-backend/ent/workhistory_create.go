// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/notzree/uprank-backend/main-backend/ent/upworkfreelancer"
	"github.com/notzree/uprank-backend/main-backend/ent/workhistory"
)

// WorkHistoryCreate is the builder for creating a WorkHistory entity.
type WorkHistoryCreate struct {
	config
	mutation *WorkHistoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEmbeddedAt sets the "embedded_at" field.
func (whc *WorkHistoryCreate) SetEmbeddedAt(t time.Time) *WorkHistoryCreate {
	whc.mutation.SetEmbeddedAt(t)
	return whc
}

// SetNillableEmbeddedAt sets the "embedded_at" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableEmbeddedAt(t *time.Time) *WorkHistoryCreate {
	if t != nil {
		whc.SetEmbeddedAt(*t)
	}
	return whc
}

// SetCreatedAt sets the "created_at" field.
func (whc *WorkHistoryCreate) SetCreatedAt(t time.Time) *WorkHistoryCreate {
	whc.mutation.SetCreatedAt(t)
	return whc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableCreatedAt(t *time.Time) *WorkHistoryCreate {
	if t != nil {
		whc.SetCreatedAt(*t)
	}
	return whc
}

// SetUpdatedAt sets the "updated_at" field.
func (whc *WorkHistoryCreate) SetUpdatedAt(t time.Time) *WorkHistoryCreate {
	whc.mutation.SetUpdatedAt(t)
	return whc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableUpdatedAt(t *time.Time) *WorkHistoryCreate {
	if t != nil {
		whc.SetUpdatedAt(*t)
	}
	return whc
}

// SetTitle sets the "title" field.
func (whc *WorkHistoryCreate) SetTitle(s string) *WorkHistoryCreate {
	whc.mutation.SetTitle(s)
	return whc
}

// SetClientFeedback sets the "client_feedback" field.
func (whc *WorkHistoryCreate) SetClientFeedback(s string) *WorkHistoryCreate {
	whc.mutation.SetClientFeedback(s)
	return whc
}

// SetNillableClientFeedback sets the "client_feedback" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableClientFeedback(s *string) *WorkHistoryCreate {
	if s != nil {
		whc.SetClientFeedback(*s)
	}
	return whc
}

// SetOverallRating sets the "overall_rating" field.
func (whc *WorkHistoryCreate) SetOverallRating(f float64) *WorkHistoryCreate {
	whc.mutation.SetOverallRating(f)
	return whc
}

// SetNillableOverallRating sets the "overall_rating" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableOverallRating(f *float64) *WorkHistoryCreate {
	if f != nil {
		whc.SetOverallRating(*f)
	}
	return whc
}

// SetFreelancerEarnings sets the "freelancer_earnings" field.
func (whc *WorkHistoryCreate) SetFreelancerEarnings(f float64) *WorkHistoryCreate {
	whc.mutation.SetFreelancerEarnings(f)
	return whc
}

// SetNillableFreelancerEarnings sets the "freelancer_earnings" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableFreelancerEarnings(f *float64) *WorkHistoryCreate {
	if f != nil {
		whc.SetFreelancerEarnings(*f)
	}
	return whc
}

// SetStartDate sets the "start_date" field.
func (whc *WorkHistoryCreate) SetStartDate(t time.Time) *WorkHistoryCreate {
	whc.mutation.SetStartDate(t)
	return whc
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableStartDate(t *time.Time) *WorkHistoryCreate {
	if t != nil {
		whc.SetStartDate(*t)
	}
	return whc
}

// SetEndDate sets the "end_date" field.
func (whc *WorkHistoryCreate) SetEndDate(t time.Time) *WorkHistoryCreate {
	whc.mutation.SetEndDate(t)
	return whc
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableEndDate(t *time.Time) *WorkHistoryCreate {
	if t != nil {
		whc.SetEndDate(*t)
	}
	return whc
}

// SetDescription sets the "description" field.
func (whc *WorkHistoryCreate) SetDescription(s string) *WorkHistoryCreate {
	whc.mutation.SetDescription(s)
	return whc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableDescription(s *string) *WorkHistoryCreate {
	if s != nil {
		whc.SetDescription(*s)
	}
	return whc
}

// SetBudget sets the "budget" field.
func (whc *WorkHistoryCreate) SetBudget(f float64) *WorkHistoryCreate {
	whc.mutation.SetBudget(f)
	return whc
}

// SetNillableBudget sets the "budget" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableBudget(f *float64) *WorkHistoryCreate {
	if f != nil {
		whc.SetBudget(*f)
	}
	return whc
}

// SetClientRating sets the "client_rating" field.
func (whc *WorkHistoryCreate) SetClientRating(f float64) *WorkHistoryCreate {
	whc.mutation.SetClientRating(f)
	return whc
}

// SetNillableClientRating sets the "client_rating" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableClientRating(f *float64) *WorkHistoryCreate {
	if f != nil {
		whc.SetClientRating(*f)
	}
	return whc
}

// SetClientReviewCount sets the "client_review_count" field.
func (whc *WorkHistoryCreate) SetClientReviewCount(i int) *WorkHistoryCreate {
	whc.mutation.SetClientReviewCount(i)
	return whc
}

// SetNillableClientReviewCount sets the "client_review_count" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableClientReviewCount(i *int) *WorkHistoryCreate {
	if i != nil {
		whc.SetClientReviewCount(*i)
	}
	return whc
}

// SetClientCountry sets the "client_country" field.
func (whc *WorkHistoryCreate) SetClientCountry(s string) *WorkHistoryCreate {
	whc.mutation.SetClientCountry(s)
	return whc
}

// SetNillableClientCountry sets the "client_country" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableClientCountry(s *string) *WorkHistoryCreate {
	if s != nil {
		whc.SetClientCountry(*s)
	}
	return whc
}

// SetClientTotalJobsPosted sets the "client_total_jobs_posted" field.
func (whc *WorkHistoryCreate) SetClientTotalJobsPosted(i int) *WorkHistoryCreate {
	whc.mutation.SetClientTotalJobsPosted(i)
	return whc
}

// SetNillableClientTotalJobsPosted sets the "client_total_jobs_posted" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableClientTotalJobsPosted(i *int) *WorkHistoryCreate {
	if i != nil {
		whc.SetClientTotalJobsPosted(*i)
	}
	return whc
}

// SetClientTotalSpend sets the "client_total_spend" field.
func (whc *WorkHistoryCreate) SetClientTotalSpend(f float64) *WorkHistoryCreate {
	whc.mutation.SetClientTotalSpend(f)
	return whc
}

// SetNillableClientTotalSpend sets the "client_total_spend" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableClientTotalSpend(f *float64) *WorkHistoryCreate {
	if f != nil {
		whc.SetClientTotalSpend(*f)
	}
	return whc
}

// SetClientTotalHires sets the "client_total_hires" field.
func (whc *WorkHistoryCreate) SetClientTotalHires(i int) *WorkHistoryCreate {
	whc.mutation.SetClientTotalHires(i)
	return whc
}

// SetNillableClientTotalHires sets the "client_total_hires" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableClientTotalHires(i *int) *WorkHistoryCreate {
	if i != nil {
		whc.SetClientTotalHires(*i)
	}
	return whc
}

// SetClientActiveHires sets the "client_active_hires" field.
func (whc *WorkHistoryCreate) SetClientActiveHires(i int) *WorkHistoryCreate {
	whc.mutation.SetClientActiveHires(i)
	return whc
}

// SetNillableClientActiveHires sets the "client_active_hires" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableClientActiveHires(i *int) *WorkHistoryCreate {
	if i != nil {
		whc.SetClientActiveHires(*i)
	}
	return whc
}

// SetClientTotalPaidHours sets the "client_total_paid_hours" field.
func (whc *WorkHistoryCreate) SetClientTotalPaidHours(i int) *WorkHistoryCreate {
	whc.mutation.SetClientTotalPaidHours(i)
	return whc
}

// SetNillableClientTotalPaidHours sets the "client_total_paid_hours" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableClientTotalPaidHours(i *int) *WorkHistoryCreate {
	if i != nil {
		whc.SetClientTotalPaidHours(*i)
	}
	return whc
}

// SetClientAverageHourlyRatePaid sets the "client_average_hourly_rate_paid" field.
func (whc *WorkHistoryCreate) SetClientAverageHourlyRatePaid(f float64) *WorkHistoryCreate {
	whc.mutation.SetClientAverageHourlyRatePaid(f)
	return whc
}

// SetNillableClientAverageHourlyRatePaid sets the "client_average_hourly_rate_paid" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableClientAverageHourlyRatePaid(f *float64) *WorkHistoryCreate {
	if f != nil {
		whc.SetClientAverageHourlyRatePaid(*f)
	}
	return whc
}

// SetClientCompanyCategory sets the "client_company_category" field.
func (whc *WorkHistoryCreate) SetClientCompanyCategory(s string) *WorkHistoryCreate {
	whc.mutation.SetClientCompanyCategory(s)
	return whc
}

// SetNillableClientCompanyCategory sets the "client_company_category" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableClientCompanyCategory(s *string) *WorkHistoryCreate {
	if s != nil {
		whc.SetClientCompanyCategory(*s)
	}
	return whc
}

// SetClientCompanySize sets the "client_company_size" field.
func (whc *WorkHistoryCreate) SetClientCompanySize(s string) *WorkHistoryCreate {
	whc.mutation.SetClientCompanySize(s)
	return whc
}

// SetNillableClientCompanySize sets the "client_company_size" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableClientCompanySize(s *string) *WorkHistoryCreate {
	if s != nil {
		whc.SetClientCompanySize(*s)
	}
	return whc
}

// SetTotalProposals sets the "total_proposals" field.
func (whc *WorkHistoryCreate) SetTotalProposals(i int) *WorkHistoryCreate {
	whc.mutation.SetTotalProposals(i)
	return whc
}

// SetNillableTotalProposals sets the "total_proposals" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableTotalProposals(i *int) *WorkHistoryCreate {
	if i != nil {
		whc.SetTotalProposals(*i)
	}
	return whc
}

// SetNumberOfInterviews sets the "number_of_interviews" field.
func (whc *WorkHistoryCreate) SetNumberOfInterviews(i int) *WorkHistoryCreate {
	whc.mutation.SetNumberOfInterviews(i)
	return whc
}

// SetNillableNumberOfInterviews sets the "number_of_interviews" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableNumberOfInterviews(i *int) *WorkHistoryCreate {
	if i != nil {
		whc.SetNumberOfInterviews(*i)
	}
	return whc
}

// SetSkills sets the "skills" field.
func (whc *WorkHistoryCreate) SetSkills(s []string) *WorkHistoryCreate {
	whc.mutation.SetSkills(s)
	return whc
}

// SetFreelancerID sets the "freelancer" edge to the UpworkFreelancer entity by ID.
func (whc *WorkHistoryCreate) SetFreelancerID(id string) *WorkHistoryCreate {
	whc.mutation.SetFreelancerID(id)
	return whc
}

// SetFreelancer sets the "freelancer" edge to the UpworkFreelancer entity.
func (whc *WorkHistoryCreate) SetFreelancer(u *UpworkFreelancer) *WorkHistoryCreate {
	return whc.SetFreelancerID(u.ID)
}

// Mutation returns the WorkHistoryMutation object of the builder.
func (whc *WorkHistoryCreate) Mutation() *WorkHistoryMutation {
	return whc.mutation
}

// Save creates the WorkHistory in the database.
func (whc *WorkHistoryCreate) Save(ctx context.Context) (*WorkHistory, error) {
	whc.defaults()
	return withHooks(ctx, whc.sqlSave, whc.mutation, whc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (whc *WorkHistoryCreate) SaveX(ctx context.Context) *WorkHistory {
	v, err := whc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (whc *WorkHistoryCreate) Exec(ctx context.Context) error {
	_, err := whc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (whc *WorkHistoryCreate) ExecX(ctx context.Context) {
	if err := whc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (whc *WorkHistoryCreate) defaults() {
	if _, ok := whc.mutation.CreatedAt(); !ok {
		v := workhistory.DefaultCreatedAt()
		whc.mutation.SetCreatedAt(v)
	}
	if _, ok := whc.mutation.UpdatedAt(); !ok {
		v := workhistory.DefaultUpdatedAt()
		whc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (whc *WorkHistoryCreate) check() error {
	if _, ok := whc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "WorkHistory.created_at"`)}
	}
	if _, ok := whc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "WorkHistory.updated_at"`)}
	}
	if _, ok := whc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "WorkHistory.title"`)}
	}
	if _, ok := whc.mutation.FreelancerID(); !ok {
		return &ValidationError{Name: "freelancer", err: errors.New(`ent: missing required edge "WorkHistory.freelancer"`)}
	}
	return nil
}

func (whc *WorkHistoryCreate) sqlSave(ctx context.Context) (*WorkHistory, error) {
	if err := whc.check(); err != nil {
		return nil, err
	}
	_node, _spec := whc.createSpec()
	if err := sqlgraph.CreateNode(ctx, whc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	whc.mutation.id = &_node.ID
	whc.mutation.done = true
	return _node, nil
}

func (whc *WorkHistoryCreate) createSpec() (*WorkHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkHistory{config: whc.config}
		_spec = sqlgraph.NewCreateSpec(workhistory.Table, sqlgraph.NewFieldSpec(workhistory.FieldID, field.TypeInt))
	)
	_spec.OnConflict = whc.conflict
	if value, ok := whc.mutation.EmbeddedAt(); ok {
		_spec.SetField(workhistory.FieldEmbeddedAt, field.TypeTime, value)
		_node.EmbeddedAt = value
	}
	if value, ok := whc.mutation.CreatedAt(); ok {
		_spec.SetField(workhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := whc.mutation.UpdatedAt(); ok {
		_spec.SetField(workhistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := whc.mutation.Title(); ok {
		_spec.SetField(workhistory.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := whc.mutation.ClientFeedback(); ok {
		_spec.SetField(workhistory.FieldClientFeedback, field.TypeString, value)
		_node.ClientFeedback = value
	}
	if value, ok := whc.mutation.OverallRating(); ok {
		_spec.SetField(workhistory.FieldOverallRating, field.TypeFloat64, value)
		_node.OverallRating = value
	}
	if value, ok := whc.mutation.FreelancerEarnings(); ok {
		_spec.SetField(workhistory.FieldFreelancerEarnings, field.TypeFloat64, value)
		_node.FreelancerEarnings = value
	}
	if value, ok := whc.mutation.StartDate(); ok {
		_spec.SetField(workhistory.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := whc.mutation.EndDate(); ok {
		_spec.SetField(workhistory.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := whc.mutation.Description(); ok {
		_spec.SetField(workhistory.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := whc.mutation.Budget(); ok {
		_spec.SetField(workhistory.FieldBudget, field.TypeFloat64, value)
		_node.Budget = value
	}
	if value, ok := whc.mutation.ClientRating(); ok {
		_spec.SetField(workhistory.FieldClientRating, field.TypeFloat64, value)
		_node.ClientRating = value
	}
	if value, ok := whc.mutation.ClientReviewCount(); ok {
		_spec.SetField(workhistory.FieldClientReviewCount, field.TypeInt, value)
		_node.ClientReviewCount = value
	}
	if value, ok := whc.mutation.ClientCountry(); ok {
		_spec.SetField(workhistory.FieldClientCountry, field.TypeString, value)
		_node.ClientCountry = value
	}
	if value, ok := whc.mutation.ClientTotalJobsPosted(); ok {
		_spec.SetField(workhistory.FieldClientTotalJobsPosted, field.TypeInt, value)
		_node.ClientTotalJobsPosted = value
	}
	if value, ok := whc.mutation.ClientTotalSpend(); ok {
		_spec.SetField(workhistory.FieldClientTotalSpend, field.TypeFloat64, value)
		_node.ClientTotalSpend = value
	}
	if value, ok := whc.mutation.ClientTotalHires(); ok {
		_spec.SetField(workhistory.FieldClientTotalHires, field.TypeInt, value)
		_node.ClientTotalHires = value
	}
	if value, ok := whc.mutation.ClientActiveHires(); ok {
		_spec.SetField(workhistory.FieldClientActiveHires, field.TypeInt, value)
		_node.ClientActiveHires = value
	}
	if value, ok := whc.mutation.ClientTotalPaidHours(); ok {
		_spec.SetField(workhistory.FieldClientTotalPaidHours, field.TypeInt, value)
		_node.ClientTotalPaidHours = value
	}
	if value, ok := whc.mutation.ClientAverageHourlyRatePaid(); ok {
		_spec.SetField(workhistory.FieldClientAverageHourlyRatePaid, field.TypeFloat64, value)
		_node.ClientAverageHourlyRatePaid = value
	}
	if value, ok := whc.mutation.ClientCompanyCategory(); ok {
		_spec.SetField(workhistory.FieldClientCompanyCategory, field.TypeString, value)
		_node.ClientCompanyCategory = value
	}
	if value, ok := whc.mutation.ClientCompanySize(); ok {
		_spec.SetField(workhistory.FieldClientCompanySize, field.TypeString, value)
		_node.ClientCompanySize = value
	}
	if value, ok := whc.mutation.TotalProposals(); ok {
		_spec.SetField(workhistory.FieldTotalProposals, field.TypeInt, value)
		_node.TotalProposals = value
	}
	if value, ok := whc.mutation.NumberOfInterviews(); ok {
		_spec.SetField(workhistory.FieldNumberOfInterviews, field.TypeInt, value)
		_node.NumberOfInterviews = value
	}
	if value, ok := whc.mutation.Skills(); ok {
		_spec.SetField(workhistory.FieldSkills, field.TypeJSON, value)
		_node.Skills = value
	}
	if nodes := whc.mutation.FreelancerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workhistory.FreelancerTable,
			Columns: []string{workhistory.FreelancerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upworkfreelancer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.upwork_freelancer_work_histories = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WorkHistory.Create().
//		SetEmbeddedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkHistoryUpsert) {
//			SetEmbeddedAt(v+v).
//		}).
//		Exec(ctx)
func (whc *WorkHistoryCreate) OnConflict(opts ...sql.ConflictOption) *WorkHistoryUpsertOne {
	whc.conflict = opts
	return &WorkHistoryUpsertOne{
		create: whc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WorkHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (whc *WorkHistoryCreate) OnConflictColumns(columns ...string) *WorkHistoryUpsertOne {
	whc.conflict = append(whc.conflict, sql.ConflictColumns(columns...))
	return &WorkHistoryUpsertOne{
		create: whc,
	}
}

type (
	// WorkHistoryUpsertOne is the builder for "upsert"-ing
	//  one WorkHistory node.
	WorkHistoryUpsertOne struct {
		create *WorkHistoryCreate
	}

	// WorkHistoryUpsert is the "OnConflict" setter.
	WorkHistoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetEmbeddedAt sets the "embedded_at" field.
func (u *WorkHistoryUpsert) SetEmbeddedAt(v time.Time) *WorkHistoryUpsert {
	u.Set(workhistory.FieldEmbeddedAt, v)
	return u
}

// UpdateEmbeddedAt sets the "embedded_at" field to the value that was provided on create.
func (u *WorkHistoryUpsert) UpdateEmbeddedAt() *WorkHistoryUpsert {
	u.SetExcluded(workhistory.FieldEmbeddedAt)
	return u
}

// ClearEmbeddedAt clears the value of the "embedded_at" field.
func (u *WorkHistoryUpsert) ClearEmbeddedAt() *WorkHistoryUpsert {
	u.SetNull(workhistory.FieldEmbeddedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WorkHistoryUpsert) SetUpdatedAt(v time.Time) *WorkHistoryUpsert {
	u.Set(workhistory.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WorkHistoryUpsert) UpdateUpdatedAt() *WorkHistoryUpsert {
	u.SetExcluded(workhistory.FieldUpdatedAt)
	return u
}

// SetTitle sets the "title" field.
func (u *WorkHistoryUpsert) SetTitle(v string) *WorkHistoryUpsert {
	u.Set(workhistory.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *WorkHistoryUpsert) UpdateTitle() *WorkHistoryUpsert {
	u.SetExcluded(workhistory.FieldTitle)
	return u
}

// SetClientFeedback sets the "client_feedback" field.
func (u *WorkHistoryUpsert) SetClientFeedback(v string) *WorkHistoryUpsert {
	u.Set(workhistory.FieldClientFeedback, v)
	return u
}

// UpdateClientFeedback sets the "client_feedback" field to the value that was provided on create.
func (u *WorkHistoryUpsert) UpdateClientFeedback() *WorkHistoryUpsert {
	u.SetExcluded(workhistory.FieldClientFeedback)
	return u
}

// ClearClientFeedback clears the value of the "client_feedback" field.
func (u *WorkHistoryUpsert) ClearClientFeedback() *WorkHistoryUpsert {
	u.SetNull(workhistory.FieldClientFeedback)
	return u
}

// SetOverallRating sets the "overall_rating" field.
func (u *WorkHistoryUpsert) SetOverallRating(v float64) *WorkHistoryUpsert {
	u.Set(workhistory.FieldOverallRating, v)
	return u
}

// UpdateOverallRating sets the "overall_rating" field to the value that was provided on create.
func (u *WorkHistoryUpsert) UpdateOverallRating() *WorkHistoryUpsert {
	u.SetExcluded(workhistory.FieldOverallRating)
	return u
}

// AddOverallRating adds v to the "overall_rating" field.
func (u *WorkHistoryUpsert) AddOverallRating(v float64) *WorkHistoryUpsert {
	u.Add(workhistory.FieldOverallRating, v)
	return u
}

// ClearOverallRating clears the value of the "overall_rating" field.
func (u *WorkHistoryUpsert) ClearOverallRating() *WorkHistoryUpsert {
	u.SetNull(workhistory.FieldOverallRating)
	return u
}

// SetFreelancerEarnings sets the "freelancer_earnings" field.
func (u *WorkHistoryUpsert) SetFreelancerEarnings(v float64) *WorkHistoryUpsert {
	u.Set(workhistory.FieldFreelancerEarnings, v)
	return u
}

// UpdateFreelancerEarnings sets the "freelancer_earnings" field to the value that was provided on create.
func (u *WorkHistoryUpsert) UpdateFreelancerEarnings() *WorkHistoryUpsert {
	u.SetExcluded(workhistory.FieldFreelancerEarnings)
	return u
}

// AddFreelancerEarnings adds v to the "freelancer_earnings" field.
func (u *WorkHistoryUpsert) AddFreelancerEarnings(v float64) *WorkHistoryUpsert {
	u.Add(workhistory.FieldFreelancerEarnings, v)
	return u
}

// ClearFreelancerEarnings clears the value of the "freelancer_earnings" field.
func (u *WorkHistoryUpsert) ClearFreelancerEarnings() *WorkHistoryUpsert {
	u.SetNull(workhistory.FieldFreelancerEarnings)
	return u
}

// SetStartDate sets the "start_date" field.
func (u *WorkHistoryUpsert) SetStartDate(v time.Time) *WorkHistoryUpsert {
	u.Set(workhistory.FieldStartDate, v)
	return u
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *WorkHistoryUpsert) UpdateStartDate() *WorkHistoryUpsert {
	u.SetExcluded(workhistory.FieldStartDate)
	return u
}

// ClearStartDate clears the value of the "start_date" field.
func (u *WorkHistoryUpsert) ClearStartDate() *WorkHistoryUpsert {
	u.SetNull(workhistory.FieldStartDate)
	return u
}

// SetEndDate sets the "end_date" field.
func (u *WorkHistoryUpsert) SetEndDate(v time.Time) *WorkHistoryUpsert {
	u.Set(workhistory.FieldEndDate, v)
	return u
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *WorkHistoryUpsert) UpdateEndDate() *WorkHistoryUpsert {
	u.SetExcluded(workhistory.FieldEndDate)
	return u
}

// ClearEndDate clears the value of the "end_date" field.
func (u *WorkHistoryUpsert) ClearEndDate() *WorkHistoryUpsert {
	u.SetNull(workhistory.FieldEndDate)
	return u
}

// SetDescription sets the "description" field.
func (u *WorkHistoryUpsert) SetDescription(v string) *WorkHistoryUpsert {
	u.Set(workhistory.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *WorkHistoryUpsert) UpdateDescription() *WorkHistoryUpsert {
	u.SetExcluded(workhistory.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *WorkHistoryUpsert) ClearDescription() *WorkHistoryUpsert {
	u.SetNull(workhistory.FieldDescription)
	return u
}

// SetBudget sets the "budget" field.
func (u *WorkHistoryUpsert) SetBudget(v float64) *WorkHistoryUpsert {
	u.Set(workhistory.FieldBudget, v)
	return u
}

// UpdateBudget sets the "budget" field to the value that was provided on create.
func (u *WorkHistoryUpsert) UpdateBudget() *WorkHistoryUpsert {
	u.SetExcluded(workhistory.FieldBudget)
	return u
}

// AddBudget adds v to the "budget" field.
func (u *WorkHistoryUpsert) AddBudget(v float64) *WorkHistoryUpsert {
	u.Add(workhistory.FieldBudget, v)
	return u
}

// ClearBudget clears the value of the "budget" field.
func (u *WorkHistoryUpsert) ClearBudget() *WorkHistoryUpsert {
	u.SetNull(workhistory.FieldBudget)
	return u
}

// SetClientRating sets the "client_rating" field.
func (u *WorkHistoryUpsert) SetClientRating(v float64) *WorkHistoryUpsert {
	u.Set(workhistory.FieldClientRating, v)
	return u
}

// UpdateClientRating sets the "client_rating" field to the value that was provided on create.
func (u *WorkHistoryUpsert) UpdateClientRating() *WorkHistoryUpsert {
	u.SetExcluded(workhistory.FieldClientRating)
	return u
}

// AddClientRating adds v to the "client_rating" field.
func (u *WorkHistoryUpsert) AddClientRating(v float64) *WorkHistoryUpsert {
	u.Add(workhistory.FieldClientRating, v)
	return u
}

// ClearClientRating clears the value of the "client_rating" field.
func (u *WorkHistoryUpsert) ClearClientRating() *WorkHistoryUpsert {
	u.SetNull(workhistory.FieldClientRating)
	return u
}

// SetClientReviewCount sets the "client_review_count" field.
func (u *WorkHistoryUpsert) SetClientReviewCount(v int) *WorkHistoryUpsert {
	u.Set(workhistory.FieldClientReviewCount, v)
	return u
}

// UpdateClientReviewCount sets the "client_review_count" field to the value that was provided on create.
func (u *WorkHistoryUpsert) UpdateClientReviewCount() *WorkHistoryUpsert {
	u.SetExcluded(workhistory.FieldClientReviewCount)
	return u
}

// AddClientReviewCount adds v to the "client_review_count" field.
func (u *WorkHistoryUpsert) AddClientReviewCount(v int) *WorkHistoryUpsert {
	u.Add(workhistory.FieldClientReviewCount, v)
	return u
}

// ClearClientReviewCount clears the value of the "client_review_count" field.
func (u *WorkHistoryUpsert) ClearClientReviewCount() *WorkHistoryUpsert {
	u.SetNull(workhistory.FieldClientReviewCount)
	return u
}

// SetClientCountry sets the "client_country" field.
func (u *WorkHistoryUpsert) SetClientCountry(v string) *WorkHistoryUpsert {
	u.Set(workhistory.FieldClientCountry, v)
	return u
}

// UpdateClientCountry sets the "client_country" field to the value that was provided on create.
func (u *WorkHistoryUpsert) UpdateClientCountry() *WorkHistoryUpsert {
	u.SetExcluded(workhistory.FieldClientCountry)
	return u
}

// ClearClientCountry clears the value of the "client_country" field.
func (u *WorkHistoryUpsert) ClearClientCountry() *WorkHistoryUpsert {
	u.SetNull(workhistory.FieldClientCountry)
	return u
}

// SetClientTotalJobsPosted sets the "client_total_jobs_posted" field.
func (u *WorkHistoryUpsert) SetClientTotalJobsPosted(v int) *WorkHistoryUpsert {
	u.Set(workhistory.FieldClientTotalJobsPosted, v)
	return u
}

// UpdateClientTotalJobsPosted sets the "client_total_jobs_posted" field to the value that was provided on create.
func (u *WorkHistoryUpsert) UpdateClientTotalJobsPosted() *WorkHistoryUpsert {
	u.SetExcluded(workhistory.FieldClientTotalJobsPosted)
	return u
}

// AddClientTotalJobsPosted adds v to the "client_total_jobs_posted" field.
func (u *WorkHistoryUpsert) AddClientTotalJobsPosted(v int) *WorkHistoryUpsert {
	u.Add(workhistory.FieldClientTotalJobsPosted, v)
	return u
}

// ClearClientTotalJobsPosted clears the value of the "client_total_jobs_posted" field.
func (u *WorkHistoryUpsert) ClearClientTotalJobsPosted() *WorkHistoryUpsert {
	u.SetNull(workhistory.FieldClientTotalJobsPosted)
	return u
}

// SetClientTotalSpend sets the "client_total_spend" field.
func (u *WorkHistoryUpsert) SetClientTotalSpend(v float64) *WorkHistoryUpsert {
	u.Set(workhistory.FieldClientTotalSpend, v)
	return u
}

// UpdateClientTotalSpend sets the "client_total_spend" field to the value that was provided on create.
func (u *WorkHistoryUpsert) UpdateClientTotalSpend() *WorkHistoryUpsert {
	u.SetExcluded(workhistory.FieldClientTotalSpend)
	return u
}

// AddClientTotalSpend adds v to the "client_total_spend" field.
func (u *WorkHistoryUpsert) AddClientTotalSpend(v float64) *WorkHistoryUpsert {
	u.Add(workhistory.FieldClientTotalSpend, v)
	return u
}

// ClearClientTotalSpend clears the value of the "client_total_spend" field.
func (u *WorkHistoryUpsert) ClearClientTotalSpend() *WorkHistoryUpsert {
	u.SetNull(workhistory.FieldClientTotalSpend)
	return u
}

// SetClientTotalHires sets the "client_total_hires" field.
func (u *WorkHistoryUpsert) SetClientTotalHires(v int) *WorkHistoryUpsert {
	u.Set(workhistory.FieldClientTotalHires, v)
	return u
}

// UpdateClientTotalHires sets the "client_total_hires" field to the value that was provided on create.
func (u *WorkHistoryUpsert) UpdateClientTotalHires() *WorkHistoryUpsert {
	u.SetExcluded(workhistory.FieldClientTotalHires)
	return u
}

// AddClientTotalHires adds v to the "client_total_hires" field.
func (u *WorkHistoryUpsert) AddClientTotalHires(v int) *WorkHistoryUpsert {
	u.Add(workhistory.FieldClientTotalHires, v)
	return u
}

// ClearClientTotalHires clears the value of the "client_total_hires" field.
func (u *WorkHistoryUpsert) ClearClientTotalHires() *WorkHistoryUpsert {
	u.SetNull(workhistory.FieldClientTotalHires)
	return u
}

// SetClientActiveHires sets the "client_active_hires" field.
func (u *WorkHistoryUpsert) SetClientActiveHires(v int) *WorkHistoryUpsert {
	u.Set(workhistory.FieldClientActiveHires, v)
	return u
}

// UpdateClientActiveHires sets the "client_active_hires" field to the value that was provided on create.
func (u *WorkHistoryUpsert) UpdateClientActiveHires() *WorkHistoryUpsert {
	u.SetExcluded(workhistory.FieldClientActiveHires)
	return u
}

// AddClientActiveHires adds v to the "client_active_hires" field.
func (u *WorkHistoryUpsert) AddClientActiveHires(v int) *WorkHistoryUpsert {
	u.Add(workhistory.FieldClientActiveHires, v)
	return u
}

// ClearClientActiveHires clears the value of the "client_active_hires" field.
func (u *WorkHistoryUpsert) ClearClientActiveHires() *WorkHistoryUpsert {
	u.SetNull(workhistory.FieldClientActiveHires)
	return u
}

// SetClientTotalPaidHours sets the "client_total_paid_hours" field.
func (u *WorkHistoryUpsert) SetClientTotalPaidHours(v int) *WorkHistoryUpsert {
	u.Set(workhistory.FieldClientTotalPaidHours, v)
	return u
}

// UpdateClientTotalPaidHours sets the "client_total_paid_hours" field to the value that was provided on create.
func (u *WorkHistoryUpsert) UpdateClientTotalPaidHours() *WorkHistoryUpsert {
	u.SetExcluded(workhistory.FieldClientTotalPaidHours)
	return u
}

// AddClientTotalPaidHours adds v to the "client_total_paid_hours" field.
func (u *WorkHistoryUpsert) AddClientTotalPaidHours(v int) *WorkHistoryUpsert {
	u.Add(workhistory.FieldClientTotalPaidHours, v)
	return u
}

// ClearClientTotalPaidHours clears the value of the "client_total_paid_hours" field.
func (u *WorkHistoryUpsert) ClearClientTotalPaidHours() *WorkHistoryUpsert {
	u.SetNull(workhistory.FieldClientTotalPaidHours)
	return u
}

// SetClientAverageHourlyRatePaid sets the "client_average_hourly_rate_paid" field.
func (u *WorkHistoryUpsert) SetClientAverageHourlyRatePaid(v float64) *WorkHistoryUpsert {
	u.Set(workhistory.FieldClientAverageHourlyRatePaid, v)
	return u
}

// UpdateClientAverageHourlyRatePaid sets the "client_average_hourly_rate_paid" field to the value that was provided on create.
func (u *WorkHistoryUpsert) UpdateClientAverageHourlyRatePaid() *WorkHistoryUpsert {
	u.SetExcluded(workhistory.FieldClientAverageHourlyRatePaid)
	return u
}

// AddClientAverageHourlyRatePaid adds v to the "client_average_hourly_rate_paid" field.
func (u *WorkHistoryUpsert) AddClientAverageHourlyRatePaid(v float64) *WorkHistoryUpsert {
	u.Add(workhistory.FieldClientAverageHourlyRatePaid, v)
	return u
}

// ClearClientAverageHourlyRatePaid clears the value of the "client_average_hourly_rate_paid" field.
func (u *WorkHistoryUpsert) ClearClientAverageHourlyRatePaid() *WorkHistoryUpsert {
	u.SetNull(workhistory.FieldClientAverageHourlyRatePaid)
	return u
}

// SetClientCompanyCategory sets the "client_company_category" field.
func (u *WorkHistoryUpsert) SetClientCompanyCategory(v string) *WorkHistoryUpsert {
	u.Set(workhistory.FieldClientCompanyCategory, v)
	return u
}

// UpdateClientCompanyCategory sets the "client_company_category" field to the value that was provided on create.
func (u *WorkHistoryUpsert) UpdateClientCompanyCategory() *WorkHistoryUpsert {
	u.SetExcluded(workhistory.FieldClientCompanyCategory)
	return u
}

// ClearClientCompanyCategory clears the value of the "client_company_category" field.
func (u *WorkHistoryUpsert) ClearClientCompanyCategory() *WorkHistoryUpsert {
	u.SetNull(workhistory.FieldClientCompanyCategory)
	return u
}

// SetClientCompanySize sets the "client_company_size" field.
func (u *WorkHistoryUpsert) SetClientCompanySize(v string) *WorkHistoryUpsert {
	u.Set(workhistory.FieldClientCompanySize, v)
	return u
}

// UpdateClientCompanySize sets the "client_company_size" field to the value that was provided on create.
func (u *WorkHistoryUpsert) UpdateClientCompanySize() *WorkHistoryUpsert {
	u.SetExcluded(workhistory.FieldClientCompanySize)
	return u
}

// ClearClientCompanySize clears the value of the "client_company_size" field.
func (u *WorkHistoryUpsert) ClearClientCompanySize() *WorkHistoryUpsert {
	u.SetNull(workhistory.FieldClientCompanySize)
	return u
}

// SetTotalProposals sets the "total_proposals" field.
func (u *WorkHistoryUpsert) SetTotalProposals(v int) *WorkHistoryUpsert {
	u.Set(workhistory.FieldTotalProposals, v)
	return u
}

// UpdateTotalProposals sets the "total_proposals" field to the value that was provided on create.
func (u *WorkHistoryUpsert) UpdateTotalProposals() *WorkHistoryUpsert {
	u.SetExcluded(workhistory.FieldTotalProposals)
	return u
}

// AddTotalProposals adds v to the "total_proposals" field.
func (u *WorkHistoryUpsert) AddTotalProposals(v int) *WorkHistoryUpsert {
	u.Add(workhistory.FieldTotalProposals, v)
	return u
}

// ClearTotalProposals clears the value of the "total_proposals" field.
func (u *WorkHistoryUpsert) ClearTotalProposals() *WorkHistoryUpsert {
	u.SetNull(workhistory.FieldTotalProposals)
	return u
}

// SetNumberOfInterviews sets the "number_of_interviews" field.
func (u *WorkHistoryUpsert) SetNumberOfInterviews(v int) *WorkHistoryUpsert {
	u.Set(workhistory.FieldNumberOfInterviews, v)
	return u
}

// UpdateNumberOfInterviews sets the "number_of_interviews" field to the value that was provided on create.
func (u *WorkHistoryUpsert) UpdateNumberOfInterviews() *WorkHistoryUpsert {
	u.SetExcluded(workhistory.FieldNumberOfInterviews)
	return u
}

// AddNumberOfInterviews adds v to the "number_of_interviews" field.
func (u *WorkHistoryUpsert) AddNumberOfInterviews(v int) *WorkHistoryUpsert {
	u.Add(workhistory.FieldNumberOfInterviews, v)
	return u
}

// ClearNumberOfInterviews clears the value of the "number_of_interviews" field.
func (u *WorkHistoryUpsert) ClearNumberOfInterviews() *WorkHistoryUpsert {
	u.SetNull(workhistory.FieldNumberOfInterviews)
	return u
}

// SetSkills sets the "skills" field.
func (u *WorkHistoryUpsert) SetSkills(v []string) *WorkHistoryUpsert {
	u.Set(workhistory.FieldSkills, v)
	return u
}

// UpdateSkills sets the "skills" field to the value that was provided on create.
func (u *WorkHistoryUpsert) UpdateSkills() *WorkHistoryUpsert {
	u.SetExcluded(workhistory.FieldSkills)
	return u
}

// ClearSkills clears the value of the "skills" field.
func (u *WorkHistoryUpsert) ClearSkills() *WorkHistoryUpsert {
	u.SetNull(workhistory.FieldSkills)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.WorkHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *WorkHistoryUpsertOne) UpdateNewValues() *WorkHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(workhistory.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WorkHistory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WorkHistoryUpsertOne) Ignore() *WorkHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkHistoryUpsertOne) DoNothing() *WorkHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkHistoryCreate.OnConflict
// documentation for more info.
func (u *WorkHistoryUpsertOne) Update(set func(*WorkHistoryUpsert)) *WorkHistoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetEmbeddedAt sets the "embedded_at" field.
func (u *WorkHistoryUpsertOne) SetEmbeddedAt(v time.Time) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetEmbeddedAt(v)
	})
}

// UpdateEmbeddedAt sets the "embedded_at" field to the value that was provided on create.
func (u *WorkHistoryUpsertOne) UpdateEmbeddedAt() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateEmbeddedAt()
	})
}

// ClearEmbeddedAt clears the value of the "embedded_at" field.
func (u *WorkHistoryUpsertOne) ClearEmbeddedAt() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearEmbeddedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WorkHistoryUpsertOne) SetUpdatedAt(v time.Time) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WorkHistoryUpsertOne) UpdateUpdatedAt() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTitle sets the "title" field.
func (u *WorkHistoryUpsertOne) SetTitle(v string) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *WorkHistoryUpsertOne) UpdateTitle() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateTitle()
	})
}

// SetClientFeedback sets the "client_feedback" field.
func (u *WorkHistoryUpsertOne) SetClientFeedback(v string) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetClientFeedback(v)
	})
}

// UpdateClientFeedback sets the "client_feedback" field to the value that was provided on create.
func (u *WorkHistoryUpsertOne) UpdateClientFeedback() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateClientFeedback()
	})
}

// ClearClientFeedback clears the value of the "client_feedback" field.
func (u *WorkHistoryUpsertOne) ClearClientFeedback() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearClientFeedback()
	})
}

// SetOverallRating sets the "overall_rating" field.
func (u *WorkHistoryUpsertOne) SetOverallRating(v float64) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetOverallRating(v)
	})
}

// AddOverallRating adds v to the "overall_rating" field.
func (u *WorkHistoryUpsertOne) AddOverallRating(v float64) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.AddOverallRating(v)
	})
}

// UpdateOverallRating sets the "overall_rating" field to the value that was provided on create.
func (u *WorkHistoryUpsertOne) UpdateOverallRating() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateOverallRating()
	})
}

// ClearOverallRating clears the value of the "overall_rating" field.
func (u *WorkHistoryUpsertOne) ClearOverallRating() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearOverallRating()
	})
}

// SetFreelancerEarnings sets the "freelancer_earnings" field.
func (u *WorkHistoryUpsertOne) SetFreelancerEarnings(v float64) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetFreelancerEarnings(v)
	})
}

// AddFreelancerEarnings adds v to the "freelancer_earnings" field.
func (u *WorkHistoryUpsertOne) AddFreelancerEarnings(v float64) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.AddFreelancerEarnings(v)
	})
}

// UpdateFreelancerEarnings sets the "freelancer_earnings" field to the value that was provided on create.
func (u *WorkHistoryUpsertOne) UpdateFreelancerEarnings() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateFreelancerEarnings()
	})
}

// ClearFreelancerEarnings clears the value of the "freelancer_earnings" field.
func (u *WorkHistoryUpsertOne) ClearFreelancerEarnings() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearFreelancerEarnings()
	})
}

// SetStartDate sets the "start_date" field.
func (u *WorkHistoryUpsertOne) SetStartDate(v time.Time) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *WorkHistoryUpsertOne) UpdateStartDate() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateStartDate()
	})
}

// ClearStartDate clears the value of the "start_date" field.
func (u *WorkHistoryUpsertOne) ClearStartDate() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *WorkHistoryUpsertOne) SetEndDate(v time.Time) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *WorkHistoryUpsertOne) UpdateEndDate() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateEndDate()
	})
}

// ClearEndDate clears the value of the "end_date" field.
func (u *WorkHistoryUpsertOne) ClearEndDate() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearEndDate()
	})
}

// SetDescription sets the "description" field.
func (u *WorkHistoryUpsertOne) SetDescription(v string) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *WorkHistoryUpsertOne) UpdateDescription() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *WorkHistoryUpsertOne) ClearDescription() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearDescription()
	})
}

// SetBudget sets the "budget" field.
func (u *WorkHistoryUpsertOne) SetBudget(v float64) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetBudget(v)
	})
}

// AddBudget adds v to the "budget" field.
func (u *WorkHistoryUpsertOne) AddBudget(v float64) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.AddBudget(v)
	})
}

// UpdateBudget sets the "budget" field to the value that was provided on create.
func (u *WorkHistoryUpsertOne) UpdateBudget() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateBudget()
	})
}

// ClearBudget clears the value of the "budget" field.
func (u *WorkHistoryUpsertOne) ClearBudget() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearBudget()
	})
}

// SetClientRating sets the "client_rating" field.
func (u *WorkHistoryUpsertOne) SetClientRating(v float64) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetClientRating(v)
	})
}

// AddClientRating adds v to the "client_rating" field.
func (u *WorkHistoryUpsertOne) AddClientRating(v float64) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.AddClientRating(v)
	})
}

// UpdateClientRating sets the "client_rating" field to the value that was provided on create.
func (u *WorkHistoryUpsertOne) UpdateClientRating() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateClientRating()
	})
}

// ClearClientRating clears the value of the "client_rating" field.
func (u *WorkHistoryUpsertOne) ClearClientRating() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearClientRating()
	})
}

// SetClientReviewCount sets the "client_review_count" field.
func (u *WorkHistoryUpsertOne) SetClientReviewCount(v int) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetClientReviewCount(v)
	})
}

// AddClientReviewCount adds v to the "client_review_count" field.
func (u *WorkHistoryUpsertOne) AddClientReviewCount(v int) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.AddClientReviewCount(v)
	})
}

// UpdateClientReviewCount sets the "client_review_count" field to the value that was provided on create.
func (u *WorkHistoryUpsertOne) UpdateClientReviewCount() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateClientReviewCount()
	})
}

// ClearClientReviewCount clears the value of the "client_review_count" field.
func (u *WorkHistoryUpsertOne) ClearClientReviewCount() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearClientReviewCount()
	})
}

// SetClientCountry sets the "client_country" field.
func (u *WorkHistoryUpsertOne) SetClientCountry(v string) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetClientCountry(v)
	})
}

// UpdateClientCountry sets the "client_country" field to the value that was provided on create.
func (u *WorkHistoryUpsertOne) UpdateClientCountry() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateClientCountry()
	})
}

// ClearClientCountry clears the value of the "client_country" field.
func (u *WorkHistoryUpsertOne) ClearClientCountry() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearClientCountry()
	})
}

// SetClientTotalJobsPosted sets the "client_total_jobs_posted" field.
func (u *WorkHistoryUpsertOne) SetClientTotalJobsPosted(v int) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetClientTotalJobsPosted(v)
	})
}

// AddClientTotalJobsPosted adds v to the "client_total_jobs_posted" field.
func (u *WorkHistoryUpsertOne) AddClientTotalJobsPosted(v int) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.AddClientTotalJobsPosted(v)
	})
}

// UpdateClientTotalJobsPosted sets the "client_total_jobs_posted" field to the value that was provided on create.
func (u *WorkHistoryUpsertOne) UpdateClientTotalJobsPosted() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateClientTotalJobsPosted()
	})
}

// ClearClientTotalJobsPosted clears the value of the "client_total_jobs_posted" field.
func (u *WorkHistoryUpsertOne) ClearClientTotalJobsPosted() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearClientTotalJobsPosted()
	})
}

// SetClientTotalSpend sets the "client_total_spend" field.
func (u *WorkHistoryUpsertOne) SetClientTotalSpend(v float64) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetClientTotalSpend(v)
	})
}

// AddClientTotalSpend adds v to the "client_total_spend" field.
func (u *WorkHistoryUpsertOne) AddClientTotalSpend(v float64) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.AddClientTotalSpend(v)
	})
}

// UpdateClientTotalSpend sets the "client_total_spend" field to the value that was provided on create.
func (u *WorkHistoryUpsertOne) UpdateClientTotalSpend() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateClientTotalSpend()
	})
}

// ClearClientTotalSpend clears the value of the "client_total_spend" field.
func (u *WorkHistoryUpsertOne) ClearClientTotalSpend() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearClientTotalSpend()
	})
}

// SetClientTotalHires sets the "client_total_hires" field.
func (u *WorkHistoryUpsertOne) SetClientTotalHires(v int) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetClientTotalHires(v)
	})
}

// AddClientTotalHires adds v to the "client_total_hires" field.
func (u *WorkHistoryUpsertOne) AddClientTotalHires(v int) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.AddClientTotalHires(v)
	})
}

// UpdateClientTotalHires sets the "client_total_hires" field to the value that was provided on create.
func (u *WorkHistoryUpsertOne) UpdateClientTotalHires() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateClientTotalHires()
	})
}

// ClearClientTotalHires clears the value of the "client_total_hires" field.
func (u *WorkHistoryUpsertOne) ClearClientTotalHires() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearClientTotalHires()
	})
}

// SetClientActiveHires sets the "client_active_hires" field.
func (u *WorkHistoryUpsertOne) SetClientActiveHires(v int) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetClientActiveHires(v)
	})
}

// AddClientActiveHires adds v to the "client_active_hires" field.
func (u *WorkHistoryUpsertOne) AddClientActiveHires(v int) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.AddClientActiveHires(v)
	})
}

// UpdateClientActiveHires sets the "client_active_hires" field to the value that was provided on create.
func (u *WorkHistoryUpsertOne) UpdateClientActiveHires() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateClientActiveHires()
	})
}

// ClearClientActiveHires clears the value of the "client_active_hires" field.
func (u *WorkHistoryUpsertOne) ClearClientActiveHires() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearClientActiveHires()
	})
}

// SetClientTotalPaidHours sets the "client_total_paid_hours" field.
func (u *WorkHistoryUpsertOne) SetClientTotalPaidHours(v int) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetClientTotalPaidHours(v)
	})
}

// AddClientTotalPaidHours adds v to the "client_total_paid_hours" field.
func (u *WorkHistoryUpsertOne) AddClientTotalPaidHours(v int) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.AddClientTotalPaidHours(v)
	})
}

// UpdateClientTotalPaidHours sets the "client_total_paid_hours" field to the value that was provided on create.
func (u *WorkHistoryUpsertOne) UpdateClientTotalPaidHours() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateClientTotalPaidHours()
	})
}

// ClearClientTotalPaidHours clears the value of the "client_total_paid_hours" field.
func (u *WorkHistoryUpsertOne) ClearClientTotalPaidHours() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearClientTotalPaidHours()
	})
}

// SetClientAverageHourlyRatePaid sets the "client_average_hourly_rate_paid" field.
func (u *WorkHistoryUpsertOne) SetClientAverageHourlyRatePaid(v float64) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetClientAverageHourlyRatePaid(v)
	})
}

// AddClientAverageHourlyRatePaid adds v to the "client_average_hourly_rate_paid" field.
func (u *WorkHistoryUpsertOne) AddClientAverageHourlyRatePaid(v float64) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.AddClientAverageHourlyRatePaid(v)
	})
}

// UpdateClientAverageHourlyRatePaid sets the "client_average_hourly_rate_paid" field to the value that was provided on create.
func (u *WorkHistoryUpsertOne) UpdateClientAverageHourlyRatePaid() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateClientAverageHourlyRatePaid()
	})
}

// ClearClientAverageHourlyRatePaid clears the value of the "client_average_hourly_rate_paid" field.
func (u *WorkHistoryUpsertOne) ClearClientAverageHourlyRatePaid() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearClientAverageHourlyRatePaid()
	})
}

// SetClientCompanyCategory sets the "client_company_category" field.
func (u *WorkHistoryUpsertOne) SetClientCompanyCategory(v string) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetClientCompanyCategory(v)
	})
}

// UpdateClientCompanyCategory sets the "client_company_category" field to the value that was provided on create.
func (u *WorkHistoryUpsertOne) UpdateClientCompanyCategory() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateClientCompanyCategory()
	})
}

// ClearClientCompanyCategory clears the value of the "client_company_category" field.
func (u *WorkHistoryUpsertOne) ClearClientCompanyCategory() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearClientCompanyCategory()
	})
}

// SetClientCompanySize sets the "client_company_size" field.
func (u *WorkHistoryUpsertOne) SetClientCompanySize(v string) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetClientCompanySize(v)
	})
}

// UpdateClientCompanySize sets the "client_company_size" field to the value that was provided on create.
func (u *WorkHistoryUpsertOne) UpdateClientCompanySize() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateClientCompanySize()
	})
}

// ClearClientCompanySize clears the value of the "client_company_size" field.
func (u *WorkHistoryUpsertOne) ClearClientCompanySize() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearClientCompanySize()
	})
}

// SetTotalProposals sets the "total_proposals" field.
func (u *WorkHistoryUpsertOne) SetTotalProposals(v int) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetTotalProposals(v)
	})
}

// AddTotalProposals adds v to the "total_proposals" field.
func (u *WorkHistoryUpsertOne) AddTotalProposals(v int) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.AddTotalProposals(v)
	})
}

// UpdateTotalProposals sets the "total_proposals" field to the value that was provided on create.
func (u *WorkHistoryUpsertOne) UpdateTotalProposals() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateTotalProposals()
	})
}

// ClearTotalProposals clears the value of the "total_proposals" field.
func (u *WorkHistoryUpsertOne) ClearTotalProposals() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearTotalProposals()
	})
}

// SetNumberOfInterviews sets the "number_of_interviews" field.
func (u *WorkHistoryUpsertOne) SetNumberOfInterviews(v int) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetNumberOfInterviews(v)
	})
}

// AddNumberOfInterviews adds v to the "number_of_interviews" field.
func (u *WorkHistoryUpsertOne) AddNumberOfInterviews(v int) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.AddNumberOfInterviews(v)
	})
}

// UpdateNumberOfInterviews sets the "number_of_interviews" field to the value that was provided on create.
func (u *WorkHistoryUpsertOne) UpdateNumberOfInterviews() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateNumberOfInterviews()
	})
}

// ClearNumberOfInterviews clears the value of the "number_of_interviews" field.
func (u *WorkHistoryUpsertOne) ClearNumberOfInterviews() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearNumberOfInterviews()
	})
}

// SetSkills sets the "skills" field.
func (u *WorkHistoryUpsertOne) SetSkills(v []string) *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetSkills(v)
	})
}

// UpdateSkills sets the "skills" field to the value that was provided on create.
func (u *WorkHistoryUpsertOne) UpdateSkills() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateSkills()
	})
}

// ClearSkills clears the value of the "skills" field.
func (u *WorkHistoryUpsertOne) ClearSkills() *WorkHistoryUpsertOne {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearSkills()
	})
}

// Exec executes the query.
func (u *WorkHistoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WorkHistoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkHistoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WorkHistoryUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WorkHistoryUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WorkHistoryCreateBulk is the builder for creating many WorkHistory entities in bulk.
type WorkHistoryCreateBulk struct {
	config
	err      error
	builders []*WorkHistoryCreate
	conflict []sql.ConflictOption
}

// Save creates the WorkHistory entities in the database.
func (whcb *WorkHistoryCreateBulk) Save(ctx context.Context) ([]*WorkHistory, error) {
	if whcb.err != nil {
		return nil, whcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(whcb.builders))
	nodes := make([]*WorkHistory, len(whcb.builders))
	mutators := make([]Mutator, len(whcb.builders))
	for i := range whcb.builders {
		func(i int, root context.Context) {
			builder := whcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, whcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = whcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, whcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, whcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (whcb *WorkHistoryCreateBulk) SaveX(ctx context.Context) []*WorkHistory {
	v, err := whcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (whcb *WorkHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := whcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (whcb *WorkHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := whcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WorkHistory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkHistoryUpsert) {
//			SetEmbeddedAt(v+v).
//		}).
//		Exec(ctx)
func (whcb *WorkHistoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *WorkHistoryUpsertBulk {
	whcb.conflict = opts
	return &WorkHistoryUpsertBulk{
		create: whcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WorkHistory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (whcb *WorkHistoryCreateBulk) OnConflictColumns(columns ...string) *WorkHistoryUpsertBulk {
	whcb.conflict = append(whcb.conflict, sql.ConflictColumns(columns...))
	return &WorkHistoryUpsertBulk{
		create: whcb,
	}
}

// WorkHistoryUpsertBulk is the builder for "upsert"-ing
// a bulk of WorkHistory nodes.
type WorkHistoryUpsertBulk struct {
	create *WorkHistoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.WorkHistory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *WorkHistoryUpsertBulk) UpdateNewValues() *WorkHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(workhistory.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WorkHistory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WorkHistoryUpsertBulk) Ignore() *WorkHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkHistoryUpsertBulk) DoNothing() *WorkHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkHistoryCreateBulk.OnConflict
// documentation for more info.
func (u *WorkHistoryUpsertBulk) Update(set func(*WorkHistoryUpsert)) *WorkHistoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkHistoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetEmbeddedAt sets the "embedded_at" field.
func (u *WorkHistoryUpsertBulk) SetEmbeddedAt(v time.Time) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetEmbeddedAt(v)
	})
}

// UpdateEmbeddedAt sets the "embedded_at" field to the value that was provided on create.
func (u *WorkHistoryUpsertBulk) UpdateEmbeddedAt() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateEmbeddedAt()
	})
}

// ClearEmbeddedAt clears the value of the "embedded_at" field.
func (u *WorkHistoryUpsertBulk) ClearEmbeddedAt() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearEmbeddedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WorkHistoryUpsertBulk) SetUpdatedAt(v time.Time) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WorkHistoryUpsertBulk) UpdateUpdatedAt() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTitle sets the "title" field.
func (u *WorkHistoryUpsertBulk) SetTitle(v string) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *WorkHistoryUpsertBulk) UpdateTitle() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateTitle()
	})
}

// SetClientFeedback sets the "client_feedback" field.
func (u *WorkHistoryUpsertBulk) SetClientFeedback(v string) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetClientFeedback(v)
	})
}

// UpdateClientFeedback sets the "client_feedback" field to the value that was provided on create.
func (u *WorkHistoryUpsertBulk) UpdateClientFeedback() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateClientFeedback()
	})
}

// ClearClientFeedback clears the value of the "client_feedback" field.
func (u *WorkHistoryUpsertBulk) ClearClientFeedback() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearClientFeedback()
	})
}

// SetOverallRating sets the "overall_rating" field.
func (u *WorkHistoryUpsertBulk) SetOverallRating(v float64) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetOverallRating(v)
	})
}

// AddOverallRating adds v to the "overall_rating" field.
func (u *WorkHistoryUpsertBulk) AddOverallRating(v float64) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.AddOverallRating(v)
	})
}

// UpdateOverallRating sets the "overall_rating" field to the value that was provided on create.
func (u *WorkHistoryUpsertBulk) UpdateOverallRating() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateOverallRating()
	})
}

// ClearOverallRating clears the value of the "overall_rating" field.
func (u *WorkHistoryUpsertBulk) ClearOverallRating() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearOverallRating()
	})
}

// SetFreelancerEarnings sets the "freelancer_earnings" field.
func (u *WorkHistoryUpsertBulk) SetFreelancerEarnings(v float64) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetFreelancerEarnings(v)
	})
}

// AddFreelancerEarnings adds v to the "freelancer_earnings" field.
func (u *WorkHistoryUpsertBulk) AddFreelancerEarnings(v float64) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.AddFreelancerEarnings(v)
	})
}

// UpdateFreelancerEarnings sets the "freelancer_earnings" field to the value that was provided on create.
func (u *WorkHistoryUpsertBulk) UpdateFreelancerEarnings() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateFreelancerEarnings()
	})
}

// ClearFreelancerEarnings clears the value of the "freelancer_earnings" field.
func (u *WorkHistoryUpsertBulk) ClearFreelancerEarnings() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearFreelancerEarnings()
	})
}

// SetStartDate sets the "start_date" field.
func (u *WorkHistoryUpsertBulk) SetStartDate(v time.Time) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *WorkHistoryUpsertBulk) UpdateStartDate() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateStartDate()
	})
}

// ClearStartDate clears the value of the "start_date" field.
func (u *WorkHistoryUpsertBulk) ClearStartDate() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *WorkHistoryUpsertBulk) SetEndDate(v time.Time) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *WorkHistoryUpsertBulk) UpdateEndDate() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateEndDate()
	})
}

// ClearEndDate clears the value of the "end_date" field.
func (u *WorkHistoryUpsertBulk) ClearEndDate() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearEndDate()
	})
}

// SetDescription sets the "description" field.
func (u *WorkHistoryUpsertBulk) SetDescription(v string) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *WorkHistoryUpsertBulk) UpdateDescription() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *WorkHistoryUpsertBulk) ClearDescription() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearDescription()
	})
}

// SetBudget sets the "budget" field.
func (u *WorkHistoryUpsertBulk) SetBudget(v float64) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetBudget(v)
	})
}

// AddBudget adds v to the "budget" field.
func (u *WorkHistoryUpsertBulk) AddBudget(v float64) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.AddBudget(v)
	})
}

// UpdateBudget sets the "budget" field to the value that was provided on create.
func (u *WorkHistoryUpsertBulk) UpdateBudget() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateBudget()
	})
}

// ClearBudget clears the value of the "budget" field.
func (u *WorkHistoryUpsertBulk) ClearBudget() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearBudget()
	})
}

// SetClientRating sets the "client_rating" field.
func (u *WorkHistoryUpsertBulk) SetClientRating(v float64) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetClientRating(v)
	})
}

// AddClientRating adds v to the "client_rating" field.
func (u *WorkHistoryUpsertBulk) AddClientRating(v float64) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.AddClientRating(v)
	})
}

// UpdateClientRating sets the "client_rating" field to the value that was provided on create.
func (u *WorkHistoryUpsertBulk) UpdateClientRating() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateClientRating()
	})
}

// ClearClientRating clears the value of the "client_rating" field.
func (u *WorkHistoryUpsertBulk) ClearClientRating() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearClientRating()
	})
}

// SetClientReviewCount sets the "client_review_count" field.
func (u *WorkHistoryUpsertBulk) SetClientReviewCount(v int) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetClientReviewCount(v)
	})
}

// AddClientReviewCount adds v to the "client_review_count" field.
func (u *WorkHistoryUpsertBulk) AddClientReviewCount(v int) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.AddClientReviewCount(v)
	})
}

// UpdateClientReviewCount sets the "client_review_count" field to the value that was provided on create.
func (u *WorkHistoryUpsertBulk) UpdateClientReviewCount() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateClientReviewCount()
	})
}

// ClearClientReviewCount clears the value of the "client_review_count" field.
func (u *WorkHistoryUpsertBulk) ClearClientReviewCount() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearClientReviewCount()
	})
}

// SetClientCountry sets the "client_country" field.
func (u *WorkHistoryUpsertBulk) SetClientCountry(v string) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetClientCountry(v)
	})
}

// UpdateClientCountry sets the "client_country" field to the value that was provided on create.
func (u *WorkHistoryUpsertBulk) UpdateClientCountry() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateClientCountry()
	})
}

// ClearClientCountry clears the value of the "client_country" field.
func (u *WorkHistoryUpsertBulk) ClearClientCountry() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearClientCountry()
	})
}

// SetClientTotalJobsPosted sets the "client_total_jobs_posted" field.
func (u *WorkHistoryUpsertBulk) SetClientTotalJobsPosted(v int) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetClientTotalJobsPosted(v)
	})
}

// AddClientTotalJobsPosted adds v to the "client_total_jobs_posted" field.
func (u *WorkHistoryUpsertBulk) AddClientTotalJobsPosted(v int) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.AddClientTotalJobsPosted(v)
	})
}

// UpdateClientTotalJobsPosted sets the "client_total_jobs_posted" field to the value that was provided on create.
func (u *WorkHistoryUpsertBulk) UpdateClientTotalJobsPosted() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateClientTotalJobsPosted()
	})
}

// ClearClientTotalJobsPosted clears the value of the "client_total_jobs_posted" field.
func (u *WorkHistoryUpsertBulk) ClearClientTotalJobsPosted() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearClientTotalJobsPosted()
	})
}

// SetClientTotalSpend sets the "client_total_spend" field.
func (u *WorkHistoryUpsertBulk) SetClientTotalSpend(v float64) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetClientTotalSpend(v)
	})
}

// AddClientTotalSpend adds v to the "client_total_spend" field.
func (u *WorkHistoryUpsertBulk) AddClientTotalSpend(v float64) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.AddClientTotalSpend(v)
	})
}

// UpdateClientTotalSpend sets the "client_total_spend" field to the value that was provided on create.
func (u *WorkHistoryUpsertBulk) UpdateClientTotalSpend() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateClientTotalSpend()
	})
}

// ClearClientTotalSpend clears the value of the "client_total_spend" field.
func (u *WorkHistoryUpsertBulk) ClearClientTotalSpend() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearClientTotalSpend()
	})
}

// SetClientTotalHires sets the "client_total_hires" field.
func (u *WorkHistoryUpsertBulk) SetClientTotalHires(v int) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetClientTotalHires(v)
	})
}

// AddClientTotalHires adds v to the "client_total_hires" field.
func (u *WorkHistoryUpsertBulk) AddClientTotalHires(v int) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.AddClientTotalHires(v)
	})
}

// UpdateClientTotalHires sets the "client_total_hires" field to the value that was provided on create.
func (u *WorkHistoryUpsertBulk) UpdateClientTotalHires() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateClientTotalHires()
	})
}

// ClearClientTotalHires clears the value of the "client_total_hires" field.
func (u *WorkHistoryUpsertBulk) ClearClientTotalHires() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearClientTotalHires()
	})
}

// SetClientActiveHires sets the "client_active_hires" field.
func (u *WorkHistoryUpsertBulk) SetClientActiveHires(v int) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetClientActiveHires(v)
	})
}

// AddClientActiveHires adds v to the "client_active_hires" field.
func (u *WorkHistoryUpsertBulk) AddClientActiveHires(v int) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.AddClientActiveHires(v)
	})
}

// UpdateClientActiveHires sets the "client_active_hires" field to the value that was provided on create.
func (u *WorkHistoryUpsertBulk) UpdateClientActiveHires() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateClientActiveHires()
	})
}

// ClearClientActiveHires clears the value of the "client_active_hires" field.
func (u *WorkHistoryUpsertBulk) ClearClientActiveHires() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearClientActiveHires()
	})
}

// SetClientTotalPaidHours sets the "client_total_paid_hours" field.
func (u *WorkHistoryUpsertBulk) SetClientTotalPaidHours(v int) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetClientTotalPaidHours(v)
	})
}

// AddClientTotalPaidHours adds v to the "client_total_paid_hours" field.
func (u *WorkHistoryUpsertBulk) AddClientTotalPaidHours(v int) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.AddClientTotalPaidHours(v)
	})
}

// UpdateClientTotalPaidHours sets the "client_total_paid_hours" field to the value that was provided on create.
func (u *WorkHistoryUpsertBulk) UpdateClientTotalPaidHours() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateClientTotalPaidHours()
	})
}

// ClearClientTotalPaidHours clears the value of the "client_total_paid_hours" field.
func (u *WorkHistoryUpsertBulk) ClearClientTotalPaidHours() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearClientTotalPaidHours()
	})
}

// SetClientAverageHourlyRatePaid sets the "client_average_hourly_rate_paid" field.
func (u *WorkHistoryUpsertBulk) SetClientAverageHourlyRatePaid(v float64) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetClientAverageHourlyRatePaid(v)
	})
}

// AddClientAverageHourlyRatePaid adds v to the "client_average_hourly_rate_paid" field.
func (u *WorkHistoryUpsertBulk) AddClientAverageHourlyRatePaid(v float64) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.AddClientAverageHourlyRatePaid(v)
	})
}

// UpdateClientAverageHourlyRatePaid sets the "client_average_hourly_rate_paid" field to the value that was provided on create.
func (u *WorkHistoryUpsertBulk) UpdateClientAverageHourlyRatePaid() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateClientAverageHourlyRatePaid()
	})
}

// ClearClientAverageHourlyRatePaid clears the value of the "client_average_hourly_rate_paid" field.
func (u *WorkHistoryUpsertBulk) ClearClientAverageHourlyRatePaid() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearClientAverageHourlyRatePaid()
	})
}

// SetClientCompanyCategory sets the "client_company_category" field.
func (u *WorkHistoryUpsertBulk) SetClientCompanyCategory(v string) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetClientCompanyCategory(v)
	})
}

// UpdateClientCompanyCategory sets the "client_company_category" field to the value that was provided on create.
func (u *WorkHistoryUpsertBulk) UpdateClientCompanyCategory() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateClientCompanyCategory()
	})
}

// ClearClientCompanyCategory clears the value of the "client_company_category" field.
func (u *WorkHistoryUpsertBulk) ClearClientCompanyCategory() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearClientCompanyCategory()
	})
}

// SetClientCompanySize sets the "client_company_size" field.
func (u *WorkHistoryUpsertBulk) SetClientCompanySize(v string) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetClientCompanySize(v)
	})
}

// UpdateClientCompanySize sets the "client_company_size" field to the value that was provided on create.
func (u *WorkHistoryUpsertBulk) UpdateClientCompanySize() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateClientCompanySize()
	})
}

// ClearClientCompanySize clears the value of the "client_company_size" field.
func (u *WorkHistoryUpsertBulk) ClearClientCompanySize() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearClientCompanySize()
	})
}

// SetTotalProposals sets the "total_proposals" field.
func (u *WorkHistoryUpsertBulk) SetTotalProposals(v int) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetTotalProposals(v)
	})
}

// AddTotalProposals adds v to the "total_proposals" field.
func (u *WorkHistoryUpsertBulk) AddTotalProposals(v int) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.AddTotalProposals(v)
	})
}

// UpdateTotalProposals sets the "total_proposals" field to the value that was provided on create.
func (u *WorkHistoryUpsertBulk) UpdateTotalProposals() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateTotalProposals()
	})
}

// ClearTotalProposals clears the value of the "total_proposals" field.
func (u *WorkHistoryUpsertBulk) ClearTotalProposals() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearTotalProposals()
	})
}

// SetNumberOfInterviews sets the "number_of_interviews" field.
func (u *WorkHistoryUpsertBulk) SetNumberOfInterviews(v int) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetNumberOfInterviews(v)
	})
}

// AddNumberOfInterviews adds v to the "number_of_interviews" field.
func (u *WorkHistoryUpsertBulk) AddNumberOfInterviews(v int) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.AddNumberOfInterviews(v)
	})
}

// UpdateNumberOfInterviews sets the "number_of_interviews" field to the value that was provided on create.
func (u *WorkHistoryUpsertBulk) UpdateNumberOfInterviews() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateNumberOfInterviews()
	})
}

// ClearNumberOfInterviews clears the value of the "number_of_interviews" field.
func (u *WorkHistoryUpsertBulk) ClearNumberOfInterviews() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearNumberOfInterviews()
	})
}

// SetSkills sets the "skills" field.
func (u *WorkHistoryUpsertBulk) SetSkills(v []string) *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.SetSkills(v)
	})
}

// UpdateSkills sets the "skills" field to the value that was provided on create.
func (u *WorkHistoryUpsertBulk) UpdateSkills() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.UpdateSkills()
	})
}

// ClearSkills clears the value of the "skills" field.
func (u *WorkHistoryUpsertBulk) ClearSkills() *WorkHistoryUpsertBulk {
	return u.Update(func(s *WorkHistoryUpsert) {
		s.ClearSkills()
	})
}

// Exec executes the query.
func (u *WorkHistoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the WorkHistoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WorkHistoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkHistoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
