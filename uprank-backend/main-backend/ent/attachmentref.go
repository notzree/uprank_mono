// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/notzree/uprank_mono/uprank-backend/main-backend/ent/attachmentref"
	"github.com/notzree/uprank_mono/uprank-backend/main-backend/ent/upworkfreelancer"
)

// AttachmentRef is the model entity for the AttachmentRef schema.
type AttachmentRef struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Link holds the value of the "link" field.
	Link string `json:"link,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AttachmentRefQuery when eager-loading is set.
	Edges                         AttachmentRefEdges `json:"edges"`
	upwork_freelancer_attachments *string
	selectValues                  sql.SelectValues
}

// AttachmentRefEdges holds the relations/edges for other nodes in the graph.
type AttachmentRefEdges struct {
	// Freelancer holds the value of the freelancer edge.
	Freelancer *UpworkFreelancer `json:"freelancer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// FreelancerOrErr returns the Freelancer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AttachmentRefEdges) FreelancerOrErr() (*UpworkFreelancer, error) {
	if e.Freelancer != nil {
		return e.Freelancer, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: upworkfreelancer.Label}
	}
	return nil, &NotLoadedError{edge: "freelancer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AttachmentRef) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case attachmentref.FieldID:
			values[i] = new(sql.NullInt64)
		case attachmentref.FieldName, attachmentref.FieldLink:
			values[i] = new(sql.NullString)
		case attachmentref.ForeignKeys[0]: // upwork_freelancer_attachments
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AttachmentRef fields.
func (ar *AttachmentRef) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case attachmentref.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ar.ID = int(value.Int64)
		case attachmentref.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ar.Name = value.String
			}
		case attachmentref.FieldLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field link", values[i])
			} else if value.Valid {
				ar.Link = value.String
			}
		case attachmentref.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field upwork_freelancer_attachments", values[i])
			} else if value.Valid {
				ar.upwork_freelancer_attachments = new(string)
				*ar.upwork_freelancer_attachments = value.String
			}
		default:
			ar.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AttachmentRef.
// This includes values selected through modifiers, order, etc.
func (ar *AttachmentRef) Value(name string) (ent.Value, error) {
	return ar.selectValues.Get(name)
}

// QueryFreelancer queries the "freelancer" edge of the AttachmentRef entity.
func (ar *AttachmentRef) QueryFreelancer() *UpworkFreelancerQuery {
	return NewAttachmentRefClient(ar.config).QueryFreelancer(ar)
}

// Update returns a builder for updating this AttachmentRef.
// Note that you need to call AttachmentRef.Unwrap() before calling this method if this AttachmentRef
// was returned from a transaction, and the transaction was committed or rolled back.
func (ar *AttachmentRef) Update() *AttachmentRefUpdateOne {
	return NewAttachmentRefClient(ar.config).UpdateOne(ar)
}

// Unwrap unwraps the AttachmentRef entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ar *AttachmentRef) Unwrap() *AttachmentRef {
	_tx, ok := ar.config.driver.(*txDriver)
	if !ok {
		panic("ent: AttachmentRef is not a transactional entity")
	}
	ar.config.driver = _tx.drv
	return ar
}

// String implements the fmt.Stringer.
func (ar *AttachmentRef) String() string {
	var builder strings.Builder
	builder.WriteString("AttachmentRef(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ar.ID))
	builder.WriteString("name=")
	builder.WriteString(ar.Name)
	builder.WriteString(", ")
	builder.WriteString("link=")
	builder.WriteString(ar.Link)
	builder.WriteByte(')')
	return builder.String()
}

// AttachmentRefs is a parsable slice of AttachmentRef.
type AttachmentRefs []*AttachmentRef
