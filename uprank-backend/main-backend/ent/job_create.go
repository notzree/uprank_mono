// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/notzree/uprank-backend/main-backend/ent/freelancer"
	"github.com/notzree/uprank-backend/main-backend/ent/job"
	"github.com/notzree/uprank-backend/main-backend/ent/user"
)

// JobCreate is the builder for creating a Job entity.
type JobCreate struct {
	config
	mutation *JobMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (jc *JobCreate) SetTitle(s string) *JobCreate {
	jc.mutation.SetTitle(s)
	return jc
}

// SetCreatedAt sets the "created_at" field.
func (jc *JobCreate) SetCreatedAt(t time.Time) *JobCreate {
	jc.mutation.SetCreatedAt(t)
	return jc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (jc *JobCreate) SetNillableCreatedAt(t *time.Time) *JobCreate {
	if t != nil {
		jc.SetCreatedAt(*t)
	}
	return jc
}

// SetLocation sets the "location" field.
func (jc *JobCreate) SetLocation(s string) *JobCreate {
	jc.mutation.SetLocation(s)
	return jc
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (jc *JobCreate) SetNillableLocation(s *string) *JobCreate {
	if s != nil {
		jc.SetLocation(*s)
	}
	return jc
}

// SetDescription sets the "description" field.
func (jc *JobCreate) SetDescription(s string) *JobCreate {
	jc.mutation.SetDescription(s)
	return jc
}

// SetSkills sets the "skills" field.
func (jc *JobCreate) SetSkills(s []string) *JobCreate {
	jc.mutation.SetSkills(s)
	return jc
}

// SetExperienceLevel sets the "experience_level" field.
func (jc *JobCreate) SetExperienceLevel(s string) *JobCreate {
	jc.mutation.SetExperienceLevel(s)
	return jc
}

// SetNillableExperienceLevel sets the "experience_level" field if the given value is not nil.
func (jc *JobCreate) SetNillableExperienceLevel(s *string) *JobCreate {
	if s != nil {
		jc.SetExperienceLevel(*s)
	}
	return jc
}

// SetHourly sets the "hourly" field.
func (jc *JobCreate) SetHourly(b bool) *JobCreate {
	jc.mutation.SetHourly(b)
	return jc
}

// SetFixed sets the "fixed" field.
func (jc *JobCreate) SetFixed(b bool) *JobCreate {
	jc.mutation.SetFixed(b)
	return jc
}

// SetHourlyRate sets the "hourly_rate" field.
func (jc *JobCreate) SetHourlyRate(f []float32) *JobCreate {
	jc.mutation.SetHourlyRate(f)
	return jc
}

// SetFixedRate sets the "fixed_rate" field.
func (jc *JobCreate) SetFixedRate(f float64) *JobCreate {
	jc.mutation.SetFixedRate(f)
	return jc
}

// SetNillableFixedRate sets the "fixed_rate" field if the given value is not nil.
func (jc *JobCreate) SetNillableFixedRate(f *float64) *JobCreate {
	if f != nil {
		jc.SetFixedRate(*f)
	}
	return jc
}

// SetAverageUprankScore sets the "average_uprank_score" field.
func (jc *JobCreate) SetAverageUprankScore(f float64) *JobCreate {
	jc.mutation.SetAverageUprankScore(f)
	return jc
}

// SetNillableAverageUprankScore sets the "average_uprank_score" field if the given value is not nil.
func (jc *JobCreate) SetNillableAverageUprankScore(f *float64) *JobCreate {
	if f != nil {
		jc.SetAverageUprankScore(*f)
	}
	return jc
}

// SetMaxUprankScore sets the "max_uprank_score" field.
func (jc *JobCreate) SetMaxUprankScore(f float64) *JobCreate {
	jc.mutation.SetMaxUprankScore(f)
	return jc
}

// SetNillableMaxUprankScore sets the "max_uprank_score" field if the given value is not nil.
func (jc *JobCreate) SetNillableMaxUprankScore(f *float64) *JobCreate {
	if f != nil {
		jc.SetMaxUprankScore(*f)
	}
	return jc
}

// SetMinUprankScore sets the "min_uprank_score" field.
func (jc *JobCreate) SetMinUprankScore(f float64) *JobCreate {
	jc.mutation.SetMinUprankScore(f)
	return jc
}

// SetNillableMinUprankScore sets the "min_uprank_score" field if the given value is not nil.
func (jc *JobCreate) SetNillableMinUprankScore(f *float64) *JobCreate {
	if f != nil {
		jc.SetMinUprankScore(*f)
	}
	return jc
}

// SetID sets the "id" field.
func (jc *JobCreate) SetID(s string) *JobCreate {
	jc.mutation.SetID(s)
	return jc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (jc *JobCreate) SetUserID(id string) *JobCreate {
	jc.mutation.SetUserID(id)
	return jc
}

// SetUser sets the "user" edge to the User entity.
func (jc *JobCreate) SetUser(u *User) *JobCreate {
	return jc.SetUserID(u.ID)
}

// AddFreelancerIDs adds the "freelancers" edge to the Freelancer entity by IDs.
func (jc *JobCreate) AddFreelancerIDs(ids ...string) *JobCreate {
	jc.mutation.AddFreelancerIDs(ids...)
	return jc
}

// AddFreelancers adds the "freelancers" edges to the Freelancer entity.
func (jc *JobCreate) AddFreelancers(f ...*Freelancer) *JobCreate {
	ids := make([]string, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return jc.AddFreelancerIDs(ids...)
}

// Mutation returns the JobMutation object of the builder.
func (jc *JobCreate) Mutation() *JobMutation {
	return jc.mutation
}

// Save creates the Job in the database.
func (jc *JobCreate) Save(ctx context.Context) (*Job, error) {
	jc.defaults()
	return withHooks(ctx, jc.sqlSave, jc.mutation, jc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jc *JobCreate) SaveX(ctx context.Context) *Job {
	v, err := jc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jc *JobCreate) Exec(ctx context.Context) error {
	_, err := jc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jc *JobCreate) ExecX(ctx context.Context) {
	if err := jc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jc *JobCreate) defaults() {
	if _, ok := jc.mutation.CreatedAt(); !ok {
		v := job.DefaultCreatedAt()
		jc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jc *JobCreate) check() error {
	if _, ok := jc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Job.title"`)}
	}
	if v, ok := jc.mutation.Title(); ok {
		if err := job.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Job.title": %w`, err)}
		}
	}
	if _, ok := jc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Job.created_at"`)}
	}
	if _, ok := jc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Job.description"`)}
	}
	if v, ok := jc.mutation.Description(); ok {
		if err := job.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Job.description": %w`, err)}
		}
	}
	if _, ok := jc.mutation.Hourly(); !ok {
		return &ValidationError{Name: "hourly", err: errors.New(`ent: missing required field "Job.hourly"`)}
	}
	if _, ok := jc.mutation.Fixed(); !ok {
		return &ValidationError{Name: "fixed", err: errors.New(`ent: missing required field "Job.fixed"`)}
	}
	if v, ok := jc.mutation.ID(); ok {
		if err := job.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Job.id": %w`, err)}
		}
	}
	if _, ok := jc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Job.user"`)}
	}
	return nil
}

func (jc *JobCreate) sqlSave(ctx context.Context) (*Job, error) {
	if err := jc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Job.ID type: %T", _spec.ID.Value)
		}
	}
	jc.mutation.id = &_node.ID
	jc.mutation.done = true
	return _node, nil
}

func (jc *JobCreate) createSpec() (*Job, *sqlgraph.CreateSpec) {
	var (
		_node = &Job{config: jc.config}
		_spec = sqlgraph.NewCreateSpec(job.Table, sqlgraph.NewFieldSpec(job.FieldID, field.TypeString))
	)
	if id, ok := jc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := jc.mutation.Title(); ok {
		_spec.SetField(job.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := jc.mutation.CreatedAt(); ok {
		_spec.SetField(job.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := jc.mutation.Location(); ok {
		_spec.SetField(job.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := jc.mutation.Description(); ok {
		_spec.SetField(job.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := jc.mutation.Skills(); ok {
		_spec.SetField(job.FieldSkills, field.TypeJSON, value)
		_node.Skills = value
	}
	if value, ok := jc.mutation.ExperienceLevel(); ok {
		_spec.SetField(job.FieldExperienceLevel, field.TypeString, value)
		_node.ExperienceLevel = value
	}
	if value, ok := jc.mutation.Hourly(); ok {
		_spec.SetField(job.FieldHourly, field.TypeBool, value)
		_node.Hourly = value
	}
	if value, ok := jc.mutation.Fixed(); ok {
		_spec.SetField(job.FieldFixed, field.TypeBool, value)
		_node.Fixed = value
	}
	if value, ok := jc.mutation.HourlyRate(); ok {
		_spec.SetField(job.FieldHourlyRate, field.TypeJSON, value)
		_node.HourlyRate = value
	}
	if value, ok := jc.mutation.FixedRate(); ok {
		_spec.SetField(job.FieldFixedRate, field.TypeFloat64, value)
		_node.FixedRate = value
	}
	if value, ok := jc.mutation.AverageUprankScore(); ok {
		_spec.SetField(job.FieldAverageUprankScore, field.TypeFloat64, value)
		_node.AverageUprankScore = value
	}
	if value, ok := jc.mutation.MaxUprankScore(); ok {
		_spec.SetField(job.FieldMaxUprankScore, field.TypeFloat64, value)
		_node.MaxUprankScore = value
	}
	if value, ok := jc.mutation.MinUprankScore(); ok {
		_spec.SetField(job.FieldMinUprankScore, field.TypeFloat64, value)
		_node.MinUprankScore = value
	}
	if nodes := jc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.UserTable,
			Columns: []string{job.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_jobs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := jc.mutation.FreelancersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.FreelancersTable,
			Columns: []string{job.FreelancersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(freelancer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// JobCreateBulk is the builder for creating many Job entities in bulk.
type JobCreateBulk struct {
	config
	err      error
	builders []*JobCreate
}

// Save creates the Job entities in the database.
func (jcb *JobCreateBulk) Save(ctx context.Context) ([]*Job, error) {
	if jcb.err != nil {
		return nil, jcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(jcb.builders))
	nodes := make([]*Job, len(jcb.builders))
	mutators := make([]Mutator, len(jcb.builders))
	for i := range jcb.builders {
		func(i int, root context.Context) {
			builder := jcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jcb *JobCreateBulk) SaveX(ctx context.Context) []*Job {
	v, err := jcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jcb *JobCreateBulk) Exec(ctx context.Context) error {
	_, err := jcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jcb *JobCreateBulk) ExecX(ctx context.Context) {
	if err := jcb.Exec(ctx); err != nil {
		panic(err)
	}
}
