// Code generated by ent, DO NOT EDIT.

package attachmentref

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the attachmentref type in the database.
	Label = "attachment_ref"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldLink holds the string denoting the link field in the database.
	FieldLink = "link"
	// EdgeFreelancer holds the string denoting the freelancer edge name in mutations.
	EdgeFreelancer = "freelancer"
	// Table holds the table name of the attachmentref in the database.
	Table = "attachment_refs"
	// FreelancerTable is the table that holds the freelancer relation/edge.
	FreelancerTable = "attachment_refs"
	// FreelancerInverseTable is the table name for the UpworkFreelancer entity.
	// It exists in this package in order to avoid circular dependency with the "upworkfreelancer" package.
	FreelancerInverseTable = "upwork_freelancers"
	// FreelancerColumn is the table column denoting the freelancer relation/edge.
	FreelancerColumn = "upwork_freelancer_attachments"
)

// Columns holds all SQL columns for attachmentref fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldLink,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "attachment_refs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"upwork_freelancer_attachments",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the AttachmentRef queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByLink orders the results by the link field.
func ByLink(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLink, opts...).ToFunc()
}

// ByFreelancerField orders the results by freelancer field.
func ByFreelancerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFreelancerStep(), sql.OrderByField(field, opts...))
	}
}
func newFreelancerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FreelancerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FreelancerTable, FreelancerColumn),
	)
}
