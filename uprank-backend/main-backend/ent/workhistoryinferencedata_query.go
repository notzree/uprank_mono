// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/notzree/uprank-backend/main-backend/ent/predicate"
	"github.com/notzree/uprank-backend/main-backend/ent/workhistory"
	"github.com/notzree/uprank-backend/main-backend/ent/workhistoryinferencedata"
)

// WorkhistoryInferenceDataQuery is the builder for querying WorkhistoryInferenceData entities.
type WorkhistoryInferenceDataQuery struct {
	config
	ctx               *QueryContext
	order             []workhistoryinferencedata.OrderOption
	inters            []Interceptor
	predicates        []predicate.WorkhistoryInferenceData
	withWorkHistories *WorkHistoryQuery
	withFKs           bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WorkhistoryInferenceDataQuery builder.
func (widq *WorkhistoryInferenceDataQuery) Where(ps ...predicate.WorkhistoryInferenceData) *WorkhistoryInferenceDataQuery {
	widq.predicates = append(widq.predicates, ps...)
	return widq
}

// Limit the number of records to be returned by this query.
func (widq *WorkhistoryInferenceDataQuery) Limit(limit int) *WorkhistoryInferenceDataQuery {
	widq.ctx.Limit = &limit
	return widq
}

// Offset to start from.
func (widq *WorkhistoryInferenceDataQuery) Offset(offset int) *WorkhistoryInferenceDataQuery {
	widq.ctx.Offset = &offset
	return widq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (widq *WorkhistoryInferenceDataQuery) Unique(unique bool) *WorkhistoryInferenceDataQuery {
	widq.ctx.Unique = &unique
	return widq
}

// Order specifies how the records should be ordered.
func (widq *WorkhistoryInferenceDataQuery) Order(o ...workhistoryinferencedata.OrderOption) *WorkhistoryInferenceDataQuery {
	widq.order = append(widq.order, o...)
	return widq
}

// QueryWorkHistories chains the current query on the "work_histories" edge.
func (widq *WorkhistoryInferenceDataQuery) QueryWorkHistories() *WorkHistoryQuery {
	query := (&WorkHistoryClient{config: widq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := widq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := widq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workhistoryinferencedata.Table, workhistoryinferencedata.FieldID, selector),
			sqlgraph.To(workhistory.Table, workhistory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workhistoryinferencedata.WorkHistoriesTable, workhistoryinferencedata.WorkHistoriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(widq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first WorkhistoryInferenceData entity from the query.
// Returns a *NotFoundError when no WorkhistoryInferenceData was found.
func (widq *WorkhistoryInferenceDataQuery) First(ctx context.Context) (*WorkhistoryInferenceData, error) {
	nodes, err := widq.Limit(1).All(setContextOp(ctx, widq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{workhistoryinferencedata.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (widq *WorkhistoryInferenceDataQuery) FirstX(ctx context.Context) *WorkhistoryInferenceData {
	node, err := widq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first WorkhistoryInferenceData ID from the query.
// Returns a *NotFoundError when no WorkhistoryInferenceData ID was found.
func (widq *WorkhistoryInferenceDataQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = widq.Limit(1).IDs(setContextOp(ctx, widq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{workhistoryinferencedata.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (widq *WorkhistoryInferenceDataQuery) FirstIDX(ctx context.Context) int {
	id, err := widq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single WorkhistoryInferenceData entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one WorkhistoryInferenceData entity is found.
// Returns a *NotFoundError when no WorkhistoryInferenceData entities are found.
func (widq *WorkhistoryInferenceDataQuery) Only(ctx context.Context) (*WorkhistoryInferenceData, error) {
	nodes, err := widq.Limit(2).All(setContextOp(ctx, widq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{workhistoryinferencedata.Label}
	default:
		return nil, &NotSingularError{workhistoryinferencedata.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (widq *WorkhistoryInferenceDataQuery) OnlyX(ctx context.Context) *WorkhistoryInferenceData {
	node, err := widq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only WorkhistoryInferenceData ID in the query.
// Returns a *NotSingularError when more than one WorkhistoryInferenceData ID is found.
// Returns a *NotFoundError when no entities are found.
func (widq *WorkhistoryInferenceDataQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = widq.Limit(2).IDs(setContextOp(ctx, widq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{workhistoryinferencedata.Label}
	default:
		err = &NotSingularError{workhistoryinferencedata.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (widq *WorkhistoryInferenceDataQuery) OnlyIDX(ctx context.Context) int {
	id, err := widq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of WorkhistoryInferenceDataSlice.
func (widq *WorkhistoryInferenceDataQuery) All(ctx context.Context) ([]*WorkhistoryInferenceData, error) {
	ctx = setContextOp(ctx, widq.ctx, "All")
	if err := widq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*WorkhistoryInferenceData, *WorkhistoryInferenceDataQuery]()
	return withInterceptors[[]*WorkhistoryInferenceData](ctx, widq, qr, widq.inters)
}

// AllX is like All, but panics if an error occurs.
func (widq *WorkhistoryInferenceDataQuery) AllX(ctx context.Context) []*WorkhistoryInferenceData {
	nodes, err := widq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of WorkhistoryInferenceData IDs.
func (widq *WorkhistoryInferenceDataQuery) IDs(ctx context.Context) (ids []int, err error) {
	if widq.ctx.Unique == nil && widq.path != nil {
		widq.Unique(true)
	}
	ctx = setContextOp(ctx, widq.ctx, "IDs")
	if err = widq.Select(workhistoryinferencedata.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (widq *WorkhistoryInferenceDataQuery) IDsX(ctx context.Context) []int {
	ids, err := widq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (widq *WorkhistoryInferenceDataQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, widq.ctx, "Count")
	if err := widq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, widq, querierCount[*WorkhistoryInferenceDataQuery](), widq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (widq *WorkhistoryInferenceDataQuery) CountX(ctx context.Context) int {
	count, err := widq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (widq *WorkhistoryInferenceDataQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, widq.ctx, "Exist")
	switch _, err := widq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (widq *WorkhistoryInferenceDataQuery) ExistX(ctx context.Context) bool {
	exist, err := widq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WorkhistoryInferenceDataQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (widq *WorkhistoryInferenceDataQuery) Clone() *WorkhistoryInferenceDataQuery {
	if widq == nil {
		return nil
	}
	return &WorkhistoryInferenceDataQuery{
		config:            widq.config,
		ctx:               widq.ctx.Clone(),
		order:             append([]workhistoryinferencedata.OrderOption{}, widq.order...),
		inters:            append([]Interceptor{}, widq.inters...),
		predicates:        append([]predicate.WorkhistoryInferenceData{}, widq.predicates...),
		withWorkHistories: widq.withWorkHistories.Clone(),
		// clone intermediate query.
		sql:  widq.sql.Clone(),
		path: widq.path,
	}
}

// WithWorkHistories tells the query-builder to eager-load the nodes that are connected to
// the "work_histories" edge. The optional arguments are used to configure the query builder of the edge.
func (widq *WorkhistoryInferenceDataQuery) WithWorkHistories(opts ...func(*WorkHistoryQuery)) *WorkhistoryInferenceDataQuery {
	query := (&WorkHistoryClient{config: widq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	widq.withWorkHistories = query
	return widq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		FinalizedJobRatingScore float64 `json:"finalized_job_rating_score,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.WorkhistoryInferenceData.Query().
//		GroupBy(workhistoryinferencedata.FieldFinalizedJobRatingScore).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (widq *WorkhistoryInferenceDataQuery) GroupBy(field string, fields ...string) *WorkhistoryInferenceDataGroupBy {
	widq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &WorkhistoryInferenceDataGroupBy{build: widq}
	grbuild.flds = &widq.ctx.Fields
	grbuild.label = workhistoryinferencedata.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		FinalizedJobRatingScore float64 `json:"finalized_job_rating_score,omitempty"`
//	}
//
//	client.WorkhistoryInferenceData.Query().
//		Select(workhistoryinferencedata.FieldFinalizedJobRatingScore).
//		Scan(ctx, &v)
func (widq *WorkhistoryInferenceDataQuery) Select(fields ...string) *WorkhistoryInferenceDataSelect {
	widq.ctx.Fields = append(widq.ctx.Fields, fields...)
	sbuild := &WorkhistoryInferenceDataSelect{WorkhistoryInferenceDataQuery: widq}
	sbuild.label = workhistoryinferencedata.Label
	sbuild.flds, sbuild.scan = &widq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a WorkhistoryInferenceDataSelect configured with the given aggregations.
func (widq *WorkhistoryInferenceDataQuery) Aggregate(fns ...AggregateFunc) *WorkhistoryInferenceDataSelect {
	return widq.Select().Aggregate(fns...)
}

func (widq *WorkhistoryInferenceDataQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range widq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, widq); err != nil {
				return err
			}
		}
	}
	for _, f := range widq.ctx.Fields {
		if !workhistoryinferencedata.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if widq.path != nil {
		prev, err := widq.path(ctx)
		if err != nil {
			return err
		}
		widq.sql = prev
	}
	return nil
}

func (widq *WorkhistoryInferenceDataQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*WorkhistoryInferenceData, error) {
	var (
		nodes       = []*WorkhistoryInferenceData{}
		withFKs     = widq.withFKs
		_spec       = widq.querySpec()
		loadedTypes = [1]bool{
			widq.withWorkHistories != nil,
		}
	)
	if widq.withWorkHistories != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, workhistoryinferencedata.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*WorkhistoryInferenceData).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &WorkhistoryInferenceData{config: widq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, widq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := widq.withWorkHistories; query != nil {
		if err := widq.loadWorkHistories(ctx, query, nodes, nil,
			func(n *WorkhistoryInferenceData, e *WorkHistory) { n.Edges.WorkHistories = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (widq *WorkhistoryInferenceDataQuery) loadWorkHistories(ctx context.Context, query *WorkHistoryQuery, nodes []*WorkhistoryInferenceData, init func(*WorkhistoryInferenceData), assign func(*WorkhistoryInferenceData, *WorkHistory)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*WorkhistoryInferenceData)
	for i := range nodes {
		if nodes[i].work_history_work_history_inference_data == nil {
			continue
		}
		fk := *nodes[i].work_history_work_history_inference_data
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(workhistory.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "work_history_work_history_inference_data" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (widq *WorkhistoryInferenceDataQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := widq.querySpec()
	_spec.Node.Columns = widq.ctx.Fields
	if len(widq.ctx.Fields) > 0 {
		_spec.Unique = widq.ctx.Unique != nil && *widq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, widq.driver, _spec)
}

func (widq *WorkhistoryInferenceDataQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(workhistoryinferencedata.Table, workhistoryinferencedata.Columns, sqlgraph.NewFieldSpec(workhistoryinferencedata.FieldID, field.TypeInt))
	_spec.From = widq.sql
	if unique := widq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if widq.path != nil {
		_spec.Unique = true
	}
	if fields := widq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workhistoryinferencedata.FieldID)
		for i := range fields {
			if fields[i] != workhistoryinferencedata.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := widq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := widq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := widq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := widq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (widq *WorkhistoryInferenceDataQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(widq.driver.Dialect())
	t1 := builder.Table(workhistoryinferencedata.Table)
	columns := widq.ctx.Fields
	if len(columns) == 0 {
		columns = workhistoryinferencedata.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if widq.sql != nil {
		selector = widq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if widq.ctx.Unique != nil && *widq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range widq.predicates {
		p(selector)
	}
	for _, p := range widq.order {
		p(selector)
	}
	if offset := widq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := widq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WorkhistoryInferenceDataGroupBy is the group-by builder for WorkhistoryInferenceData entities.
type WorkhistoryInferenceDataGroupBy struct {
	selector
	build *WorkhistoryInferenceDataQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (widgb *WorkhistoryInferenceDataGroupBy) Aggregate(fns ...AggregateFunc) *WorkhistoryInferenceDataGroupBy {
	widgb.fns = append(widgb.fns, fns...)
	return widgb
}

// Scan applies the selector query and scans the result into the given value.
func (widgb *WorkhistoryInferenceDataGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, widgb.build.ctx, "GroupBy")
	if err := widgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WorkhistoryInferenceDataQuery, *WorkhistoryInferenceDataGroupBy](ctx, widgb.build, widgb, widgb.build.inters, v)
}

func (widgb *WorkhistoryInferenceDataGroupBy) sqlScan(ctx context.Context, root *WorkhistoryInferenceDataQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(widgb.fns))
	for _, fn := range widgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*widgb.flds)+len(widgb.fns))
		for _, f := range *widgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*widgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := widgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// WorkhistoryInferenceDataSelect is the builder for selecting fields of WorkhistoryInferenceData entities.
type WorkhistoryInferenceDataSelect struct {
	*WorkhistoryInferenceDataQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (wids *WorkhistoryInferenceDataSelect) Aggregate(fns ...AggregateFunc) *WorkhistoryInferenceDataSelect {
	wids.fns = append(wids.fns, fns...)
	return wids
}

// Scan applies the selector query and scans the result into the given value.
func (wids *WorkhistoryInferenceDataSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wids.ctx, "Select")
	if err := wids.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WorkhistoryInferenceDataQuery, *WorkhistoryInferenceDataSelect](ctx, wids.WorkhistoryInferenceDataQuery, wids, wids.inters, v)
}

func (wids *WorkhistoryInferenceDataSelect) sqlScan(ctx context.Context, root *WorkhistoryInferenceDataQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(wids.fns))
	for _, fn := range wids.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*wids.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wids.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
