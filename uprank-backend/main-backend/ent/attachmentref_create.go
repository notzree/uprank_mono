// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/notzree/uprank-backend/main-backend/ent/attachmentref"
	"github.com/notzree/uprank-backend/main-backend/ent/freelancer"
)

// AttachmentRefCreate is the builder for creating a AttachmentRef entity.
type AttachmentRefCreate struct {
	config
	mutation *AttachmentRefMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (arc *AttachmentRefCreate) SetName(s string) *AttachmentRefCreate {
	arc.mutation.SetName(s)
	return arc
}

// SetURL sets the "url" field.
func (arc *AttachmentRefCreate) SetURL(s string) *AttachmentRefCreate {
	arc.mutation.SetURL(s)
	return arc
}

// SetFreelancerID sets the "freelancer" edge to the Freelancer entity by ID.
func (arc *AttachmentRefCreate) SetFreelancerID(id uuid.UUID) *AttachmentRefCreate {
	arc.mutation.SetFreelancerID(id)
	return arc
}

// SetFreelancer sets the "freelancer" edge to the Freelancer entity.
func (arc *AttachmentRefCreate) SetFreelancer(f *Freelancer) *AttachmentRefCreate {
	return arc.SetFreelancerID(f.ID)
}

// Mutation returns the AttachmentRefMutation object of the builder.
func (arc *AttachmentRefCreate) Mutation() *AttachmentRefMutation {
	return arc.mutation
}

// Save creates the AttachmentRef in the database.
func (arc *AttachmentRefCreate) Save(ctx context.Context) (*AttachmentRef, error) {
	return withHooks(ctx, arc.sqlSave, arc.mutation, arc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (arc *AttachmentRefCreate) SaveX(ctx context.Context) *AttachmentRef {
	v, err := arc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arc *AttachmentRefCreate) Exec(ctx context.Context) error {
	_, err := arc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arc *AttachmentRefCreate) ExecX(ctx context.Context) {
	if err := arc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (arc *AttachmentRefCreate) check() error {
	if _, ok := arc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "AttachmentRef.name"`)}
	}
	if _, ok := arc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "AttachmentRef.url"`)}
	}
	if _, ok := arc.mutation.FreelancerID(); !ok {
		return &ValidationError{Name: "freelancer", err: errors.New(`ent: missing required edge "AttachmentRef.freelancer"`)}
	}
	return nil
}

func (arc *AttachmentRefCreate) sqlSave(ctx context.Context) (*AttachmentRef, error) {
	if err := arc.check(); err != nil {
		return nil, err
	}
	_node, _spec := arc.createSpec()
	if err := sqlgraph.CreateNode(ctx, arc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	arc.mutation.id = &_node.ID
	arc.mutation.done = true
	return _node, nil
}

func (arc *AttachmentRefCreate) createSpec() (*AttachmentRef, *sqlgraph.CreateSpec) {
	var (
		_node = &AttachmentRef{config: arc.config}
		_spec = sqlgraph.NewCreateSpec(attachmentref.Table, sqlgraph.NewFieldSpec(attachmentref.FieldID, field.TypeInt))
	)
	if value, ok := arc.mutation.Name(); ok {
		_spec.SetField(attachmentref.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := arc.mutation.URL(); ok {
		_spec.SetField(attachmentref.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if nodes := arc.mutation.FreelancerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attachmentref.FreelancerTable,
			Columns: []string{attachmentref.FreelancerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(freelancer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.freelancer_attachments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AttachmentRefCreateBulk is the builder for creating many AttachmentRef entities in bulk.
type AttachmentRefCreateBulk struct {
	config
	err      error
	builders []*AttachmentRefCreate
}

// Save creates the AttachmentRef entities in the database.
func (arcb *AttachmentRefCreateBulk) Save(ctx context.Context) ([]*AttachmentRef, error) {
	if arcb.err != nil {
		return nil, arcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(arcb.builders))
	nodes := make([]*AttachmentRef, len(arcb.builders))
	mutators := make([]Mutator, len(arcb.builders))
	for i := range arcb.builders {
		func(i int, root context.Context) {
			builder := arcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AttachmentRefMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, arcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, arcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, arcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (arcb *AttachmentRefCreateBulk) SaveX(ctx context.Context) []*AttachmentRef {
	v, err := arcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arcb *AttachmentRefCreateBulk) Exec(ctx context.Context) error {
	_, err := arcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arcb *AttachmentRefCreateBulk) ExecX(ctx context.Context) {
	if err := arcb.Exec(ctx); err != nil {
		panic(err)
	}
}
