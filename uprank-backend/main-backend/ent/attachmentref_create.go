// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/notzree/uprank-backend/main-backend/ent/attachmentref"
	"github.com/notzree/uprank-backend/main-backend/ent/upworkfreelancer"
)

// AttachmentRefCreate is the builder for creating a AttachmentRef entity.
type AttachmentRefCreate struct {
	config
	mutation *AttachmentRefMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (arc *AttachmentRefCreate) SetName(s string) *AttachmentRefCreate {
	arc.mutation.SetName(s)
	return arc
}

// SetLink sets the "link" field.
func (arc *AttachmentRefCreate) SetLink(s string) *AttachmentRefCreate {
	arc.mutation.SetLink(s)
	return arc
}

// SetFreelancerID sets the "freelancer" edge to the UpworkFreelancer entity by ID.
func (arc *AttachmentRefCreate) SetFreelancerID(id string) *AttachmentRefCreate {
	arc.mutation.SetFreelancerID(id)
	return arc
}

// SetFreelancer sets the "freelancer" edge to the UpworkFreelancer entity.
func (arc *AttachmentRefCreate) SetFreelancer(u *UpworkFreelancer) *AttachmentRefCreate {
	return arc.SetFreelancerID(u.ID)
}

// Mutation returns the AttachmentRefMutation object of the builder.
func (arc *AttachmentRefCreate) Mutation() *AttachmentRefMutation {
	return arc.mutation
}

// Save creates the AttachmentRef in the database.
func (arc *AttachmentRefCreate) Save(ctx context.Context) (*AttachmentRef, error) {
	return withHooks(ctx, arc.sqlSave, arc.mutation, arc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (arc *AttachmentRefCreate) SaveX(ctx context.Context) *AttachmentRef {
	v, err := arc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arc *AttachmentRefCreate) Exec(ctx context.Context) error {
	_, err := arc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arc *AttachmentRefCreate) ExecX(ctx context.Context) {
	if err := arc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (arc *AttachmentRefCreate) check() error {
	if _, ok := arc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "AttachmentRef.name"`)}
	}
	if _, ok := arc.mutation.Link(); !ok {
		return &ValidationError{Name: "link", err: errors.New(`ent: missing required field "AttachmentRef.link"`)}
	}
	if _, ok := arc.mutation.FreelancerID(); !ok {
		return &ValidationError{Name: "freelancer", err: errors.New(`ent: missing required edge "AttachmentRef.freelancer"`)}
	}
	return nil
}

func (arc *AttachmentRefCreate) sqlSave(ctx context.Context) (*AttachmentRef, error) {
	if err := arc.check(); err != nil {
		return nil, err
	}
	_node, _spec := arc.createSpec()
	if err := sqlgraph.CreateNode(ctx, arc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	arc.mutation.id = &_node.ID
	arc.mutation.done = true
	return _node, nil
}

func (arc *AttachmentRefCreate) createSpec() (*AttachmentRef, *sqlgraph.CreateSpec) {
	var (
		_node = &AttachmentRef{config: arc.config}
		_spec = sqlgraph.NewCreateSpec(attachmentref.Table, sqlgraph.NewFieldSpec(attachmentref.FieldID, field.TypeInt))
	)
	_spec.OnConflict = arc.conflict
	if value, ok := arc.mutation.Name(); ok {
		_spec.SetField(attachmentref.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := arc.mutation.Link(); ok {
		_spec.SetField(attachmentref.FieldLink, field.TypeString, value)
		_node.Link = value
	}
	if nodes := arc.mutation.FreelancerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   attachmentref.FreelancerTable,
			Columns: []string{attachmentref.FreelancerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upworkfreelancer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.upwork_freelancer_attachments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AttachmentRef.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AttachmentRefUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (arc *AttachmentRefCreate) OnConflict(opts ...sql.ConflictOption) *AttachmentRefUpsertOne {
	arc.conflict = opts
	return &AttachmentRefUpsertOne{
		create: arc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AttachmentRef.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (arc *AttachmentRefCreate) OnConflictColumns(columns ...string) *AttachmentRefUpsertOne {
	arc.conflict = append(arc.conflict, sql.ConflictColumns(columns...))
	return &AttachmentRefUpsertOne{
		create: arc,
	}
}

type (
	// AttachmentRefUpsertOne is the builder for "upsert"-ing
	//  one AttachmentRef node.
	AttachmentRefUpsertOne struct {
		create *AttachmentRefCreate
	}

	// AttachmentRefUpsert is the "OnConflict" setter.
	AttachmentRefUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *AttachmentRefUpsert) SetName(v string) *AttachmentRefUpsert {
	u.Set(attachmentref.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AttachmentRefUpsert) UpdateName() *AttachmentRefUpsert {
	u.SetExcluded(attachmentref.FieldName)
	return u
}

// SetLink sets the "link" field.
func (u *AttachmentRefUpsert) SetLink(v string) *AttachmentRefUpsert {
	u.Set(attachmentref.FieldLink, v)
	return u
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *AttachmentRefUpsert) UpdateLink() *AttachmentRefUpsert {
	u.SetExcluded(attachmentref.FieldLink)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.AttachmentRef.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AttachmentRefUpsertOne) UpdateNewValues() *AttachmentRefUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AttachmentRef.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AttachmentRefUpsertOne) Ignore() *AttachmentRefUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AttachmentRefUpsertOne) DoNothing() *AttachmentRefUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AttachmentRefCreate.OnConflict
// documentation for more info.
func (u *AttachmentRefUpsertOne) Update(set func(*AttachmentRefUpsert)) *AttachmentRefUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AttachmentRefUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *AttachmentRefUpsertOne) SetName(v string) *AttachmentRefUpsertOne {
	return u.Update(func(s *AttachmentRefUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AttachmentRefUpsertOne) UpdateName() *AttachmentRefUpsertOne {
	return u.Update(func(s *AttachmentRefUpsert) {
		s.UpdateName()
	})
}

// SetLink sets the "link" field.
func (u *AttachmentRefUpsertOne) SetLink(v string) *AttachmentRefUpsertOne {
	return u.Update(func(s *AttachmentRefUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *AttachmentRefUpsertOne) UpdateLink() *AttachmentRefUpsertOne {
	return u.Update(func(s *AttachmentRefUpsert) {
		s.UpdateLink()
	})
}

// Exec executes the query.
func (u *AttachmentRefUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AttachmentRefCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AttachmentRefUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AttachmentRefUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AttachmentRefUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AttachmentRefCreateBulk is the builder for creating many AttachmentRef entities in bulk.
type AttachmentRefCreateBulk struct {
	config
	err      error
	builders []*AttachmentRefCreate
	conflict []sql.ConflictOption
}

// Save creates the AttachmentRef entities in the database.
func (arcb *AttachmentRefCreateBulk) Save(ctx context.Context) ([]*AttachmentRef, error) {
	if arcb.err != nil {
		return nil, arcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(arcb.builders))
	nodes := make([]*AttachmentRef, len(arcb.builders))
	mutators := make([]Mutator, len(arcb.builders))
	for i := range arcb.builders {
		func(i int, root context.Context) {
			builder := arcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AttachmentRefMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, arcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = arcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, arcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, arcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (arcb *AttachmentRefCreateBulk) SaveX(ctx context.Context) []*AttachmentRef {
	v, err := arcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arcb *AttachmentRefCreateBulk) Exec(ctx context.Context) error {
	_, err := arcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arcb *AttachmentRefCreateBulk) ExecX(ctx context.Context) {
	if err := arcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AttachmentRef.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AttachmentRefUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (arcb *AttachmentRefCreateBulk) OnConflict(opts ...sql.ConflictOption) *AttachmentRefUpsertBulk {
	arcb.conflict = opts
	return &AttachmentRefUpsertBulk{
		create: arcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AttachmentRef.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (arcb *AttachmentRefCreateBulk) OnConflictColumns(columns ...string) *AttachmentRefUpsertBulk {
	arcb.conflict = append(arcb.conflict, sql.ConflictColumns(columns...))
	return &AttachmentRefUpsertBulk{
		create: arcb,
	}
}

// AttachmentRefUpsertBulk is the builder for "upsert"-ing
// a bulk of AttachmentRef nodes.
type AttachmentRefUpsertBulk struct {
	create *AttachmentRefCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AttachmentRef.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AttachmentRefUpsertBulk) UpdateNewValues() *AttachmentRefUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AttachmentRef.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AttachmentRefUpsertBulk) Ignore() *AttachmentRefUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AttachmentRefUpsertBulk) DoNothing() *AttachmentRefUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AttachmentRefCreateBulk.OnConflict
// documentation for more info.
func (u *AttachmentRefUpsertBulk) Update(set func(*AttachmentRefUpsert)) *AttachmentRefUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AttachmentRefUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *AttachmentRefUpsertBulk) SetName(v string) *AttachmentRefUpsertBulk {
	return u.Update(func(s *AttachmentRefUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AttachmentRefUpsertBulk) UpdateName() *AttachmentRefUpsertBulk {
	return u.Update(func(s *AttachmentRefUpsert) {
		s.UpdateName()
	})
}

// SetLink sets the "link" field.
func (u *AttachmentRefUpsertBulk) SetLink(v string) *AttachmentRefUpsertBulk {
	return u.Update(func(s *AttachmentRefUpsert) {
		s.SetLink(v)
	})
}

// UpdateLink sets the "link" field to the value that was provided on create.
func (u *AttachmentRefUpsertBulk) UpdateLink() *AttachmentRefUpsertBulk {
	return u.Update(func(s *AttachmentRefUpsert) {
		s.UpdateLink()
	})
}

// Exec executes the query.
func (u *AttachmentRefUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AttachmentRefCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AttachmentRefCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AttachmentRefUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
