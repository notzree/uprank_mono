// Code generated by ent, DO NOT EDIT.

package freelancer

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/notzree/uprank-backend/main-backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLTE(FieldID, id))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldURL, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldName, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldDescription, v))
}

// City applies equality check predicate on the "city" field. It's identical to CityEQ.
func City(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldCity, v))
}

// Country applies equality check predicate on the "country" field. It's identical to CountryEQ.
func Country(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldCountry, v))
}

// Timezone applies equality check predicate on the "timezone" field. It's identical to TimezoneEQ.
func Timezone(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldTimezone, v))
}

// Cv applies equality check predicate on the "cv" field. It's identical to CvEQ.
func Cv(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldCv, v))
}

// AiReccomended applies equality check predicate on the "ai_reccomended" field. It's identical to AiReccomendedEQ.
func AiReccomended(v bool) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldAiReccomended, v))
}

// FixedChargeAmount applies equality check predicate on the "fixed_charge_amount" field. It's identical to FixedChargeAmountEQ.
func FixedChargeAmount(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldFixedChargeAmount, v))
}

// FixedChargeCurrency applies equality check predicate on the "fixed_charge_currency" field. It's identical to FixedChargeCurrencyEQ.
func FixedChargeCurrency(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldFixedChargeCurrency, v))
}

// HourlyChargeAmount applies equality check predicate on the "hourly_charge_amount" field. It's identical to HourlyChargeAmountEQ.
func HourlyChargeAmount(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldHourlyChargeAmount, v))
}

// HourlyChargeCurrency applies equality check predicate on the "hourly_charge_currency" field. It's identical to HourlyChargeCurrencyEQ.
func HourlyChargeCurrency(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldHourlyChargeCurrency, v))
}

// Invited applies equality check predicate on the "invited" field. It's identical to InvitedEQ.
func Invited(v bool) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldInvited, v))
}

// PhotoURL applies equality check predicate on the "photo_url" field. It's identical to PhotoURLEQ.
func PhotoURL(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldPhotoURL, v))
}

// RecentHours applies equality check predicate on the "recent_hours" field. It's identical to RecentHoursEQ.
func RecentHours(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldRecentHours, v))
}

// TotalHours applies equality check predicate on the "total_hours" field. It's identical to TotalHoursEQ.
func TotalHours(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldTotalHours, v))
}

// TotalPortfolioItems applies equality check predicate on the "total_portfolio_items" field. It's identical to TotalPortfolioItemsEQ.
func TotalPortfolioItems(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldTotalPortfolioItems, v))
}

// TotalPortfolioV2Items applies equality check predicate on the "total_portfolio_v2_items" field. It's identical to TotalPortfolioV2ItemsEQ.
func TotalPortfolioV2Items(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldTotalPortfolioV2Items, v))
}

// UpworkTotalFeedback applies equality check predicate on the "upwork_total_feedback" field. It's identical to UpworkTotalFeedbackEQ.
func UpworkTotalFeedback(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldUpworkTotalFeedback, v))
}

// UpworkRecentFeedback applies equality check predicate on the "upwork_recent_feedback" field. It's identical to UpworkRecentFeedbackEQ.
func UpworkRecentFeedback(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldUpworkRecentFeedback, v))
}

// UpworkTopRatedStatus applies equality check predicate on the "upwork_top_rated_status" field. It's identical to UpworkTopRatedStatusEQ.
func UpworkTopRatedStatus(v bool) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldUpworkTopRatedStatus, v))
}

// UpworkTopRatedPlusStatus applies equality check predicate on the "upwork_top_rated_plus_status" field. It's identical to UpworkTopRatedPlusStatusEQ.
func UpworkTopRatedPlusStatus(v bool) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldUpworkTopRatedPlusStatus, v))
}

// UpworkSponsored applies equality check predicate on the "upwork_sponsored" field. It's identical to UpworkSponsoredEQ.
func UpworkSponsored(v bool) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldUpworkSponsored, v))
}

// UpworkJobSuccessScore applies equality check predicate on the "upwork_job_success_score" field. It's identical to UpworkJobSuccessScoreEQ.
func UpworkJobSuccessScore(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldUpworkJobSuccessScore, v))
}

// UpworkReccomended applies equality check predicate on the "upwork_reccomended" field. It's identical to UpworkReccomendedEQ.
func UpworkReccomended(v bool) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldUpworkReccomended, v))
}

// AverageRecentEarnings applies equality check predicate on the "average_recent_earnings" field. It's identical to AverageRecentEarningsEQ.
func AverageRecentEarnings(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldAverageRecentEarnings, v))
}

// CombinedAverageRecentEarnings applies equality check predicate on the "combined_average_recent_earnings" field. It's identical to CombinedAverageRecentEarningsEQ.
func CombinedAverageRecentEarnings(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldCombinedAverageRecentEarnings, v))
}

// CombinedRecentEarnings applies equality check predicate on the "combined_recent_earnings" field. It's identical to CombinedRecentEarningsEQ.
func CombinedRecentEarnings(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldCombinedRecentEarnings, v))
}

// CombinedTotalEarnings applies equality check predicate on the "combined_total_earnings" field. It's identical to CombinedTotalEarningsEQ.
func CombinedTotalEarnings(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldCombinedTotalEarnings, v))
}

// CombinedTotalRevenue applies equality check predicate on the "combined_total_revenue" field. It's identical to CombinedTotalRevenueEQ.
func CombinedTotalRevenue(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldCombinedTotalRevenue, v))
}

// RecentEarnings applies equality check predicate on the "recent_earnings" field. It's identical to RecentEarningsEQ.
func RecentEarnings(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldRecentEarnings, v))
}

// TotalRevenue applies equality check predicate on the "total_revenue" field. It's identical to TotalRevenueEQ.
func TotalRevenue(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldTotalRevenue, v))
}

// UprankScore applies equality check predicate on the "uprank_score" field. It's identical to UprankScoreEQ.
func UprankScore(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldUprankScore, v))
}

// UprankUpdatedAt applies equality check predicate on the "uprank_updated_at" field. It's identical to UprankUpdatedAtEQ.
func UprankUpdatedAt(v time.Time) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldUprankUpdatedAt, v))
}

// UprankReccomended applies equality check predicate on the "uprank_reccomended" field. It's identical to UprankReccomendedEQ.
func UprankReccomended(v bool) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldUprankReccomended, v))
}

// UprankReccomendedReasons applies equality check predicate on the "uprank_reccomended_reasons" field. It's identical to UprankReccomendedReasonsEQ.
func UprankReccomendedReasons(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldUprankReccomendedReasons, v))
}

// UprankNotEnoughData applies equality check predicate on the "uprank_not_enough_data" field. It's identical to UprankNotEnoughDataEQ.
func UprankNotEnoughData(v bool) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldUprankNotEnoughData, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldContainsFold(FieldURL, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldContainsFold(FieldName, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldContainsFold(FieldTitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldContainsFold(FieldDescription, v))
}

// CityEQ applies the EQ predicate on the "city" field.
func CityEQ(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldCity, v))
}

// CityNEQ applies the NEQ predicate on the "city" field.
func CityNEQ(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldCity, v))
}

// CityIn applies the In predicate on the "city" field.
func CityIn(vs ...string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIn(FieldCity, vs...))
}

// CityNotIn applies the NotIn predicate on the "city" field.
func CityNotIn(vs ...string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotIn(FieldCity, vs...))
}

// CityGT applies the GT predicate on the "city" field.
func CityGT(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGT(FieldCity, v))
}

// CityGTE applies the GTE predicate on the "city" field.
func CityGTE(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGTE(FieldCity, v))
}

// CityLT applies the LT predicate on the "city" field.
func CityLT(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLT(FieldCity, v))
}

// CityLTE applies the LTE predicate on the "city" field.
func CityLTE(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLTE(FieldCity, v))
}

// CityContains applies the Contains predicate on the "city" field.
func CityContains(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldContains(FieldCity, v))
}

// CityHasPrefix applies the HasPrefix predicate on the "city" field.
func CityHasPrefix(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldHasPrefix(FieldCity, v))
}

// CityHasSuffix applies the HasSuffix predicate on the "city" field.
func CityHasSuffix(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldHasSuffix(FieldCity, v))
}

// CityEqualFold applies the EqualFold predicate on the "city" field.
func CityEqualFold(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEqualFold(FieldCity, v))
}

// CityContainsFold applies the ContainsFold predicate on the "city" field.
func CityContainsFold(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldContainsFold(FieldCity, v))
}

// CountryEQ applies the EQ predicate on the "country" field.
func CountryEQ(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldCountry, v))
}

// CountryNEQ applies the NEQ predicate on the "country" field.
func CountryNEQ(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldCountry, v))
}

// CountryIn applies the In predicate on the "country" field.
func CountryIn(vs ...string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIn(FieldCountry, vs...))
}

// CountryNotIn applies the NotIn predicate on the "country" field.
func CountryNotIn(vs ...string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotIn(FieldCountry, vs...))
}

// CountryGT applies the GT predicate on the "country" field.
func CountryGT(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGT(FieldCountry, v))
}

// CountryGTE applies the GTE predicate on the "country" field.
func CountryGTE(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGTE(FieldCountry, v))
}

// CountryLT applies the LT predicate on the "country" field.
func CountryLT(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLT(FieldCountry, v))
}

// CountryLTE applies the LTE predicate on the "country" field.
func CountryLTE(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLTE(FieldCountry, v))
}

// CountryContains applies the Contains predicate on the "country" field.
func CountryContains(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldContains(FieldCountry, v))
}

// CountryHasPrefix applies the HasPrefix predicate on the "country" field.
func CountryHasPrefix(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldHasPrefix(FieldCountry, v))
}

// CountryHasSuffix applies the HasSuffix predicate on the "country" field.
func CountryHasSuffix(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldHasSuffix(FieldCountry, v))
}

// CountryEqualFold applies the EqualFold predicate on the "country" field.
func CountryEqualFold(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEqualFold(FieldCountry, v))
}

// CountryContainsFold applies the ContainsFold predicate on the "country" field.
func CountryContainsFold(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldContainsFold(FieldCountry, v))
}

// TimezoneEQ applies the EQ predicate on the "timezone" field.
func TimezoneEQ(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldTimezone, v))
}

// TimezoneNEQ applies the NEQ predicate on the "timezone" field.
func TimezoneNEQ(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldTimezone, v))
}

// TimezoneIn applies the In predicate on the "timezone" field.
func TimezoneIn(vs ...string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIn(FieldTimezone, vs...))
}

// TimezoneNotIn applies the NotIn predicate on the "timezone" field.
func TimezoneNotIn(vs ...string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotIn(FieldTimezone, vs...))
}

// TimezoneGT applies the GT predicate on the "timezone" field.
func TimezoneGT(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGT(FieldTimezone, v))
}

// TimezoneGTE applies the GTE predicate on the "timezone" field.
func TimezoneGTE(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGTE(FieldTimezone, v))
}

// TimezoneLT applies the LT predicate on the "timezone" field.
func TimezoneLT(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLT(FieldTimezone, v))
}

// TimezoneLTE applies the LTE predicate on the "timezone" field.
func TimezoneLTE(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLTE(FieldTimezone, v))
}

// TimezoneContains applies the Contains predicate on the "timezone" field.
func TimezoneContains(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldContains(FieldTimezone, v))
}

// TimezoneHasPrefix applies the HasPrefix predicate on the "timezone" field.
func TimezoneHasPrefix(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldHasPrefix(FieldTimezone, v))
}

// TimezoneHasSuffix applies the HasSuffix predicate on the "timezone" field.
func TimezoneHasSuffix(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldHasSuffix(FieldTimezone, v))
}

// TimezoneEqualFold applies the EqualFold predicate on the "timezone" field.
func TimezoneEqualFold(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEqualFold(FieldTimezone, v))
}

// TimezoneContainsFold applies the ContainsFold predicate on the "timezone" field.
func TimezoneContainsFold(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldContainsFold(FieldTimezone, v))
}

// CvEQ applies the EQ predicate on the "cv" field.
func CvEQ(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldCv, v))
}

// CvNEQ applies the NEQ predicate on the "cv" field.
func CvNEQ(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldCv, v))
}

// CvIn applies the In predicate on the "cv" field.
func CvIn(vs ...string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIn(FieldCv, vs...))
}

// CvNotIn applies the NotIn predicate on the "cv" field.
func CvNotIn(vs ...string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotIn(FieldCv, vs...))
}

// CvGT applies the GT predicate on the "cv" field.
func CvGT(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGT(FieldCv, v))
}

// CvGTE applies the GTE predicate on the "cv" field.
func CvGTE(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGTE(FieldCv, v))
}

// CvLT applies the LT predicate on the "cv" field.
func CvLT(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLT(FieldCv, v))
}

// CvLTE applies the LTE predicate on the "cv" field.
func CvLTE(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLTE(FieldCv, v))
}

// CvContains applies the Contains predicate on the "cv" field.
func CvContains(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldContains(FieldCv, v))
}

// CvHasPrefix applies the HasPrefix predicate on the "cv" field.
func CvHasPrefix(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldHasPrefix(FieldCv, v))
}

// CvHasSuffix applies the HasSuffix predicate on the "cv" field.
func CvHasSuffix(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldHasSuffix(FieldCv, v))
}

// CvEqualFold applies the EqualFold predicate on the "cv" field.
func CvEqualFold(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEqualFold(FieldCv, v))
}

// CvContainsFold applies the ContainsFold predicate on the "cv" field.
func CvContainsFold(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldContainsFold(FieldCv, v))
}

// AiReccomendedEQ applies the EQ predicate on the "ai_reccomended" field.
func AiReccomendedEQ(v bool) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldAiReccomended, v))
}

// AiReccomendedNEQ applies the NEQ predicate on the "ai_reccomended" field.
func AiReccomendedNEQ(v bool) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldAiReccomended, v))
}

// FixedChargeAmountEQ applies the EQ predicate on the "fixed_charge_amount" field.
func FixedChargeAmountEQ(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldFixedChargeAmount, v))
}

// FixedChargeAmountNEQ applies the NEQ predicate on the "fixed_charge_amount" field.
func FixedChargeAmountNEQ(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldFixedChargeAmount, v))
}

// FixedChargeAmountIn applies the In predicate on the "fixed_charge_amount" field.
func FixedChargeAmountIn(vs ...int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIn(FieldFixedChargeAmount, vs...))
}

// FixedChargeAmountNotIn applies the NotIn predicate on the "fixed_charge_amount" field.
func FixedChargeAmountNotIn(vs ...int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotIn(FieldFixedChargeAmount, vs...))
}

// FixedChargeAmountGT applies the GT predicate on the "fixed_charge_amount" field.
func FixedChargeAmountGT(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGT(FieldFixedChargeAmount, v))
}

// FixedChargeAmountGTE applies the GTE predicate on the "fixed_charge_amount" field.
func FixedChargeAmountGTE(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGTE(FieldFixedChargeAmount, v))
}

// FixedChargeAmountLT applies the LT predicate on the "fixed_charge_amount" field.
func FixedChargeAmountLT(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLT(FieldFixedChargeAmount, v))
}

// FixedChargeAmountLTE applies the LTE predicate on the "fixed_charge_amount" field.
func FixedChargeAmountLTE(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLTE(FieldFixedChargeAmount, v))
}

// FixedChargeAmountIsNil applies the IsNil predicate on the "fixed_charge_amount" field.
func FixedChargeAmountIsNil() predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIsNull(FieldFixedChargeAmount))
}

// FixedChargeAmountNotNil applies the NotNil predicate on the "fixed_charge_amount" field.
func FixedChargeAmountNotNil() predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotNull(FieldFixedChargeAmount))
}

// FixedChargeCurrencyEQ applies the EQ predicate on the "fixed_charge_currency" field.
func FixedChargeCurrencyEQ(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldFixedChargeCurrency, v))
}

// FixedChargeCurrencyNEQ applies the NEQ predicate on the "fixed_charge_currency" field.
func FixedChargeCurrencyNEQ(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldFixedChargeCurrency, v))
}

// FixedChargeCurrencyIn applies the In predicate on the "fixed_charge_currency" field.
func FixedChargeCurrencyIn(vs ...string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIn(FieldFixedChargeCurrency, vs...))
}

// FixedChargeCurrencyNotIn applies the NotIn predicate on the "fixed_charge_currency" field.
func FixedChargeCurrencyNotIn(vs ...string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotIn(FieldFixedChargeCurrency, vs...))
}

// FixedChargeCurrencyGT applies the GT predicate on the "fixed_charge_currency" field.
func FixedChargeCurrencyGT(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGT(FieldFixedChargeCurrency, v))
}

// FixedChargeCurrencyGTE applies the GTE predicate on the "fixed_charge_currency" field.
func FixedChargeCurrencyGTE(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGTE(FieldFixedChargeCurrency, v))
}

// FixedChargeCurrencyLT applies the LT predicate on the "fixed_charge_currency" field.
func FixedChargeCurrencyLT(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLT(FieldFixedChargeCurrency, v))
}

// FixedChargeCurrencyLTE applies the LTE predicate on the "fixed_charge_currency" field.
func FixedChargeCurrencyLTE(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLTE(FieldFixedChargeCurrency, v))
}

// FixedChargeCurrencyContains applies the Contains predicate on the "fixed_charge_currency" field.
func FixedChargeCurrencyContains(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldContains(FieldFixedChargeCurrency, v))
}

// FixedChargeCurrencyHasPrefix applies the HasPrefix predicate on the "fixed_charge_currency" field.
func FixedChargeCurrencyHasPrefix(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldHasPrefix(FieldFixedChargeCurrency, v))
}

// FixedChargeCurrencyHasSuffix applies the HasSuffix predicate on the "fixed_charge_currency" field.
func FixedChargeCurrencyHasSuffix(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldHasSuffix(FieldFixedChargeCurrency, v))
}

// FixedChargeCurrencyEqualFold applies the EqualFold predicate on the "fixed_charge_currency" field.
func FixedChargeCurrencyEqualFold(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEqualFold(FieldFixedChargeCurrency, v))
}

// FixedChargeCurrencyContainsFold applies the ContainsFold predicate on the "fixed_charge_currency" field.
func FixedChargeCurrencyContainsFold(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldContainsFold(FieldFixedChargeCurrency, v))
}

// HourlyChargeAmountEQ applies the EQ predicate on the "hourly_charge_amount" field.
func HourlyChargeAmountEQ(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldHourlyChargeAmount, v))
}

// HourlyChargeAmountNEQ applies the NEQ predicate on the "hourly_charge_amount" field.
func HourlyChargeAmountNEQ(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldHourlyChargeAmount, v))
}

// HourlyChargeAmountIn applies the In predicate on the "hourly_charge_amount" field.
func HourlyChargeAmountIn(vs ...int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIn(FieldHourlyChargeAmount, vs...))
}

// HourlyChargeAmountNotIn applies the NotIn predicate on the "hourly_charge_amount" field.
func HourlyChargeAmountNotIn(vs ...int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotIn(FieldHourlyChargeAmount, vs...))
}

// HourlyChargeAmountGT applies the GT predicate on the "hourly_charge_amount" field.
func HourlyChargeAmountGT(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGT(FieldHourlyChargeAmount, v))
}

// HourlyChargeAmountGTE applies the GTE predicate on the "hourly_charge_amount" field.
func HourlyChargeAmountGTE(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGTE(FieldHourlyChargeAmount, v))
}

// HourlyChargeAmountLT applies the LT predicate on the "hourly_charge_amount" field.
func HourlyChargeAmountLT(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLT(FieldHourlyChargeAmount, v))
}

// HourlyChargeAmountLTE applies the LTE predicate on the "hourly_charge_amount" field.
func HourlyChargeAmountLTE(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLTE(FieldHourlyChargeAmount, v))
}

// HourlyChargeAmountIsNil applies the IsNil predicate on the "hourly_charge_amount" field.
func HourlyChargeAmountIsNil() predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIsNull(FieldHourlyChargeAmount))
}

// HourlyChargeAmountNotNil applies the NotNil predicate on the "hourly_charge_amount" field.
func HourlyChargeAmountNotNil() predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotNull(FieldHourlyChargeAmount))
}

// HourlyChargeCurrencyEQ applies the EQ predicate on the "hourly_charge_currency" field.
func HourlyChargeCurrencyEQ(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldHourlyChargeCurrency, v))
}

// HourlyChargeCurrencyNEQ applies the NEQ predicate on the "hourly_charge_currency" field.
func HourlyChargeCurrencyNEQ(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldHourlyChargeCurrency, v))
}

// HourlyChargeCurrencyIn applies the In predicate on the "hourly_charge_currency" field.
func HourlyChargeCurrencyIn(vs ...string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIn(FieldHourlyChargeCurrency, vs...))
}

// HourlyChargeCurrencyNotIn applies the NotIn predicate on the "hourly_charge_currency" field.
func HourlyChargeCurrencyNotIn(vs ...string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotIn(FieldHourlyChargeCurrency, vs...))
}

// HourlyChargeCurrencyGT applies the GT predicate on the "hourly_charge_currency" field.
func HourlyChargeCurrencyGT(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGT(FieldHourlyChargeCurrency, v))
}

// HourlyChargeCurrencyGTE applies the GTE predicate on the "hourly_charge_currency" field.
func HourlyChargeCurrencyGTE(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGTE(FieldHourlyChargeCurrency, v))
}

// HourlyChargeCurrencyLT applies the LT predicate on the "hourly_charge_currency" field.
func HourlyChargeCurrencyLT(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLT(FieldHourlyChargeCurrency, v))
}

// HourlyChargeCurrencyLTE applies the LTE predicate on the "hourly_charge_currency" field.
func HourlyChargeCurrencyLTE(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLTE(FieldHourlyChargeCurrency, v))
}

// HourlyChargeCurrencyContains applies the Contains predicate on the "hourly_charge_currency" field.
func HourlyChargeCurrencyContains(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldContains(FieldHourlyChargeCurrency, v))
}

// HourlyChargeCurrencyHasPrefix applies the HasPrefix predicate on the "hourly_charge_currency" field.
func HourlyChargeCurrencyHasPrefix(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldHasPrefix(FieldHourlyChargeCurrency, v))
}

// HourlyChargeCurrencyHasSuffix applies the HasSuffix predicate on the "hourly_charge_currency" field.
func HourlyChargeCurrencyHasSuffix(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldHasSuffix(FieldHourlyChargeCurrency, v))
}

// HourlyChargeCurrencyEqualFold applies the EqualFold predicate on the "hourly_charge_currency" field.
func HourlyChargeCurrencyEqualFold(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEqualFold(FieldHourlyChargeCurrency, v))
}

// HourlyChargeCurrencyContainsFold applies the ContainsFold predicate on the "hourly_charge_currency" field.
func HourlyChargeCurrencyContainsFold(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldContainsFold(FieldHourlyChargeCurrency, v))
}

// InvitedEQ applies the EQ predicate on the "invited" field.
func InvitedEQ(v bool) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldInvited, v))
}

// InvitedNEQ applies the NEQ predicate on the "invited" field.
func InvitedNEQ(v bool) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldInvited, v))
}

// PhotoURLEQ applies the EQ predicate on the "photo_url" field.
func PhotoURLEQ(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldPhotoURL, v))
}

// PhotoURLNEQ applies the NEQ predicate on the "photo_url" field.
func PhotoURLNEQ(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldPhotoURL, v))
}

// PhotoURLIn applies the In predicate on the "photo_url" field.
func PhotoURLIn(vs ...string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIn(FieldPhotoURL, vs...))
}

// PhotoURLNotIn applies the NotIn predicate on the "photo_url" field.
func PhotoURLNotIn(vs ...string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotIn(FieldPhotoURL, vs...))
}

// PhotoURLGT applies the GT predicate on the "photo_url" field.
func PhotoURLGT(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGT(FieldPhotoURL, v))
}

// PhotoURLGTE applies the GTE predicate on the "photo_url" field.
func PhotoURLGTE(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGTE(FieldPhotoURL, v))
}

// PhotoURLLT applies the LT predicate on the "photo_url" field.
func PhotoURLLT(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLT(FieldPhotoURL, v))
}

// PhotoURLLTE applies the LTE predicate on the "photo_url" field.
func PhotoURLLTE(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLTE(FieldPhotoURL, v))
}

// PhotoURLContains applies the Contains predicate on the "photo_url" field.
func PhotoURLContains(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldContains(FieldPhotoURL, v))
}

// PhotoURLHasPrefix applies the HasPrefix predicate on the "photo_url" field.
func PhotoURLHasPrefix(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldHasPrefix(FieldPhotoURL, v))
}

// PhotoURLHasSuffix applies the HasSuffix predicate on the "photo_url" field.
func PhotoURLHasSuffix(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldHasSuffix(FieldPhotoURL, v))
}

// PhotoURLEqualFold applies the EqualFold predicate on the "photo_url" field.
func PhotoURLEqualFold(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEqualFold(FieldPhotoURL, v))
}

// PhotoURLContainsFold applies the ContainsFold predicate on the "photo_url" field.
func PhotoURLContainsFold(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldContainsFold(FieldPhotoURL, v))
}

// RecentHoursEQ applies the EQ predicate on the "recent_hours" field.
func RecentHoursEQ(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldRecentHours, v))
}

// RecentHoursNEQ applies the NEQ predicate on the "recent_hours" field.
func RecentHoursNEQ(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldRecentHours, v))
}

// RecentHoursIn applies the In predicate on the "recent_hours" field.
func RecentHoursIn(vs ...int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIn(FieldRecentHours, vs...))
}

// RecentHoursNotIn applies the NotIn predicate on the "recent_hours" field.
func RecentHoursNotIn(vs ...int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotIn(FieldRecentHours, vs...))
}

// RecentHoursGT applies the GT predicate on the "recent_hours" field.
func RecentHoursGT(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGT(FieldRecentHours, v))
}

// RecentHoursGTE applies the GTE predicate on the "recent_hours" field.
func RecentHoursGTE(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGTE(FieldRecentHours, v))
}

// RecentHoursLT applies the LT predicate on the "recent_hours" field.
func RecentHoursLT(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLT(FieldRecentHours, v))
}

// RecentHoursLTE applies the LTE predicate on the "recent_hours" field.
func RecentHoursLTE(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLTE(FieldRecentHours, v))
}

// TotalHoursEQ applies the EQ predicate on the "total_hours" field.
func TotalHoursEQ(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldTotalHours, v))
}

// TotalHoursNEQ applies the NEQ predicate on the "total_hours" field.
func TotalHoursNEQ(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldTotalHours, v))
}

// TotalHoursIn applies the In predicate on the "total_hours" field.
func TotalHoursIn(vs ...int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIn(FieldTotalHours, vs...))
}

// TotalHoursNotIn applies the NotIn predicate on the "total_hours" field.
func TotalHoursNotIn(vs ...int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotIn(FieldTotalHours, vs...))
}

// TotalHoursGT applies the GT predicate on the "total_hours" field.
func TotalHoursGT(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGT(FieldTotalHours, v))
}

// TotalHoursGTE applies the GTE predicate on the "total_hours" field.
func TotalHoursGTE(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGTE(FieldTotalHours, v))
}

// TotalHoursLT applies the LT predicate on the "total_hours" field.
func TotalHoursLT(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLT(FieldTotalHours, v))
}

// TotalHoursLTE applies the LTE predicate on the "total_hours" field.
func TotalHoursLTE(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLTE(FieldTotalHours, v))
}

// TotalPortfolioItemsEQ applies the EQ predicate on the "total_portfolio_items" field.
func TotalPortfolioItemsEQ(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldTotalPortfolioItems, v))
}

// TotalPortfolioItemsNEQ applies the NEQ predicate on the "total_portfolio_items" field.
func TotalPortfolioItemsNEQ(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldTotalPortfolioItems, v))
}

// TotalPortfolioItemsIn applies the In predicate on the "total_portfolio_items" field.
func TotalPortfolioItemsIn(vs ...int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIn(FieldTotalPortfolioItems, vs...))
}

// TotalPortfolioItemsNotIn applies the NotIn predicate on the "total_portfolio_items" field.
func TotalPortfolioItemsNotIn(vs ...int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotIn(FieldTotalPortfolioItems, vs...))
}

// TotalPortfolioItemsGT applies the GT predicate on the "total_portfolio_items" field.
func TotalPortfolioItemsGT(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGT(FieldTotalPortfolioItems, v))
}

// TotalPortfolioItemsGTE applies the GTE predicate on the "total_portfolio_items" field.
func TotalPortfolioItemsGTE(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGTE(FieldTotalPortfolioItems, v))
}

// TotalPortfolioItemsLT applies the LT predicate on the "total_portfolio_items" field.
func TotalPortfolioItemsLT(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLT(FieldTotalPortfolioItems, v))
}

// TotalPortfolioItemsLTE applies the LTE predicate on the "total_portfolio_items" field.
func TotalPortfolioItemsLTE(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLTE(FieldTotalPortfolioItems, v))
}

// TotalPortfolioV2ItemsEQ applies the EQ predicate on the "total_portfolio_v2_items" field.
func TotalPortfolioV2ItemsEQ(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldTotalPortfolioV2Items, v))
}

// TotalPortfolioV2ItemsNEQ applies the NEQ predicate on the "total_portfolio_v2_items" field.
func TotalPortfolioV2ItemsNEQ(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldTotalPortfolioV2Items, v))
}

// TotalPortfolioV2ItemsIn applies the In predicate on the "total_portfolio_v2_items" field.
func TotalPortfolioV2ItemsIn(vs ...int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIn(FieldTotalPortfolioV2Items, vs...))
}

// TotalPortfolioV2ItemsNotIn applies the NotIn predicate on the "total_portfolio_v2_items" field.
func TotalPortfolioV2ItemsNotIn(vs ...int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotIn(FieldTotalPortfolioV2Items, vs...))
}

// TotalPortfolioV2ItemsGT applies the GT predicate on the "total_portfolio_v2_items" field.
func TotalPortfolioV2ItemsGT(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGT(FieldTotalPortfolioV2Items, v))
}

// TotalPortfolioV2ItemsGTE applies the GTE predicate on the "total_portfolio_v2_items" field.
func TotalPortfolioV2ItemsGTE(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGTE(FieldTotalPortfolioV2Items, v))
}

// TotalPortfolioV2ItemsLT applies the LT predicate on the "total_portfolio_v2_items" field.
func TotalPortfolioV2ItemsLT(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLT(FieldTotalPortfolioV2Items, v))
}

// TotalPortfolioV2ItemsLTE applies the LTE predicate on the "total_portfolio_v2_items" field.
func TotalPortfolioV2ItemsLTE(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLTE(FieldTotalPortfolioV2Items, v))
}

// UpworkTotalFeedbackEQ applies the EQ predicate on the "upwork_total_feedback" field.
func UpworkTotalFeedbackEQ(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldUpworkTotalFeedback, v))
}

// UpworkTotalFeedbackNEQ applies the NEQ predicate on the "upwork_total_feedback" field.
func UpworkTotalFeedbackNEQ(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldUpworkTotalFeedback, v))
}

// UpworkTotalFeedbackIn applies the In predicate on the "upwork_total_feedback" field.
func UpworkTotalFeedbackIn(vs ...float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIn(FieldUpworkTotalFeedback, vs...))
}

// UpworkTotalFeedbackNotIn applies the NotIn predicate on the "upwork_total_feedback" field.
func UpworkTotalFeedbackNotIn(vs ...float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotIn(FieldUpworkTotalFeedback, vs...))
}

// UpworkTotalFeedbackGT applies the GT predicate on the "upwork_total_feedback" field.
func UpworkTotalFeedbackGT(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGT(FieldUpworkTotalFeedback, v))
}

// UpworkTotalFeedbackGTE applies the GTE predicate on the "upwork_total_feedback" field.
func UpworkTotalFeedbackGTE(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGTE(FieldUpworkTotalFeedback, v))
}

// UpworkTotalFeedbackLT applies the LT predicate on the "upwork_total_feedback" field.
func UpworkTotalFeedbackLT(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLT(FieldUpworkTotalFeedback, v))
}

// UpworkTotalFeedbackLTE applies the LTE predicate on the "upwork_total_feedback" field.
func UpworkTotalFeedbackLTE(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLTE(FieldUpworkTotalFeedback, v))
}

// UpworkRecentFeedbackEQ applies the EQ predicate on the "upwork_recent_feedback" field.
func UpworkRecentFeedbackEQ(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldUpworkRecentFeedback, v))
}

// UpworkRecentFeedbackNEQ applies the NEQ predicate on the "upwork_recent_feedback" field.
func UpworkRecentFeedbackNEQ(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldUpworkRecentFeedback, v))
}

// UpworkRecentFeedbackIn applies the In predicate on the "upwork_recent_feedback" field.
func UpworkRecentFeedbackIn(vs ...float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIn(FieldUpworkRecentFeedback, vs...))
}

// UpworkRecentFeedbackNotIn applies the NotIn predicate on the "upwork_recent_feedback" field.
func UpworkRecentFeedbackNotIn(vs ...float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotIn(FieldUpworkRecentFeedback, vs...))
}

// UpworkRecentFeedbackGT applies the GT predicate on the "upwork_recent_feedback" field.
func UpworkRecentFeedbackGT(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGT(FieldUpworkRecentFeedback, v))
}

// UpworkRecentFeedbackGTE applies the GTE predicate on the "upwork_recent_feedback" field.
func UpworkRecentFeedbackGTE(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGTE(FieldUpworkRecentFeedback, v))
}

// UpworkRecentFeedbackLT applies the LT predicate on the "upwork_recent_feedback" field.
func UpworkRecentFeedbackLT(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLT(FieldUpworkRecentFeedback, v))
}

// UpworkRecentFeedbackLTE applies the LTE predicate on the "upwork_recent_feedback" field.
func UpworkRecentFeedbackLTE(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLTE(FieldUpworkRecentFeedback, v))
}

// UpworkTopRatedStatusEQ applies the EQ predicate on the "upwork_top_rated_status" field.
func UpworkTopRatedStatusEQ(v bool) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldUpworkTopRatedStatus, v))
}

// UpworkTopRatedStatusNEQ applies the NEQ predicate on the "upwork_top_rated_status" field.
func UpworkTopRatedStatusNEQ(v bool) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldUpworkTopRatedStatus, v))
}

// UpworkTopRatedPlusStatusEQ applies the EQ predicate on the "upwork_top_rated_plus_status" field.
func UpworkTopRatedPlusStatusEQ(v bool) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldUpworkTopRatedPlusStatus, v))
}

// UpworkTopRatedPlusStatusNEQ applies the NEQ predicate on the "upwork_top_rated_plus_status" field.
func UpworkTopRatedPlusStatusNEQ(v bool) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldUpworkTopRatedPlusStatus, v))
}

// UpworkSponsoredEQ applies the EQ predicate on the "upwork_sponsored" field.
func UpworkSponsoredEQ(v bool) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldUpworkSponsored, v))
}

// UpworkSponsoredNEQ applies the NEQ predicate on the "upwork_sponsored" field.
func UpworkSponsoredNEQ(v bool) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldUpworkSponsored, v))
}

// UpworkJobSuccessScoreEQ applies the EQ predicate on the "upwork_job_success_score" field.
func UpworkJobSuccessScoreEQ(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldUpworkJobSuccessScore, v))
}

// UpworkJobSuccessScoreNEQ applies the NEQ predicate on the "upwork_job_success_score" field.
func UpworkJobSuccessScoreNEQ(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldUpworkJobSuccessScore, v))
}

// UpworkJobSuccessScoreIn applies the In predicate on the "upwork_job_success_score" field.
func UpworkJobSuccessScoreIn(vs ...float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIn(FieldUpworkJobSuccessScore, vs...))
}

// UpworkJobSuccessScoreNotIn applies the NotIn predicate on the "upwork_job_success_score" field.
func UpworkJobSuccessScoreNotIn(vs ...float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotIn(FieldUpworkJobSuccessScore, vs...))
}

// UpworkJobSuccessScoreGT applies the GT predicate on the "upwork_job_success_score" field.
func UpworkJobSuccessScoreGT(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGT(FieldUpworkJobSuccessScore, v))
}

// UpworkJobSuccessScoreGTE applies the GTE predicate on the "upwork_job_success_score" field.
func UpworkJobSuccessScoreGTE(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGTE(FieldUpworkJobSuccessScore, v))
}

// UpworkJobSuccessScoreLT applies the LT predicate on the "upwork_job_success_score" field.
func UpworkJobSuccessScoreLT(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLT(FieldUpworkJobSuccessScore, v))
}

// UpworkJobSuccessScoreLTE applies the LTE predicate on the "upwork_job_success_score" field.
func UpworkJobSuccessScoreLTE(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLTE(FieldUpworkJobSuccessScore, v))
}

// UpworkReccomendedEQ applies the EQ predicate on the "upwork_reccomended" field.
func UpworkReccomendedEQ(v bool) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldUpworkReccomended, v))
}

// UpworkReccomendedNEQ applies the NEQ predicate on the "upwork_reccomended" field.
func UpworkReccomendedNEQ(v bool) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldUpworkReccomended, v))
}

// AverageRecentEarningsEQ applies the EQ predicate on the "average_recent_earnings" field.
func AverageRecentEarningsEQ(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldAverageRecentEarnings, v))
}

// AverageRecentEarningsNEQ applies the NEQ predicate on the "average_recent_earnings" field.
func AverageRecentEarningsNEQ(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldAverageRecentEarnings, v))
}

// AverageRecentEarningsIn applies the In predicate on the "average_recent_earnings" field.
func AverageRecentEarningsIn(vs ...float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIn(FieldAverageRecentEarnings, vs...))
}

// AverageRecentEarningsNotIn applies the NotIn predicate on the "average_recent_earnings" field.
func AverageRecentEarningsNotIn(vs ...float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotIn(FieldAverageRecentEarnings, vs...))
}

// AverageRecentEarningsGT applies the GT predicate on the "average_recent_earnings" field.
func AverageRecentEarningsGT(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGT(FieldAverageRecentEarnings, v))
}

// AverageRecentEarningsGTE applies the GTE predicate on the "average_recent_earnings" field.
func AverageRecentEarningsGTE(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGTE(FieldAverageRecentEarnings, v))
}

// AverageRecentEarningsLT applies the LT predicate on the "average_recent_earnings" field.
func AverageRecentEarningsLT(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLT(FieldAverageRecentEarnings, v))
}

// AverageRecentEarningsLTE applies the LTE predicate on the "average_recent_earnings" field.
func AverageRecentEarningsLTE(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLTE(FieldAverageRecentEarnings, v))
}

// CombinedAverageRecentEarningsEQ applies the EQ predicate on the "combined_average_recent_earnings" field.
func CombinedAverageRecentEarningsEQ(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldCombinedAverageRecentEarnings, v))
}

// CombinedAverageRecentEarningsNEQ applies the NEQ predicate on the "combined_average_recent_earnings" field.
func CombinedAverageRecentEarningsNEQ(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldCombinedAverageRecentEarnings, v))
}

// CombinedAverageRecentEarningsIn applies the In predicate on the "combined_average_recent_earnings" field.
func CombinedAverageRecentEarningsIn(vs ...float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIn(FieldCombinedAverageRecentEarnings, vs...))
}

// CombinedAverageRecentEarningsNotIn applies the NotIn predicate on the "combined_average_recent_earnings" field.
func CombinedAverageRecentEarningsNotIn(vs ...float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotIn(FieldCombinedAverageRecentEarnings, vs...))
}

// CombinedAverageRecentEarningsGT applies the GT predicate on the "combined_average_recent_earnings" field.
func CombinedAverageRecentEarningsGT(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGT(FieldCombinedAverageRecentEarnings, v))
}

// CombinedAverageRecentEarningsGTE applies the GTE predicate on the "combined_average_recent_earnings" field.
func CombinedAverageRecentEarningsGTE(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGTE(FieldCombinedAverageRecentEarnings, v))
}

// CombinedAverageRecentEarningsLT applies the LT predicate on the "combined_average_recent_earnings" field.
func CombinedAverageRecentEarningsLT(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLT(FieldCombinedAverageRecentEarnings, v))
}

// CombinedAverageRecentEarningsLTE applies the LTE predicate on the "combined_average_recent_earnings" field.
func CombinedAverageRecentEarningsLTE(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLTE(FieldCombinedAverageRecentEarnings, v))
}

// CombinedRecentEarningsEQ applies the EQ predicate on the "combined_recent_earnings" field.
func CombinedRecentEarningsEQ(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldCombinedRecentEarnings, v))
}

// CombinedRecentEarningsNEQ applies the NEQ predicate on the "combined_recent_earnings" field.
func CombinedRecentEarningsNEQ(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldCombinedRecentEarnings, v))
}

// CombinedRecentEarningsIn applies the In predicate on the "combined_recent_earnings" field.
func CombinedRecentEarningsIn(vs ...float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIn(FieldCombinedRecentEarnings, vs...))
}

// CombinedRecentEarningsNotIn applies the NotIn predicate on the "combined_recent_earnings" field.
func CombinedRecentEarningsNotIn(vs ...float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotIn(FieldCombinedRecentEarnings, vs...))
}

// CombinedRecentEarningsGT applies the GT predicate on the "combined_recent_earnings" field.
func CombinedRecentEarningsGT(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGT(FieldCombinedRecentEarnings, v))
}

// CombinedRecentEarningsGTE applies the GTE predicate on the "combined_recent_earnings" field.
func CombinedRecentEarningsGTE(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGTE(FieldCombinedRecentEarnings, v))
}

// CombinedRecentEarningsLT applies the LT predicate on the "combined_recent_earnings" field.
func CombinedRecentEarningsLT(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLT(FieldCombinedRecentEarnings, v))
}

// CombinedRecentEarningsLTE applies the LTE predicate on the "combined_recent_earnings" field.
func CombinedRecentEarningsLTE(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLTE(FieldCombinedRecentEarnings, v))
}

// CombinedTotalEarningsEQ applies the EQ predicate on the "combined_total_earnings" field.
func CombinedTotalEarningsEQ(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldCombinedTotalEarnings, v))
}

// CombinedTotalEarningsNEQ applies the NEQ predicate on the "combined_total_earnings" field.
func CombinedTotalEarningsNEQ(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldCombinedTotalEarnings, v))
}

// CombinedTotalEarningsIn applies the In predicate on the "combined_total_earnings" field.
func CombinedTotalEarningsIn(vs ...float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIn(FieldCombinedTotalEarnings, vs...))
}

// CombinedTotalEarningsNotIn applies the NotIn predicate on the "combined_total_earnings" field.
func CombinedTotalEarningsNotIn(vs ...float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotIn(FieldCombinedTotalEarnings, vs...))
}

// CombinedTotalEarningsGT applies the GT predicate on the "combined_total_earnings" field.
func CombinedTotalEarningsGT(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGT(FieldCombinedTotalEarnings, v))
}

// CombinedTotalEarningsGTE applies the GTE predicate on the "combined_total_earnings" field.
func CombinedTotalEarningsGTE(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGTE(FieldCombinedTotalEarnings, v))
}

// CombinedTotalEarningsLT applies the LT predicate on the "combined_total_earnings" field.
func CombinedTotalEarningsLT(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLT(FieldCombinedTotalEarnings, v))
}

// CombinedTotalEarningsLTE applies the LTE predicate on the "combined_total_earnings" field.
func CombinedTotalEarningsLTE(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLTE(FieldCombinedTotalEarnings, v))
}

// CombinedTotalRevenueEQ applies the EQ predicate on the "combined_total_revenue" field.
func CombinedTotalRevenueEQ(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldCombinedTotalRevenue, v))
}

// CombinedTotalRevenueNEQ applies the NEQ predicate on the "combined_total_revenue" field.
func CombinedTotalRevenueNEQ(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldCombinedTotalRevenue, v))
}

// CombinedTotalRevenueIn applies the In predicate on the "combined_total_revenue" field.
func CombinedTotalRevenueIn(vs ...float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIn(FieldCombinedTotalRevenue, vs...))
}

// CombinedTotalRevenueNotIn applies the NotIn predicate on the "combined_total_revenue" field.
func CombinedTotalRevenueNotIn(vs ...float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotIn(FieldCombinedTotalRevenue, vs...))
}

// CombinedTotalRevenueGT applies the GT predicate on the "combined_total_revenue" field.
func CombinedTotalRevenueGT(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGT(FieldCombinedTotalRevenue, v))
}

// CombinedTotalRevenueGTE applies the GTE predicate on the "combined_total_revenue" field.
func CombinedTotalRevenueGTE(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGTE(FieldCombinedTotalRevenue, v))
}

// CombinedTotalRevenueLT applies the LT predicate on the "combined_total_revenue" field.
func CombinedTotalRevenueLT(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLT(FieldCombinedTotalRevenue, v))
}

// CombinedTotalRevenueLTE applies the LTE predicate on the "combined_total_revenue" field.
func CombinedTotalRevenueLTE(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLTE(FieldCombinedTotalRevenue, v))
}

// RecentEarningsEQ applies the EQ predicate on the "recent_earnings" field.
func RecentEarningsEQ(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldRecentEarnings, v))
}

// RecentEarningsNEQ applies the NEQ predicate on the "recent_earnings" field.
func RecentEarningsNEQ(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldRecentEarnings, v))
}

// RecentEarningsIn applies the In predicate on the "recent_earnings" field.
func RecentEarningsIn(vs ...float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIn(FieldRecentEarnings, vs...))
}

// RecentEarningsNotIn applies the NotIn predicate on the "recent_earnings" field.
func RecentEarningsNotIn(vs ...float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotIn(FieldRecentEarnings, vs...))
}

// RecentEarningsGT applies the GT predicate on the "recent_earnings" field.
func RecentEarningsGT(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGT(FieldRecentEarnings, v))
}

// RecentEarningsGTE applies the GTE predicate on the "recent_earnings" field.
func RecentEarningsGTE(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGTE(FieldRecentEarnings, v))
}

// RecentEarningsLT applies the LT predicate on the "recent_earnings" field.
func RecentEarningsLT(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLT(FieldRecentEarnings, v))
}

// RecentEarningsLTE applies the LTE predicate on the "recent_earnings" field.
func RecentEarningsLTE(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLTE(FieldRecentEarnings, v))
}

// TotalRevenueEQ applies the EQ predicate on the "total_revenue" field.
func TotalRevenueEQ(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldTotalRevenue, v))
}

// TotalRevenueNEQ applies the NEQ predicate on the "total_revenue" field.
func TotalRevenueNEQ(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldTotalRevenue, v))
}

// TotalRevenueIn applies the In predicate on the "total_revenue" field.
func TotalRevenueIn(vs ...float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIn(FieldTotalRevenue, vs...))
}

// TotalRevenueNotIn applies the NotIn predicate on the "total_revenue" field.
func TotalRevenueNotIn(vs ...float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotIn(FieldTotalRevenue, vs...))
}

// TotalRevenueGT applies the GT predicate on the "total_revenue" field.
func TotalRevenueGT(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGT(FieldTotalRevenue, v))
}

// TotalRevenueGTE applies the GTE predicate on the "total_revenue" field.
func TotalRevenueGTE(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGTE(FieldTotalRevenue, v))
}

// TotalRevenueLT applies the LT predicate on the "total_revenue" field.
func TotalRevenueLT(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLT(FieldTotalRevenue, v))
}

// TotalRevenueLTE applies the LTE predicate on the "total_revenue" field.
func TotalRevenueLTE(v float64) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLTE(FieldTotalRevenue, v))
}

// UprankScoreEQ applies the EQ predicate on the "uprank_score" field.
func UprankScoreEQ(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldUprankScore, v))
}

// UprankScoreNEQ applies the NEQ predicate on the "uprank_score" field.
func UprankScoreNEQ(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldUprankScore, v))
}

// UprankScoreIn applies the In predicate on the "uprank_score" field.
func UprankScoreIn(vs ...int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIn(FieldUprankScore, vs...))
}

// UprankScoreNotIn applies the NotIn predicate on the "uprank_score" field.
func UprankScoreNotIn(vs ...int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotIn(FieldUprankScore, vs...))
}

// UprankScoreGT applies the GT predicate on the "uprank_score" field.
func UprankScoreGT(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGT(FieldUprankScore, v))
}

// UprankScoreGTE applies the GTE predicate on the "uprank_score" field.
func UprankScoreGTE(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGTE(FieldUprankScore, v))
}

// UprankScoreLT applies the LT predicate on the "uprank_score" field.
func UprankScoreLT(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLT(FieldUprankScore, v))
}

// UprankScoreLTE applies the LTE predicate on the "uprank_score" field.
func UprankScoreLTE(v int) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLTE(FieldUprankScore, v))
}

// UprankScoreIsNil applies the IsNil predicate on the "uprank_score" field.
func UprankScoreIsNil() predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIsNull(FieldUprankScore))
}

// UprankScoreNotNil applies the NotNil predicate on the "uprank_score" field.
func UprankScoreNotNil() predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotNull(FieldUprankScore))
}

// UprankUpdatedAtEQ applies the EQ predicate on the "uprank_updated_at" field.
func UprankUpdatedAtEQ(v time.Time) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldUprankUpdatedAt, v))
}

// UprankUpdatedAtNEQ applies the NEQ predicate on the "uprank_updated_at" field.
func UprankUpdatedAtNEQ(v time.Time) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldUprankUpdatedAt, v))
}

// UprankUpdatedAtIn applies the In predicate on the "uprank_updated_at" field.
func UprankUpdatedAtIn(vs ...time.Time) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIn(FieldUprankUpdatedAt, vs...))
}

// UprankUpdatedAtNotIn applies the NotIn predicate on the "uprank_updated_at" field.
func UprankUpdatedAtNotIn(vs ...time.Time) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotIn(FieldUprankUpdatedAt, vs...))
}

// UprankUpdatedAtGT applies the GT predicate on the "uprank_updated_at" field.
func UprankUpdatedAtGT(v time.Time) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGT(FieldUprankUpdatedAt, v))
}

// UprankUpdatedAtGTE applies the GTE predicate on the "uprank_updated_at" field.
func UprankUpdatedAtGTE(v time.Time) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGTE(FieldUprankUpdatedAt, v))
}

// UprankUpdatedAtLT applies the LT predicate on the "uprank_updated_at" field.
func UprankUpdatedAtLT(v time.Time) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLT(FieldUprankUpdatedAt, v))
}

// UprankUpdatedAtLTE applies the LTE predicate on the "uprank_updated_at" field.
func UprankUpdatedAtLTE(v time.Time) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLTE(FieldUprankUpdatedAt, v))
}

// UprankReccomendedEQ applies the EQ predicate on the "uprank_reccomended" field.
func UprankReccomendedEQ(v bool) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldUprankReccomended, v))
}

// UprankReccomendedNEQ applies the NEQ predicate on the "uprank_reccomended" field.
func UprankReccomendedNEQ(v bool) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldUprankReccomended, v))
}

// UprankReccomendedIsNil applies the IsNil predicate on the "uprank_reccomended" field.
func UprankReccomendedIsNil() predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIsNull(FieldUprankReccomended))
}

// UprankReccomendedNotNil applies the NotNil predicate on the "uprank_reccomended" field.
func UprankReccomendedNotNil() predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotNull(FieldUprankReccomended))
}

// UprankReccomendedReasonsEQ applies the EQ predicate on the "uprank_reccomended_reasons" field.
func UprankReccomendedReasonsEQ(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldUprankReccomendedReasons, v))
}

// UprankReccomendedReasonsNEQ applies the NEQ predicate on the "uprank_reccomended_reasons" field.
func UprankReccomendedReasonsNEQ(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldUprankReccomendedReasons, v))
}

// UprankReccomendedReasonsIn applies the In predicate on the "uprank_reccomended_reasons" field.
func UprankReccomendedReasonsIn(vs ...string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIn(FieldUprankReccomendedReasons, vs...))
}

// UprankReccomendedReasonsNotIn applies the NotIn predicate on the "uprank_reccomended_reasons" field.
func UprankReccomendedReasonsNotIn(vs ...string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotIn(FieldUprankReccomendedReasons, vs...))
}

// UprankReccomendedReasonsGT applies the GT predicate on the "uprank_reccomended_reasons" field.
func UprankReccomendedReasonsGT(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGT(FieldUprankReccomendedReasons, v))
}

// UprankReccomendedReasonsGTE applies the GTE predicate on the "uprank_reccomended_reasons" field.
func UprankReccomendedReasonsGTE(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldGTE(FieldUprankReccomendedReasons, v))
}

// UprankReccomendedReasonsLT applies the LT predicate on the "uprank_reccomended_reasons" field.
func UprankReccomendedReasonsLT(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLT(FieldUprankReccomendedReasons, v))
}

// UprankReccomendedReasonsLTE applies the LTE predicate on the "uprank_reccomended_reasons" field.
func UprankReccomendedReasonsLTE(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldLTE(FieldUprankReccomendedReasons, v))
}

// UprankReccomendedReasonsContains applies the Contains predicate on the "uprank_reccomended_reasons" field.
func UprankReccomendedReasonsContains(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldContains(FieldUprankReccomendedReasons, v))
}

// UprankReccomendedReasonsHasPrefix applies the HasPrefix predicate on the "uprank_reccomended_reasons" field.
func UprankReccomendedReasonsHasPrefix(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldHasPrefix(FieldUprankReccomendedReasons, v))
}

// UprankReccomendedReasonsHasSuffix applies the HasSuffix predicate on the "uprank_reccomended_reasons" field.
func UprankReccomendedReasonsHasSuffix(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldHasSuffix(FieldUprankReccomendedReasons, v))
}

// UprankReccomendedReasonsIsNil applies the IsNil predicate on the "uprank_reccomended_reasons" field.
func UprankReccomendedReasonsIsNil() predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIsNull(FieldUprankReccomendedReasons))
}

// UprankReccomendedReasonsNotNil applies the NotNil predicate on the "uprank_reccomended_reasons" field.
func UprankReccomendedReasonsNotNil() predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotNull(FieldUprankReccomendedReasons))
}

// UprankReccomendedReasonsEqualFold applies the EqualFold predicate on the "uprank_reccomended_reasons" field.
func UprankReccomendedReasonsEqualFold(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEqualFold(FieldUprankReccomendedReasons, v))
}

// UprankReccomendedReasonsContainsFold applies the ContainsFold predicate on the "uprank_reccomended_reasons" field.
func UprankReccomendedReasonsContainsFold(v string) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldContainsFold(FieldUprankReccomendedReasons, v))
}

// UprankNotEnoughDataEQ applies the EQ predicate on the "uprank_not_enough_data" field.
func UprankNotEnoughDataEQ(v bool) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldEQ(FieldUprankNotEnoughData, v))
}

// UprankNotEnoughDataNEQ applies the NEQ predicate on the "uprank_not_enough_data" field.
func UprankNotEnoughDataNEQ(v bool) predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNEQ(FieldUprankNotEnoughData, v))
}

// UprankNotEnoughDataIsNil applies the IsNil predicate on the "uprank_not_enough_data" field.
func UprankNotEnoughDataIsNil() predicate.Freelancer {
	return predicate.Freelancer(sql.FieldIsNull(FieldUprankNotEnoughData))
}

// UprankNotEnoughDataNotNil applies the NotNil predicate on the "uprank_not_enough_data" field.
func UprankNotEnoughDataNotNil() predicate.Freelancer {
	return predicate.Freelancer(sql.FieldNotNull(FieldUprankNotEnoughData))
}

// HasJob applies the HasEdge predicate on the "job" edge.
func HasJob() predicate.Freelancer {
	return predicate.Freelancer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, JobTable, JobColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobWith applies the HasEdge predicate on the "job" edge with a given conditions (other predicates).
func HasJobWith(preds ...predicate.Job) predicate.Freelancer {
	return predicate.Freelancer(func(s *sql.Selector) {
		step := newJobStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAttachments applies the HasEdge predicate on the "attachments" edge.
func HasAttachments() predicate.Freelancer {
	return predicate.Freelancer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AttachmentsTable, AttachmentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAttachmentsWith applies the HasEdge predicate on the "attachments" edge with a given conditions (other predicates).
func HasAttachmentsWith(preds ...predicate.AttachmentRef) predicate.Freelancer {
	return predicate.Freelancer(func(s *sql.Selector) {
		step := newAttachmentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasWorkHistories applies the HasEdge predicate on the "work_histories" edge.
func HasWorkHistories() predicate.Freelancer {
	return predicate.Freelancer(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, WorkHistoriesTable, WorkHistoriesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasWorkHistoriesWith applies the HasEdge predicate on the "work_histories" edge with a given conditions (other predicates).
func HasWorkHistoriesWith(preds ...predicate.WorkHistory) predicate.Freelancer {
	return predicate.Freelancer(func(s *sql.Selector) {
		step := newWorkHistoriesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Freelancer) predicate.Freelancer {
	return predicate.Freelancer(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Freelancer) predicate.Freelancer {
	return predicate.Freelancer(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Freelancer) predicate.Freelancer {
	return predicate.Freelancer(sql.NotPredicates(p))
}
