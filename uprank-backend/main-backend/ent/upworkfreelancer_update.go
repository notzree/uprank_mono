// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/notzree/uprank-backend/main-backend/ent/attachmentref"
	"github.com/notzree/uprank-backend/main-backend/ent/freelancerinferencedata"
	"github.com/notzree/uprank-backend/main-backend/ent/predicate"
	"github.com/notzree/uprank-backend/main-backend/ent/upworkfreelancer"
	"github.com/notzree/uprank-backend/main-backend/ent/upworkjob"
	"github.com/notzree/uprank-backend/main-backend/ent/workhistory"
)

// UpworkFreelancerUpdate is the builder for updating UpworkFreelancer entities.
type UpworkFreelancerUpdate struct {
	config
	hooks    []Hook
	mutation *UpworkFreelancerMutation
}

// Where appends a list predicates to the UpworkFreelancerUpdate builder.
func (ufu *UpworkFreelancerUpdate) Where(ps ...predicate.UpworkFreelancer) *UpworkFreelancerUpdate {
	ufu.mutation.Where(ps...)
	return ufu
}

// SetName sets the "name" field.
func (ufu *UpworkFreelancerUpdate) SetName(s string) *UpworkFreelancerUpdate {
	ufu.mutation.SetName(s)
	return ufu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableName(s *string) *UpworkFreelancerUpdate {
	if s != nil {
		ufu.SetName(*s)
	}
	return ufu
}

// SetTitle sets the "title" field.
func (ufu *UpworkFreelancerUpdate) SetTitle(s string) *UpworkFreelancerUpdate {
	ufu.mutation.SetTitle(s)
	return ufu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableTitle(s *string) *UpworkFreelancerUpdate {
	if s != nil {
		ufu.SetTitle(*s)
	}
	return ufu
}

// SetDescription sets the "description" field.
func (ufu *UpworkFreelancerUpdate) SetDescription(s string) *UpworkFreelancerUpdate {
	ufu.mutation.SetDescription(s)
	return ufu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableDescription(s *string) *UpworkFreelancerUpdate {
	if s != nil {
		ufu.SetDescription(*s)
	}
	return ufu
}

// SetCity sets the "city" field.
func (ufu *UpworkFreelancerUpdate) SetCity(s string) *UpworkFreelancerUpdate {
	ufu.mutation.SetCity(s)
	return ufu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableCity(s *string) *UpworkFreelancerUpdate {
	if s != nil {
		ufu.SetCity(*s)
	}
	return ufu
}

// SetCountry sets the "country" field.
func (ufu *UpworkFreelancerUpdate) SetCountry(s string) *UpworkFreelancerUpdate {
	ufu.mutation.SetCountry(s)
	return ufu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableCountry(s *string) *UpworkFreelancerUpdate {
	if s != nil {
		ufu.SetCountry(*s)
	}
	return ufu
}

// SetTimezone sets the "timezone" field.
func (ufu *UpworkFreelancerUpdate) SetTimezone(s string) *UpworkFreelancerUpdate {
	ufu.mutation.SetTimezone(s)
	return ufu
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableTimezone(s *string) *UpworkFreelancerUpdate {
	if s != nil {
		ufu.SetTimezone(*s)
	}
	return ufu
}

// SetCv sets the "cv" field.
func (ufu *UpworkFreelancerUpdate) SetCv(s string) *UpworkFreelancerUpdate {
	ufu.mutation.SetCv(s)
	return ufu
}

// SetNillableCv sets the "cv" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableCv(s *string) *UpworkFreelancerUpdate {
	if s != nil {
		ufu.SetCv(*s)
	}
	return ufu
}

// SetAiReccomended sets the "ai_reccomended" field.
func (ufu *UpworkFreelancerUpdate) SetAiReccomended(b bool) *UpworkFreelancerUpdate {
	ufu.mutation.SetAiReccomended(b)
	return ufu
}

// SetNillableAiReccomended sets the "ai_reccomended" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableAiReccomended(b *bool) *UpworkFreelancerUpdate {
	if b != nil {
		ufu.SetAiReccomended(*b)
	}
	return ufu
}

// SetFixedChargeAmount sets the "fixed_charge_amount" field.
func (ufu *UpworkFreelancerUpdate) SetFixedChargeAmount(f float64) *UpworkFreelancerUpdate {
	ufu.mutation.ResetFixedChargeAmount()
	ufu.mutation.SetFixedChargeAmount(f)
	return ufu
}

// SetNillableFixedChargeAmount sets the "fixed_charge_amount" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableFixedChargeAmount(f *float64) *UpworkFreelancerUpdate {
	if f != nil {
		ufu.SetFixedChargeAmount(*f)
	}
	return ufu
}

// AddFixedChargeAmount adds f to the "fixed_charge_amount" field.
func (ufu *UpworkFreelancerUpdate) AddFixedChargeAmount(f float64) *UpworkFreelancerUpdate {
	ufu.mutation.AddFixedChargeAmount(f)
	return ufu
}

// ClearFixedChargeAmount clears the value of the "fixed_charge_amount" field.
func (ufu *UpworkFreelancerUpdate) ClearFixedChargeAmount() *UpworkFreelancerUpdate {
	ufu.mutation.ClearFixedChargeAmount()
	return ufu
}

// SetFixedChargeCurrency sets the "fixed_charge_currency" field.
func (ufu *UpworkFreelancerUpdate) SetFixedChargeCurrency(s string) *UpworkFreelancerUpdate {
	ufu.mutation.SetFixedChargeCurrency(s)
	return ufu
}

// SetNillableFixedChargeCurrency sets the "fixed_charge_currency" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableFixedChargeCurrency(s *string) *UpworkFreelancerUpdate {
	if s != nil {
		ufu.SetFixedChargeCurrency(*s)
	}
	return ufu
}

// SetHourlyChargeAmount sets the "hourly_charge_amount" field.
func (ufu *UpworkFreelancerUpdate) SetHourlyChargeAmount(f float64) *UpworkFreelancerUpdate {
	ufu.mutation.ResetHourlyChargeAmount()
	ufu.mutation.SetHourlyChargeAmount(f)
	return ufu
}

// SetNillableHourlyChargeAmount sets the "hourly_charge_amount" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableHourlyChargeAmount(f *float64) *UpworkFreelancerUpdate {
	if f != nil {
		ufu.SetHourlyChargeAmount(*f)
	}
	return ufu
}

// AddHourlyChargeAmount adds f to the "hourly_charge_amount" field.
func (ufu *UpworkFreelancerUpdate) AddHourlyChargeAmount(f float64) *UpworkFreelancerUpdate {
	ufu.mutation.AddHourlyChargeAmount(f)
	return ufu
}

// ClearHourlyChargeAmount clears the value of the "hourly_charge_amount" field.
func (ufu *UpworkFreelancerUpdate) ClearHourlyChargeAmount() *UpworkFreelancerUpdate {
	ufu.mutation.ClearHourlyChargeAmount()
	return ufu
}

// SetHourlyChargeCurrency sets the "hourly_charge_currency" field.
func (ufu *UpworkFreelancerUpdate) SetHourlyChargeCurrency(s string) *UpworkFreelancerUpdate {
	ufu.mutation.SetHourlyChargeCurrency(s)
	return ufu
}

// SetNillableHourlyChargeCurrency sets the "hourly_charge_currency" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableHourlyChargeCurrency(s *string) *UpworkFreelancerUpdate {
	if s != nil {
		ufu.SetHourlyChargeCurrency(*s)
	}
	return ufu
}

// SetInvited sets the "invited" field.
func (ufu *UpworkFreelancerUpdate) SetInvited(b bool) *UpworkFreelancerUpdate {
	ufu.mutation.SetInvited(b)
	return ufu
}

// SetNillableInvited sets the "invited" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableInvited(b *bool) *UpworkFreelancerUpdate {
	if b != nil {
		ufu.SetInvited(*b)
	}
	return ufu
}

// SetPhotoURL sets the "photo_url" field.
func (ufu *UpworkFreelancerUpdate) SetPhotoURL(s string) *UpworkFreelancerUpdate {
	ufu.mutation.SetPhotoURL(s)
	return ufu
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillablePhotoURL(s *string) *UpworkFreelancerUpdate {
	if s != nil {
		ufu.SetPhotoURL(*s)
	}
	return ufu
}

// SetRecentHours sets the "recent_hours" field.
func (ufu *UpworkFreelancerUpdate) SetRecentHours(f float64) *UpworkFreelancerUpdate {
	ufu.mutation.ResetRecentHours()
	ufu.mutation.SetRecentHours(f)
	return ufu
}

// SetNillableRecentHours sets the "recent_hours" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableRecentHours(f *float64) *UpworkFreelancerUpdate {
	if f != nil {
		ufu.SetRecentHours(*f)
	}
	return ufu
}

// AddRecentHours adds f to the "recent_hours" field.
func (ufu *UpworkFreelancerUpdate) AddRecentHours(f float64) *UpworkFreelancerUpdate {
	ufu.mutation.AddRecentHours(f)
	return ufu
}

// SetTotalHours sets the "total_hours" field.
func (ufu *UpworkFreelancerUpdate) SetTotalHours(f float64) *UpworkFreelancerUpdate {
	ufu.mutation.ResetTotalHours()
	ufu.mutation.SetTotalHours(f)
	return ufu
}

// SetNillableTotalHours sets the "total_hours" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableTotalHours(f *float64) *UpworkFreelancerUpdate {
	if f != nil {
		ufu.SetTotalHours(*f)
	}
	return ufu
}

// AddTotalHours adds f to the "total_hours" field.
func (ufu *UpworkFreelancerUpdate) AddTotalHours(f float64) *UpworkFreelancerUpdate {
	ufu.mutation.AddTotalHours(f)
	return ufu
}

// SetUpdatedAt sets the "updated_at" field.
func (ufu *UpworkFreelancerUpdate) SetUpdatedAt(t time.Time) *UpworkFreelancerUpdate {
	ufu.mutation.SetUpdatedAt(t)
	return ufu
}

// SetEmbeddedAt sets the "embedded_at" field.
func (ufu *UpworkFreelancerUpdate) SetEmbeddedAt(t time.Time) *UpworkFreelancerUpdate {
	ufu.mutation.SetEmbeddedAt(t)
	return ufu
}

// SetNillableEmbeddedAt sets the "embedded_at" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableEmbeddedAt(t *time.Time) *UpworkFreelancerUpdate {
	if t != nil {
		ufu.SetEmbeddedAt(*t)
	}
	return ufu
}

// ClearEmbeddedAt clears the value of the "embedded_at" field.
func (ufu *UpworkFreelancerUpdate) ClearEmbeddedAt() *UpworkFreelancerUpdate {
	ufu.mutation.ClearEmbeddedAt()
	return ufu
}

// SetTotalPortfolioItems sets the "total_portfolio_items" field.
func (ufu *UpworkFreelancerUpdate) SetTotalPortfolioItems(i int) *UpworkFreelancerUpdate {
	ufu.mutation.ResetTotalPortfolioItems()
	ufu.mutation.SetTotalPortfolioItems(i)
	return ufu
}

// SetNillableTotalPortfolioItems sets the "total_portfolio_items" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableTotalPortfolioItems(i *int) *UpworkFreelancerUpdate {
	if i != nil {
		ufu.SetTotalPortfolioItems(*i)
	}
	return ufu
}

// AddTotalPortfolioItems adds i to the "total_portfolio_items" field.
func (ufu *UpworkFreelancerUpdate) AddTotalPortfolioItems(i int) *UpworkFreelancerUpdate {
	ufu.mutation.AddTotalPortfolioItems(i)
	return ufu
}

// SetTotalPortfolioV2Items sets the "total_portfolio_v2_items" field.
func (ufu *UpworkFreelancerUpdate) SetTotalPortfolioV2Items(i int) *UpworkFreelancerUpdate {
	ufu.mutation.ResetTotalPortfolioV2Items()
	ufu.mutation.SetTotalPortfolioV2Items(i)
	return ufu
}

// SetNillableTotalPortfolioV2Items sets the "total_portfolio_v2_items" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableTotalPortfolioV2Items(i *int) *UpworkFreelancerUpdate {
	if i != nil {
		ufu.SetTotalPortfolioV2Items(*i)
	}
	return ufu
}

// AddTotalPortfolioV2Items adds i to the "total_portfolio_v2_items" field.
func (ufu *UpworkFreelancerUpdate) AddTotalPortfolioV2Items(i int) *UpworkFreelancerUpdate {
	ufu.mutation.AddTotalPortfolioV2Items(i)
	return ufu
}

// SetUpworkTotalFeedback sets the "upwork_total_feedback" field.
func (ufu *UpworkFreelancerUpdate) SetUpworkTotalFeedback(f float64) *UpworkFreelancerUpdate {
	ufu.mutation.ResetUpworkTotalFeedback()
	ufu.mutation.SetUpworkTotalFeedback(f)
	return ufu
}

// SetNillableUpworkTotalFeedback sets the "upwork_total_feedback" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableUpworkTotalFeedback(f *float64) *UpworkFreelancerUpdate {
	if f != nil {
		ufu.SetUpworkTotalFeedback(*f)
	}
	return ufu
}

// AddUpworkTotalFeedback adds f to the "upwork_total_feedback" field.
func (ufu *UpworkFreelancerUpdate) AddUpworkTotalFeedback(f float64) *UpworkFreelancerUpdate {
	ufu.mutation.AddUpworkTotalFeedback(f)
	return ufu
}

// SetUpworkRecentFeedback sets the "upwork_recent_feedback" field.
func (ufu *UpworkFreelancerUpdate) SetUpworkRecentFeedback(f float64) *UpworkFreelancerUpdate {
	ufu.mutation.ResetUpworkRecentFeedback()
	ufu.mutation.SetUpworkRecentFeedback(f)
	return ufu
}

// SetNillableUpworkRecentFeedback sets the "upwork_recent_feedback" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableUpworkRecentFeedback(f *float64) *UpworkFreelancerUpdate {
	if f != nil {
		ufu.SetUpworkRecentFeedback(*f)
	}
	return ufu
}

// AddUpworkRecentFeedback adds f to the "upwork_recent_feedback" field.
func (ufu *UpworkFreelancerUpdate) AddUpworkRecentFeedback(f float64) *UpworkFreelancerUpdate {
	ufu.mutation.AddUpworkRecentFeedback(f)
	return ufu
}

// SetUpworkTopRatedStatus sets the "upwork_top_rated_status" field.
func (ufu *UpworkFreelancerUpdate) SetUpworkTopRatedStatus(b bool) *UpworkFreelancerUpdate {
	ufu.mutation.SetUpworkTopRatedStatus(b)
	return ufu
}

// SetNillableUpworkTopRatedStatus sets the "upwork_top_rated_status" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableUpworkTopRatedStatus(b *bool) *UpworkFreelancerUpdate {
	if b != nil {
		ufu.SetUpworkTopRatedStatus(*b)
	}
	return ufu
}

// SetUpworkTopRatedPlusStatus sets the "upwork_top_rated_plus_status" field.
func (ufu *UpworkFreelancerUpdate) SetUpworkTopRatedPlusStatus(b bool) *UpworkFreelancerUpdate {
	ufu.mutation.SetUpworkTopRatedPlusStatus(b)
	return ufu
}

// SetNillableUpworkTopRatedPlusStatus sets the "upwork_top_rated_plus_status" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableUpworkTopRatedPlusStatus(b *bool) *UpworkFreelancerUpdate {
	if b != nil {
		ufu.SetUpworkTopRatedPlusStatus(*b)
	}
	return ufu
}

// SetUpworkSponsored sets the "upwork_sponsored" field.
func (ufu *UpworkFreelancerUpdate) SetUpworkSponsored(b bool) *UpworkFreelancerUpdate {
	ufu.mutation.SetUpworkSponsored(b)
	return ufu
}

// SetNillableUpworkSponsored sets the "upwork_sponsored" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableUpworkSponsored(b *bool) *UpworkFreelancerUpdate {
	if b != nil {
		ufu.SetUpworkSponsored(*b)
	}
	return ufu
}

// SetUpworkJobSuccessScore sets the "upwork_job_success_score" field.
func (ufu *UpworkFreelancerUpdate) SetUpworkJobSuccessScore(f float64) *UpworkFreelancerUpdate {
	ufu.mutation.ResetUpworkJobSuccessScore()
	ufu.mutation.SetUpworkJobSuccessScore(f)
	return ufu
}

// SetNillableUpworkJobSuccessScore sets the "upwork_job_success_score" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableUpworkJobSuccessScore(f *float64) *UpworkFreelancerUpdate {
	if f != nil {
		ufu.SetUpworkJobSuccessScore(*f)
	}
	return ufu
}

// AddUpworkJobSuccessScore adds f to the "upwork_job_success_score" field.
func (ufu *UpworkFreelancerUpdate) AddUpworkJobSuccessScore(f float64) *UpworkFreelancerUpdate {
	ufu.mutation.AddUpworkJobSuccessScore(f)
	return ufu
}

// SetUpworkReccomended sets the "upwork_reccomended" field.
func (ufu *UpworkFreelancerUpdate) SetUpworkReccomended(b bool) *UpworkFreelancerUpdate {
	ufu.mutation.SetUpworkReccomended(b)
	return ufu
}

// SetNillableUpworkReccomended sets the "upwork_reccomended" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableUpworkReccomended(b *bool) *UpworkFreelancerUpdate {
	if b != nil {
		ufu.SetUpworkReccomended(*b)
	}
	return ufu
}

// SetSkills sets the "skills" field.
func (ufu *UpworkFreelancerUpdate) SetSkills(s []string) *UpworkFreelancerUpdate {
	ufu.mutation.SetSkills(s)
	return ufu
}

// AppendSkills appends s to the "skills" field.
func (ufu *UpworkFreelancerUpdate) AppendSkills(s []string) *UpworkFreelancerUpdate {
	ufu.mutation.AppendSkills(s)
	return ufu
}

// SetAverageRecentEarnings sets the "average_recent_earnings" field.
func (ufu *UpworkFreelancerUpdate) SetAverageRecentEarnings(f float64) *UpworkFreelancerUpdate {
	ufu.mutation.ResetAverageRecentEarnings()
	ufu.mutation.SetAverageRecentEarnings(f)
	return ufu
}

// SetNillableAverageRecentEarnings sets the "average_recent_earnings" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableAverageRecentEarnings(f *float64) *UpworkFreelancerUpdate {
	if f != nil {
		ufu.SetAverageRecentEarnings(*f)
	}
	return ufu
}

// AddAverageRecentEarnings adds f to the "average_recent_earnings" field.
func (ufu *UpworkFreelancerUpdate) AddAverageRecentEarnings(f float64) *UpworkFreelancerUpdate {
	ufu.mutation.AddAverageRecentEarnings(f)
	return ufu
}

// SetCombinedAverageRecentEarnings sets the "combined_average_recent_earnings" field.
func (ufu *UpworkFreelancerUpdate) SetCombinedAverageRecentEarnings(f float64) *UpworkFreelancerUpdate {
	ufu.mutation.ResetCombinedAverageRecentEarnings()
	ufu.mutation.SetCombinedAverageRecentEarnings(f)
	return ufu
}

// SetNillableCombinedAverageRecentEarnings sets the "combined_average_recent_earnings" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableCombinedAverageRecentEarnings(f *float64) *UpworkFreelancerUpdate {
	if f != nil {
		ufu.SetCombinedAverageRecentEarnings(*f)
	}
	return ufu
}

// AddCombinedAverageRecentEarnings adds f to the "combined_average_recent_earnings" field.
func (ufu *UpworkFreelancerUpdate) AddCombinedAverageRecentEarnings(f float64) *UpworkFreelancerUpdate {
	ufu.mutation.AddCombinedAverageRecentEarnings(f)
	return ufu
}

// SetCombinedRecentEarnings sets the "combined_recent_earnings" field.
func (ufu *UpworkFreelancerUpdate) SetCombinedRecentEarnings(f float64) *UpworkFreelancerUpdate {
	ufu.mutation.ResetCombinedRecentEarnings()
	ufu.mutation.SetCombinedRecentEarnings(f)
	return ufu
}

// SetNillableCombinedRecentEarnings sets the "combined_recent_earnings" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableCombinedRecentEarnings(f *float64) *UpworkFreelancerUpdate {
	if f != nil {
		ufu.SetCombinedRecentEarnings(*f)
	}
	return ufu
}

// AddCombinedRecentEarnings adds f to the "combined_recent_earnings" field.
func (ufu *UpworkFreelancerUpdate) AddCombinedRecentEarnings(f float64) *UpworkFreelancerUpdate {
	ufu.mutation.AddCombinedRecentEarnings(f)
	return ufu
}

// SetCombinedTotalEarnings sets the "combined_total_earnings" field.
func (ufu *UpworkFreelancerUpdate) SetCombinedTotalEarnings(f float64) *UpworkFreelancerUpdate {
	ufu.mutation.ResetCombinedTotalEarnings()
	ufu.mutation.SetCombinedTotalEarnings(f)
	return ufu
}

// SetNillableCombinedTotalEarnings sets the "combined_total_earnings" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableCombinedTotalEarnings(f *float64) *UpworkFreelancerUpdate {
	if f != nil {
		ufu.SetCombinedTotalEarnings(*f)
	}
	return ufu
}

// AddCombinedTotalEarnings adds f to the "combined_total_earnings" field.
func (ufu *UpworkFreelancerUpdate) AddCombinedTotalEarnings(f float64) *UpworkFreelancerUpdate {
	ufu.mutation.AddCombinedTotalEarnings(f)
	return ufu
}

// SetCombinedTotalRevenue sets the "combined_total_revenue" field.
func (ufu *UpworkFreelancerUpdate) SetCombinedTotalRevenue(f float64) *UpworkFreelancerUpdate {
	ufu.mutation.ResetCombinedTotalRevenue()
	ufu.mutation.SetCombinedTotalRevenue(f)
	return ufu
}

// SetNillableCombinedTotalRevenue sets the "combined_total_revenue" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableCombinedTotalRevenue(f *float64) *UpworkFreelancerUpdate {
	if f != nil {
		ufu.SetCombinedTotalRevenue(*f)
	}
	return ufu
}

// AddCombinedTotalRevenue adds f to the "combined_total_revenue" field.
func (ufu *UpworkFreelancerUpdate) AddCombinedTotalRevenue(f float64) *UpworkFreelancerUpdate {
	ufu.mutation.AddCombinedTotalRevenue(f)
	return ufu
}

// SetRecentEarnings sets the "recent_earnings" field.
func (ufu *UpworkFreelancerUpdate) SetRecentEarnings(f float64) *UpworkFreelancerUpdate {
	ufu.mutation.ResetRecentEarnings()
	ufu.mutation.SetRecentEarnings(f)
	return ufu
}

// SetNillableRecentEarnings sets the "recent_earnings" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableRecentEarnings(f *float64) *UpworkFreelancerUpdate {
	if f != nil {
		ufu.SetRecentEarnings(*f)
	}
	return ufu
}

// AddRecentEarnings adds f to the "recent_earnings" field.
func (ufu *UpworkFreelancerUpdate) AddRecentEarnings(f float64) *UpworkFreelancerUpdate {
	ufu.mutation.AddRecentEarnings(f)
	return ufu
}

// SetTotalRevenue sets the "total_revenue" field.
func (ufu *UpworkFreelancerUpdate) SetTotalRevenue(f float64) *UpworkFreelancerUpdate {
	ufu.mutation.ResetTotalRevenue()
	ufu.mutation.SetTotalRevenue(f)
	return ufu
}

// SetNillableTotalRevenue sets the "total_revenue" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableTotalRevenue(f *float64) *UpworkFreelancerUpdate {
	if f != nil {
		ufu.SetTotalRevenue(*f)
	}
	return ufu
}

// AddTotalRevenue adds f to the "total_revenue" field.
func (ufu *UpworkFreelancerUpdate) AddTotalRevenue(f float64) *UpworkFreelancerUpdate {
	ufu.mutation.AddTotalRevenue(f)
	return ufu
}

// SetMissingFields sets the "missing_fields" field.
func (ufu *UpworkFreelancerUpdate) SetMissingFields(b bool) *UpworkFreelancerUpdate {
	ufu.mutation.SetMissingFields(b)
	return ufu
}

// SetNillableMissingFields sets the "missing_fields" field if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableMissingFields(b *bool) *UpworkFreelancerUpdate {
	if b != nil {
		ufu.SetMissingFields(*b)
	}
	return ufu
}

// AddUpworkJobIDs adds the "upwork_job" edge to the UpworkJob entity by IDs.
func (ufu *UpworkFreelancerUpdate) AddUpworkJobIDs(ids ...string) *UpworkFreelancerUpdate {
	ufu.mutation.AddUpworkJobIDs(ids...)
	return ufu
}

// AddUpworkJob adds the "upwork_job" edges to the UpworkJob entity.
func (ufu *UpworkFreelancerUpdate) AddUpworkJob(u ...*UpworkJob) *UpworkFreelancerUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ufu.AddUpworkJobIDs(ids...)
}

// AddAttachmentIDs adds the "attachments" edge to the AttachmentRef entity by IDs.
func (ufu *UpworkFreelancerUpdate) AddAttachmentIDs(ids ...int) *UpworkFreelancerUpdate {
	ufu.mutation.AddAttachmentIDs(ids...)
	return ufu
}

// AddAttachments adds the "attachments" edges to the AttachmentRef entity.
func (ufu *UpworkFreelancerUpdate) AddAttachments(a ...*AttachmentRef) *UpworkFreelancerUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ufu.AddAttachmentIDs(ids...)
}

// AddWorkHistoryIDs adds the "work_histories" edge to the WorkHistory entity by IDs.
func (ufu *UpworkFreelancerUpdate) AddWorkHistoryIDs(ids ...int) *UpworkFreelancerUpdate {
	ufu.mutation.AddWorkHistoryIDs(ids...)
	return ufu
}

// AddWorkHistories adds the "work_histories" edges to the WorkHistory entity.
func (ufu *UpworkFreelancerUpdate) AddWorkHistories(w ...*WorkHistory) *UpworkFreelancerUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return ufu.AddWorkHistoryIDs(ids...)
}

// SetFreelancerInferenceDataID sets the "freelancer_inference_data" edge to the FreelancerInferenceData entity by ID.
func (ufu *UpworkFreelancerUpdate) SetFreelancerInferenceDataID(id int) *UpworkFreelancerUpdate {
	ufu.mutation.SetFreelancerInferenceDataID(id)
	return ufu
}

// SetNillableFreelancerInferenceDataID sets the "freelancer_inference_data" edge to the FreelancerInferenceData entity by ID if the given value is not nil.
func (ufu *UpworkFreelancerUpdate) SetNillableFreelancerInferenceDataID(id *int) *UpworkFreelancerUpdate {
	if id != nil {
		ufu = ufu.SetFreelancerInferenceDataID(*id)
	}
	return ufu
}

// SetFreelancerInferenceData sets the "freelancer_inference_data" edge to the FreelancerInferenceData entity.
func (ufu *UpworkFreelancerUpdate) SetFreelancerInferenceData(f *FreelancerInferenceData) *UpworkFreelancerUpdate {
	return ufu.SetFreelancerInferenceDataID(f.ID)
}

// Mutation returns the UpworkFreelancerMutation object of the builder.
func (ufu *UpworkFreelancerUpdate) Mutation() *UpworkFreelancerMutation {
	return ufu.mutation
}

// ClearUpworkJob clears all "upwork_job" edges to the UpworkJob entity.
func (ufu *UpworkFreelancerUpdate) ClearUpworkJob() *UpworkFreelancerUpdate {
	ufu.mutation.ClearUpworkJob()
	return ufu
}

// RemoveUpworkJobIDs removes the "upwork_job" edge to UpworkJob entities by IDs.
func (ufu *UpworkFreelancerUpdate) RemoveUpworkJobIDs(ids ...string) *UpworkFreelancerUpdate {
	ufu.mutation.RemoveUpworkJobIDs(ids...)
	return ufu
}

// RemoveUpworkJob removes "upwork_job" edges to UpworkJob entities.
func (ufu *UpworkFreelancerUpdate) RemoveUpworkJob(u ...*UpworkJob) *UpworkFreelancerUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ufu.RemoveUpworkJobIDs(ids...)
}

// ClearAttachments clears all "attachments" edges to the AttachmentRef entity.
func (ufu *UpworkFreelancerUpdate) ClearAttachments() *UpworkFreelancerUpdate {
	ufu.mutation.ClearAttachments()
	return ufu
}

// RemoveAttachmentIDs removes the "attachments" edge to AttachmentRef entities by IDs.
func (ufu *UpworkFreelancerUpdate) RemoveAttachmentIDs(ids ...int) *UpworkFreelancerUpdate {
	ufu.mutation.RemoveAttachmentIDs(ids...)
	return ufu
}

// RemoveAttachments removes "attachments" edges to AttachmentRef entities.
func (ufu *UpworkFreelancerUpdate) RemoveAttachments(a ...*AttachmentRef) *UpworkFreelancerUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ufu.RemoveAttachmentIDs(ids...)
}

// ClearWorkHistories clears all "work_histories" edges to the WorkHistory entity.
func (ufu *UpworkFreelancerUpdate) ClearWorkHistories() *UpworkFreelancerUpdate {
	ufu.mutation.ClearWorkHistories()
	return ufu
}

// RemoveWorkHistoryIDs removes the "work_histories" edge to WorkHistory entities by IDs.
func (ufu *UpworkFreelancerUpdate) RemoveWorkHistoryIDs(ids ...int) *UpworkFreelancerUpdate {
	ufu.mutation.RemoveWorkHistoryIDs(ids...)
	return ufu
}

// RemoveWorkHistories removes "work_histories" edges to WorkHistory entities.
func (ufu *UpworkFreelancerUpdate) RemoveWorkHistories(w ...*WorkHistory) *UpworkFreelancerUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return ufu.RemoveWorkHistoryIDs(ids...)
}

// ClearFreelancerInferenceData clears the "freelancer_inference_data" edge to the FreelancerInferenceData entity.
func (ufu *UpworkFreelancerUpdate) ClearFreelancerInferenceData() *UpworkFreelancerUpdate {
	ufu.mutation.ClearFreelancerInferenceData()
	return ufu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ufu *UpworkFreelancerUpdate) Save(ctx context.Context) (int, error) {
	ufu.defaults()
	return withHooks(ctx, ufu.sqlSave, ufu.mutation, ufu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufu *UpworkFreelancerUpdate) SaveX(ctx context.Context) int {
	affected, err := ufu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ufu *UpworkFreelancerUpdate) Exec(ctx context.Context) error {
	_, err := ufu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufu *UpworkFreelancerUpdate) ExecX(ctx context.Context) {
	if err := ufu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ufu *UpworkFreelancerUpdate) defaults() {
	if _, ok := ufu.mutation.UpdatedAt(); !ok {
		v := upworkfreelancer.UpdateDefaultUpdatedAt()
		ufu.mutation.SetUpdatedAt(v)
	}
}

func (ufu *UpworkFreelancerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(upworkfreelancer.Table, upworkfreelancer.Columns, sqlgraph.NewFieldSpec(upworkfreelancer.FieldID, field.TypeString))
	if ps := ufu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufu.mutation.Name(); ok {
		_spec.SetField(upworkfreelancer.FieldName, field.TypeString, value)
	}
	if value, ok := ufu.mutation.Title(); ok {
		_spec.SetField(upworkfreelancer.FieldTitle, field.TypeString, value)
	}
	if value, ok := ufu.mutation.Description(); ok {
		_spec.SetField(upworkfreelancer.FieldDescription, field.TypeString, value)
	}
	if value, ok := ufu.mutation.City(); ok {
		_spec.SetField(upworkfreelancer.FieldCity, field.TypeString, value)
	}
	if value, ok := ufu.mutation.Country(); ok {
		_spec.SetField(upworkfreelancer.FieldCountry, field.TypeString, value)
	}
	if value, ok := ufu.mutation.Timezone(); ok {
		_spec.SetField(upworkfreelancer.FieldTimezone, field.TypeString, value)
	}
	if value, ok := ufu.mutation.Cv(); ok {
		_spec.SetField(upworkfreelancer.FieldCv, field.TypeString, value)
	}
	if value, ok := ufu.mutation.AiReccomended(); ok {
		_spec.SetField(upworkfreelancer.FieldAiReccomended, field.TypeBool, value)
	}
	if value, ok := ufu.mutation.FixedChargeAmount(); ok {
		_spec.SetField(upworkfreelancer.FieldFixedChargeAmount, field.TypeFloat64, value)
	}
	if value, ok := ufu.mutation.AddedFixedChargeAmount(); ok {
		_spec.AddField(upworkfreelancer.FieldFixedChargeAmount, field.TypeFloat64, value)
	}
	if ufu.mutation.FixedChargeAmountCleared() {
		_spec.ClearField(upworkfreelancer.FieldFixedChargeAmount, field.TypeFloat64)
	}
	if value, ok := ufu.mutation.FixedChargeCurrency(); ok {
		_spec.SetField(upworkfreelancer.FieldFixedChargeCurrency, field.TypeString, value)
	}
	if value, ok := ufu.mutation.HourlyChargeAmount(); ok {
		_spec.SetField(upworkfreelancer.FieldHourlyChargeAmount, field.TypeFloat64, value)
	}
	if value, ok := ufu.mutation.AddedHourlyChargeAmount(); ok {
		_spec.AddField(upworkfreelancer.FieldHourlyChargeAmount, field.TypeFloat64, value)
	}
	if ufu.mutation.HourlyChargeAmountCleared() {
		_spec.ClearField(upworkfreelancer.FieldHourlyChargeAmount, field.TypeFloat64)
	}
	if value, ok := ufu.mutation.HourlyChargeCurrency(); ok {
		_spec.SetField(upworkfreelancer.FieldHourlyChargeCurrency, field.TypeString, value)
	}
	if value, ok := ufu.mutation.Invited(); ok {
		_spec.SetField(upworkfreelancer.FieldInvited, field.TypeBool, value)
	}
	if value, ok := ufu.mutation.PhotoURL(); ok {
		_spec.SetField(upworkfreelancer.FieldPhotoURL, field.TypeString, value)
	}
	if value, ok := ufu.mutation.RecentHours(); ok {
		_spec.SetField(upworkfreelancer.FieldRecentHours, field.TypeFloat64, value)
	}
	if value, ok := ufu.mutation.AddedRecentHours(); ok {
		_spec.AddField(upworkfreelancer.FieldRecentHours, field.TypeFloat64, value)
	}
	if value, ok := ufu.mutation.TotalHours(); ok {
		_spec.SetField(upworkfreelancer.FieldTotalHours, field.TypeFloat64, value)
	}
	if value, ok := ufu.mutation.AddedTotalHours(); ok {
		_spec.AddField(upworkfreelancer.FieldTotalHours, field.TypeFloat64, value)
	}
	if value, ok := ufu.mutation.UpdatedAt(); ok {
		_spec.SetField(upworkfreelancer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ufu.mutation.EmbeddedAt(); ok {
		_spec.SetField(upworkfreelancer.FieldEmbeddedAt, field.TypeTime, value)
	}
	if ufu.mutation.EmbeddedAtCleared() {
		_spec.ClearField(upworkfreelancer.FieldEmbeddedAt, field.TypeTime)
	}
	if value, ok := ufu.mutation.TotalPortfolioItems(); ok {
		_spec.SetField(upworkfreelancer.FieldTotalPortfolioItems, field.TypeInt, value)
	}
	if value, ok := ufu.mutation.AddedTotalPortfolioItems(); ok {
		_spec.AddField(upworkfreelancer.FieldTotalPortfolioItems, field.TypeInt, value)
	}
	if value, ok := ufu.mutation.TotalPortfolioV2Items(); ok {
		_spec.SetField(upworkfreelancer.FieldTotalPortfolioV2Items, field.TypeInt, value)
	}
	if value, ok := ufu.mutation.AddedTotalPortfolioV2Items(); ok {
		_spec.AddField(upworkfreelancer.FieldTotalPortfolioV2Items, field.TypeInt, value)
	}
	if value, ok := ufu.mutation.UpworkTotalFeedback(); ok {
		_spec.SetField(upworkfreelancer.FieldUpworkTotalFeedback, field.TypeFloat64, value)
	}
	if value, ok := ufu.mutation.AddedUpworkTotalFeedback(); ok {
		_spec.AddField(upworkfreelancer.FieldUpworkTotalFeedback, field.TypeFloat64, value)
	}
	if value, ok := ufu.mutation.UpworkRecentFeedback(); ok {
		_spec.SetField(upworkfreelancer.FieldUpworkRecentFeedback, field.TypeFloat64, value)
	}
	if value, ok := ufu.mutation.AddedUpworkRecentFeedback(); ok {
		_spec.AddField(upworkfreelancer.FieldUpworkRecentFeedback, field.TypeFloat64, value)
	}
	if value, ok := ufu.mutation.UpworkTopRatedStatus(); ok {
		_spec.SetField(upworkfreelancer.FieldUpworkTopRatedStatus, field.TypeBool, value)
	}
	if value, ok := ufu.mutation.UpworkTopRatedPlusStatus(); ok {
		_spec.SetField(upworkfreelancer.FieldUpworkTopRatedPlusStatus, field.TypeBool, value)
	}
	if value, ok := ufu.mutation.UpworkSponsored(); ok {
		_spec.SetField(upworkfreelancer.FieldUpworkSponsored, field.TypeBool, value)
	}
	if value, ok := ufu.mutation.UpworkJobSuccessScore(); ok {
		_spec.SetField(upworkfreelancer.FieldUpworkJobSuccessScore, field.TypeFloat64, value)
	}
	if value, ok := ufu.mutation.AddedUpworkJobSuccessScore(); ok {
		_spec.AddField(upworkfreelancer.FieldUpworkJobSuccessScore, field.TypeFloat64, value)
	}
	if value, ok := ufu.mutation.UpworkReccomended(); ok {
		_spec.SetField(upworkfreelancer.FieldUpworkReccomended, field.TypeBool, value)
	}
	if value, ok := ufu.mutation.Skills(); ok {
		_spec.SetField(upworkfreelancer.FieldSkills, field.TypeJSON, value)
	}
	if value, ok := ufu.mutation.AppendedSkills(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, upworkfreelancer.FieldSkills, value)
		})
	}
	if value, ok := ufu.mutation.AverageRecentEarnings(); ok {
		_spec.SetField(upworkfreelancer.FieldAverageRecentEarnings, field.TypeFloat64, value)
	}
	if value, ok := ufu.mutation.AddedAverageRecentEarnings(); ok {
		_spec.AddField(upworkfreelancer.FieldAverageRecentEarnings, field.TypeFloat64, value)
	}
	if value, ok := ufu.mutation.CombinedAverageRecentEarnings(); ok {
		_spec.SetField(upworkfreelancer.FieldCombinedAverageRecentEarnings, field.TypeFloat64, value)
	}
	if value, ok := ufu.mutation.AddedCombinedAverageRecentEarnings(); ok {
		_spec.AddField(upworkfreelancer.FieldCombinedAverageRecentEarnings, field.TypeFloat64, value)
	}
	if value, ok := ufu.mutation.CombinedRecentEarnings(); ok {
		_spec.SetField(upworkfreelancer.FieldCombinedRecentEarnings, field.TypeFloat64, value)
	}
	if value, ok := ufu.mutation.AddedCombinedRecentEarnings(); ok {
		_spec.AddField(upworkfreelancer.FieldCombinedRecentEarnings, field.TypeFloat64, value)
	}
	if value, ok := ufu.mutation.CombinedTotalEarnings(); ok {
		_spec.SetField(upworkfreelancer.FieldCombinedTotalEarnings, field.TypeFloat64, value)
	}
	if value, ok := ufu.mutation.AddedCombinedTotalEarnings(); ok {
		_spec.AddField(upworkfreelancer.FieldCombinedTotalEarnings, field.TypeFloat64, value)
	}
	if value, ok := ufu.mutation.CombinedTotalRevenue(); ok {
		_spec.SetField(upworkfreelancer.FieldCombinedTotalRevenue, field.TypeFloat64, value)
	}
	if value, ok := ufu.mutation.AddedCombinedTotalRevenue(); ok {
		_spec.AddField(upworkfreelancer.FieldCombinedTotalRevenue, field.TypeFloat64, value)
	}
	if value, ok := ufu.mutation.RecentEarnings(); ok {
		_spec.SetField(upworkfreelancer.FieldRecentEarnings, field.TypeFloat64, value)
	}
	if value, ok := ufu.mutation.AddedRecentEarnings(); ok {
		_spec.AddField(upworkfreelancer.FieldRecentEarnings, field.TypeFloat64, value)
	}
	if value, ok := ufu.mutation.TotalRevenue(); ok {
		_spec.SetField(upworkfreelancer.FieldTotalRevenue, field.TypeFloat64, value)
	}
	if value, ok := ufu.mutation.AddedTotalRevenue(); ok {
		_spec.AddField(upworkfreelancer.FieldTotalRevenue, field.TypeFloat64, value)
	}
	if value, ok := ufu.mutation.MissingFields(); ok {
		_spec.SetField(upworkfreelancer.FieldMissingFields, field.TypeBool, value)
	}
	if ufu.mutation.UpworkJobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   upworkfreelancer.UpworkJobTable,
			Columns: upworkfreelancer.UpworkJobPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upworkjob.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufu.mutation.RemovedUpworkJobIDs(); len(nodes) > 0 && !ufu.mutation.UpworkJobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   upworkfreelancer.UpworkJobTable,
			Columns: upworkfreelancer.UpworkJobPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upworkjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufu.mutation.UpworkJobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   upworkfreelancer.UpworkJobTable,
			Columns: upworkfreelancer.UpworkJobPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upworkjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ufu.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   upworkfreelancer.AttachmentsTable,
			Columns: []string{upworkfreelancer.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachmentref.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufu.mutation.RemovedAttachmentsIDs(); len(nodes) > 0 && !ufu.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   upworkfreelancer.AttachmentsTable,
			Columns: []string{upworkfreelancer.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachmentref.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufu.mutation.AttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   upworkfreelancer.AttachmentsTable,
			Columns: []string{upworkfreelancer.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachmentref.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ufu.mutation.WorkHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   upworkfreelancer.WorkHistoriesTable,
			Columns: []string{upworkfreelancer.WorkHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workhistory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufu.mutation.RemovedWorkHistoriesIDs(); len(nodes) > 0 && !ufu.mutation.WorkHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   upworkfreelancer.WorkHistoriesTable,
			Columns: []string{upworkfreelancer.WorkHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufu.mutation.WorkHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   upworkfreelancer.WorkHistoriesTable,
			Columns: []string{upworkfreelancer.WorkHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ufu.mutation.FreelancerInferenceDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   upworkfreelancer.FreelancerInferenceDataTable,
			Columns: []string{upworkfreelancer.FreelancerInferenceDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(freelancerinferencedata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufu.mutation.FreelancerInferenceDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   upworkfreelancer.FreelancerInferenceDataTable,
			Columns: []string{upworkfreelancer.FreelancerInferenceDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(freelancerinferencedata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ufu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upworkfreelancer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ufu.mutation.done = true
	return n, nil
}

// UpworkFreelancerUpdateOne is the builder for updating a single UpworkFreelancer entity.
type UpworkFreelancerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpworkFreelancerMutation
}

// SetName sets the "name" field.
func (ufuo *UpworkFreelancerUpdateOne) SetName(s string) *UpworkFreelancerUpdateOne {
	ufuo.mutation.SetName(s)
	return ufuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableName(s *string) *UpworkFreelancerUpdateOne {
	if s != nil {
		ufuo.SetName(*s)
	}
	return ufuo
}

// SetTitle sets the "title" field.
func (ufuo *UpworkFreelancerUpdateOne) SetTitle(s string) *UpworkFreelancerUpdateOne {
	ufuo.mutation.SetTitle(s)
	return ufuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableTitle(s *string) *UpworkFreelancerUpdateOne {
	if s != nil {
		ufuo.SetTitle(*s)
	}
	return ufuo
}

// SetDescription sets the "description" field.
func (ufuo *UpworkFreelancerUpdateOne) SetDescription(s string) *UpworkFreelancerUpdateOne {
	ufuo.mutation.SetDescription(s)
	return ufuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableDescription(s *string) *UpworkFreelancerUpdateOne {
	if s != nil {
		ufuo.SetDescription(*s)
	}
	return ufuo
}

// SetCity sets the "city" field.
func (ufuo *UpworkFreelancerUpdateOne) SetCity(s string) *UpworkFreelancerUpdateOne {
	ufuo.mutation.SetCity(s)
	return ufuo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableCity(s *string) *UpworkFreelancerUpdateOne {
	if s != nil {
		ufuo.SetCity(*s)
	}
	return ufuo
}

// SetCountry sets the "country" field.
func (ufuo *UpworkFreelancerUpdateOne) SetCountry(s string) *UpworkFreelancerUpdateOne {
	ufuo.mutation.SetCountry(s)
	return ufuo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableCountry(s *string) *UpworkFreelancerUpdateOne {
	if s != nil {
		ufuo.SetCountry(*s)
	}
	return ufuo
}

// SetTimezone sets the "timezone" field.
func (ufuo *UpworkFreelancerUpdateOne) SetTimezone(s string) *UpworkFreelancerUpdateOne {
	ufuo.mutation.SetTimezone(s)
	return ufuo
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableTimezone(s *string) *UpworkFreelancerUpdateOne {
	if s != nil {
		ufuo.SetTimezone(*s)
	}
	return ufuo
}

// SetCv sets the "cv" field.
func (ufuo *UpworkFreelancerUpdateOne) SetCv(s string) *UpworkFreelancerUpdateOne {
	ufuo.mutation.SetCv(s)
	return ufuo
}

// SetNillableCv sets the "cv" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableCv(s *string) *UpworkFreelancerUpdateOne {
	if s != nil {
		ufuo.SetCv(*s)
	}
	return ufuo
}

// SetAiReccomended sets the "ai_reccomended" field.
func (ufuo *UpworkFreelancerUpdateOne) SetAiReccomended(b bool) *UpworkFreelancerUpdateOne {
	ufuo.mutation.SetAiReccomended(b)
	return ufuo
}

// SetNillableAiReccomended sets the "ai_reccomended" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableAiReccomended(b *bool) *UpworkFreelancerUpdateOne {
	if b != nil {
		ufuo.SetAiReccomended(*b)
	}
	return ufuo
}

// SetFixedChargeAmount sets the "fixed_charge_amount" field.
func (ufuo *UpworkFreelancerUpdateOne) SetFixedChargeAmount(f float64) *UpworkFreelancerUpdateOne {
	ufuo.mutation.ResetFixedChargeAmount()
	ufuo.mutation.SetFixedChargeAmount(f)
	return ufuo
}

// SetNillableFixedChargeAmount sets the "fixed_charge_amount" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableFixedChargeAmount(f *float64) *UpworkFreelancerUpdateOne {
	if f != nil {
		ufuo.SetFixedChargeAmount(*f)
	}
	return ufuo
}

// AddFixedChargeAmount adds f to the "fixed_charge_amount" field.
func (ufuo *UpworkFreelancerUpdateOne) AddFixedChargeAmount(f float64) *UpworkFreelancerUpdateOne {
	ufuo.mutation.AddFixedChargeAmount(f)
	return ufuo
}

// ClearFixedChargeAmount clears the value of the "fixed_charge_amount" field.
func (ufuo *UpworkFreelancerUpdateOne) ClearFixedChargeAmount() *UpworkFreelancerUpdateOne {
	ufuo.mutation.ClearFixedChargeAmount()
	return ufuo
}

// SetFixedChargeCurrency sets the "fixed_charge_currency" field.
func (ufuo *UpworkFreelancerUpdateOne) SetFixedChargeCurrency(s string) *UpworkFreelancerUpdateOne {
	ufuo.mutation.SetFixedChargeCurrency(s)
	return ufuo
}

// SetNillableFixedChargeCurrency sets the "fixed_charge_currency" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableFixedChargeCurrency(s *string) *UpworkFreelancerUpdateOne {
	if s != nil {
		ufuo.SetFixedChargeCurrency(*s)
	}
	return ufuo
}

// SetHourlyChargeAmount sets the "hourly_charge_amount" field.
func (ufuo *UpworkFreelancerUpdateOne) SetHourlyChargeAmount(f float64) *UpworkFreelancerUpdateOne {
	ufuo.mutation.ResetHourlyChargeAmount()
	ufuo.mutation.SetHourlyChargeAmount(f)
	return ufuo
}

// SetNillableHourlyChargeAmount sets the "hourly_charge_amount" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableHourlyChargeAmount(f *float64) *UpworkFreelancerUpdateOne {
	if f != nil {
		ufuo.SetHourlyChargeAmount(*f)
	}
	return ufuo
}

// AddHourlyChargeAmount adds f to the "hourly_charge_amount" field.
func (ufuo *UpworkFreelancerUpdateOne) AddHourlyChargeAmount(f float64) *UpworkFreelancerUpdateOne {
	ufuo.mutation.AddHourlyChargeAmount(f)
	return ufuo
}

// ClearHourlyChargeAmount clears the value of the "hourly_charge_amount" field.
func (ufuo *UpworkFreelancerUpdateOne) ClearHourlyChargeAmount() *UpworkFreelancerUpdateOne {
	ufuo.mutation.ClearHourlyChargeAmount()
	return ufuo
}

// SetHourlyChargeCurrency sets the "hourly_charge_currency" field.
func (ufuo *UpworkFreelancerUpdateOne) SetHourlyChargeCurrency(s string) *UpworkFreelancerUpdateOne {
	ufuo.mutation.SetHourlyChargeCurrency(s)
	return ufuo
}

// SetNillableHourlyChargeCurrency sets the "hourly_charge_currency" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableHourlyChargeCurrency(s *string) *UpworkFreelancerUpdateOne {
	if s != nil {
		ufuo.SetHourlyChargeCurrency(*s)
	}
	return ufuo
}

// SetInvited sets the "invited" field.
func (ufuo *UpworkFreelancerUpdateOne) SetInvited(b bool) *UpworkFreelancerUpdateOne {
	ufuo.mutation.SetInvited(b)
	return ufuo
}

// SetNillableInvited sets the "invited" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableInvited(b *bool) *UpworkFreelancerUpdateOne {
	if b != nil {
		ufuo.SetInvited(*b)
	}
	return ufuo
}

// SetPhotoURL sets the "photo_url" field.
func (ufuo *UpworkFreelancerUpdateOne) SetPhotoURL(s string) *UpworkFreelancerUpdateOne {
	ufuo.mutation.SetPhotoURL(s)
	return ufuo
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillablePhotoURL(s *string) *UpworkFreelancerUpdateOne {
	if s != nil {
		ufuo.SetPhotoURL(*s)
	}
	return ufuo
}

// SetRecentHours sets the "recent_hours" field.
func (ufuo *UpworkFreelancerUpdateOne) SetRecentHours(f float64) *UpworkFreelancerUpdateOne {
	ufuo.mutation.ResetRecentHours()
	ufuo.mutation.SetRecentHours(f)
	return ufuo
}

// SetNillableRecentHours sets the "recent_hours" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableRecentHours(f *float64) *UpworkFreelancerUpdateOne {
	if f != nil {
		ufuo.SetRecentHours(*f)
	}
	return ufuo
}

// AddRecentHours adds f to the "recent_hours" field.
func (ufuo *UpworkFreelancerUpdateOne) AddRecentHours(f float64) *UpworkFreelancerUpdateOne {
	ufuo.mutation.AddRecentHours(f)
	return ufuo
}

// SetTotalHours sets the "total_hours" field.
func (ufuo *UpworkFreelancerUpdateOne) SetTotalHours(f float64) *UpworkFreelancerUpdateOne {
	ufuo.mutation.ResetTotalHours()
	ufuo.mutation.SetTotalHours(f)
	return ufuo
}

// SetNillableTotalHours sets the "total_hours" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableTotalHours(f *float64) *UpworkFreelancerUpdateOne {
	if f != nil {
		ufuo.SetTotalHours(*f)
	}
	return ufuo
}

// AddTotalHours adds f to the "total_hours" field.
func (ufuo *UpworkFreelancerUpdateOne) AddTotalHours(f float64) *UpworkFreelancerUpdateOne {
	ufuo.mutation.AddTotalHours(f)
	return ufuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ufuo *UpworkFreelancerUpdateOne) SetUpdatedAt(t time.Time) *UpworkFreelancerUpdateOne {
	ufuo.mutation.SetUpdatedAt(t)
	return ufuo
}

// SetEmbeddedAt sets the "embedded_at" field.
func (ufuo *UpworkFreelancerUpdateOne) SetEmbeddedAt(t time.Time) *UpworkFreelancerUpdateOne {
	ufuo.mutation.SetEmbeddedAt(t)
	return ufuo
}

// SetNillableEmbeddedAt sets the "embedded_at" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableEmbeddedAt(t *time.Time) *UpworkFreelancerUpdateOne {
	if t != nil {
		ufuo.SetEmbeddedAt(*t)
	}
	return ufuo
}

// ClearEmbeddedAt clears the value of the "embedded_at" field.
func (ufuo *UpworkFreelancerUpdateOne) ClearEmbeddedAt() *UpworkFreelancerUpdateOne {
	ufuo.mutation.ClearEmbeddedAt()
	return ufuo
}

// SetTotalPortfolioItems sets the "total_portfolio_items" field.
func (ufuo *UpworkFreelancerUpdateOne) SetTotalPortfolioItems(i int) *UpworkFreelancerUpdateOne {
	ufuo.mutation.ResetTotalPortfolioItems()
	ufuo.mutation.SetTotalPortfolioItems(i)
	return ufuo
}

// SetNillableTotalPortfolioItems sets the "total_portfolio_items" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableTotalPortfolioItems(i *int) *UpworkFreelancerUpdateOne {
	if i != nil {
		ufuo.SetTotalPortfolioItems(*i)
	}
	return ufuo
}

// AddTotalPortfolioItems adds i to the "total_portfolio_items" field.
func (ufuo *UpworkFreelancerUpdateOne) AddTotalPortfolioItems(i int) *UpworkFreelancerUpdateOne {
	ufuo.mutation.AddTotalPortfolioItems(i)
	return ufuo
}

// SetTotalPortfolioV2Items sets the "total_portfolio_v2_items" field.
func (ufuo *UpworkFreelancerUpdateOne) SetTotalPortfolioV2Items(i int) *UpworkFreelancerUpdateOne {
	ufuo.mutation.ResetTotalPortfolioV2Items()
	ufuo.mutation.SetTotalPortfolioV2Items(i)
	return ufuo
}

// SetNillableTotalPortfolioV2Items sets the "total_portfolio_v2_items" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableTotalPortfolioV2Items(i *int) *UpworkFreelancerUpdateOne {
	if i != nil {
		ufuo.SetTotalPortfolioV2Items(*i)
	}
	return ufuo
}

// AddTotalPortfolioV2Items adds i to the "total_portfolio_v2_items" field.
func (ufuo *UpworkFreelancerUpdateOne) AddTotalPortfolioV2Items(i int) *UpworkFreelancerUpdateOne {
	ufuo.mutation.AddTotalPortfolioV2Items(i)
	return ufuo
}

// SetUpworkTotalFeedback sets the "upwork_total_feedback" field.
func (ufuo *UpworkFreelancerUpdateOne) SetUpworkTotalFeedback(f float64) *UpworkFreelancerUpdateOne {
	ufuo.mutation.ResetUpworkTotalFeedback()
	ufuo.mutation.SetUpworkTotalFeedback(f)
	return ufuo
}

// SetNillableUpworkTotalFeedback sets the "upwork_total_feedback" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableUpworkTotalFeedback(f *float64) *UpworkFreelancerUpdateOne {
	if f != nil {
		ufuo.SetUpworkTotalFeedback(*f)
	}
	return ufuo
}

// AddUpworkTotalFeedback adds f to the "upwork_total_feedback" field.
func (ufuo *UpworkFreelancerUpdateOne) AddUpworkTotalFeedback(f float64) *UpworkFreelancerUpdateOne {
	ufuo.mutation.AddUpworkTotalFeedback(f)
	return ufuo
}

// SetUpworkRecentFeedback sets the "upwork_recent_feedback" field.
func (ufuo *UpworkFreelancerUpdateOne) SetUpworkRecentFeedback(f float64) *UpworkFreelancerUpdateOne {
	ufuo.mutation.ResetUpworkRecentFeedback()
	ufuo.mutation.SetUpworkRecentFeedback(f)
	return ufuo
}

// SetNillableUpworkRecentFeedback sets the "upwork_recent_feedback" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableUpworkRecentFeedback(f *float64) *UpworkFreelancerUpdateOne {
	if f != nil {
		ufuo.SetUpworkRecentFeedback(*f)
	}
	return ufuo
}

// AddUpworkRecentFeedback adds f to the "upwork_recent_feedback" field.
func (ufuo *UpworkFreelancerUpdateOne) AddUpworkRecentFeedback(f float64) *UpworkFreelancerUpdateOne {
	ufuo.mutation.AddUpworkRecentFeedback(f)
	return ufuo
}

// SetUpworkTopRatedStatus sets the "upwork_top_rated_status" field.
func (ufuo *UpworkFreelancerUpdateOne) SetUpworkTopRatedStatus(b bool) *UpworkFreelancerUpdateOne {
	ufuo.mutation.SetUpworkTopRatedStatus(b)
	return ufuo
}

// SetNillableUpworkTopRatedStatus sets the "upwork_top_rated_status" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableUpworkTopRatedStatus(b *bool) *UpworkFreelancerUpdateOne {
	if b != nil {
		ufuo.SetUpworkTopRatedStatus(*b)
	}
	return ufuo
}

// SetUpworkTopRatedPlusStatus sets the "upwork_top_rated_plus_status" field.
func (ufuo *UpworkFreelancerUpdateOne) SetUpworkTopRatedPlusStatus(b bool) *UpworkFreelancerUpdateOne {
	ufuo.mutation.SetUpworkTopRatedPlusStatus(b)
	return ufuo
}

// SetNillableUpworkTopRatedPlusStatus sets the "upwork_top_rated_plus_status" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableUpworkTopRatedPlusStatus(b *bool) *UpworkFreelancerUpdateOne {
	if b != nil {
		ufuo.SetUpworkTopRatedPlusStatus(*b)
	}
	return ufuo
}

// SetUpworkSponsored sets the "upwork_sponsored" field.
func (ufuo *UpworkFreelancerUpdateOne) SetUpworkSponsored(b bool) *UpworkFreelancerUpdateOne {
	ufuo.mutation.SetUpworkSponsored(b)
	return ufuo
}

// SetNillableUpworkSponsored sets the "upwork_sponsored" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableUpworkSponsored(b *bool) *UpworkFreelancerUpdateOne {
	if b != nil {
		ufuo.SetUpworkSponsored(*b)
	}
	return ufuo
}

// SetUpworkJobSuccessScore sets the "upwork_job_success_score" field.
func (ufuo *UpworkFreelancerUpdateOne) SetUpworkJobSuccessScore(f float64) *UpworkFreelancerUpdateOne {
	ufuo.mutation.ResetUpworkJobSuccessScore()
	ufuo.mutation.SetUpworkJobSuccessScore(f)
	return ufuo
}

// SetNillableUpworkJobSuccessScore sets the "upwork_job_success_score" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableUpworkJobSuccessScore(f *float64) *UpworkFreelancerUpdateOne {
	if f != nil {
		ufuo.SetUpworkJobSuccessScore(*f)
	}
	return ufuo
}

// AddUpworkJobSuccessScore adds f to the "upwork_job_success_score" field.
func (ufuo *UpworkFreelancerUpdateOne) AddUpworkJobSuccessScore(f float64) *UpworkFreelancerUpdateOne {
	ufuo.mutation.AddUpworkJobSuccessScore(f)
	return ufuo
}

// SetUpworkReccomended sets the "upwork_reccomended" field.
func (ufuo *UpworkFreelancerUpdateOne) SetUpworkReccomended(b bool) *UpworkFreelancerUpdateOne {
	ufuo.mutation.SetUpworkReccomended(b)
	return ufuo
}

// SetNillableUpworkReccomended sets the "upwork_reccomended" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableUpworkReccomended(b *bool) *UpworkFreelancerUpdateOne {
	if b != nil {
		ufuo.SetUpworkReccomended(*b)
	}
	return ufuo
}

// SetSkills sets the "skills" field.
func (ufuo *UpworkFreelancerUpdateOne) SetSkills(s []string) *UpworkFreelancerUpdateOne {
	ufuo.mutation.SetSkills(s)
	return ufuo
}

// AppendSkills appends s to the "skills" field.
func (ufuo *UpworkFreelancerUpdateOne) AppendSkills(s []string) *UpworkFreelancerUpdateOne {
	ufuo.mutation.AppendSkills(s)
	return ufuo
}

// SetAverageRecentEarnings sets the "average_recent_earnings" field.
func (ufuo *UpworkFreelancerUpdateOne) SetAverageRecentEarnings(f float64) *UpworkFreelancerUpdateOne {
	ufuo.mutation.ResetAverageRecentEarnings()
	ufuo.mutation.SetAverageRecentEarnings(f)
	return ufuo
}

// SetNillableAverageRecentEarnings sets the "average_recent_earnings" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableAverageRecentEarnings(f *float64) *UpworkFreelancerUpdateOne {
	if f != nil {
		ufuo.SetAverageRecentEarnings(*f)
	}
	return ufuo
}

// AddAverageRecentEarnings adds f to the "average_recent_earnings" field.
func (ufuo *UpworkFreelancerUpdateOne) AddAverageRecentEarnings(f float64) *UpworkFreelancerUpdateOne {
	ufuo.mutation.AddAverageRecentEarnings(f)
	return ufuo
}

// SetCombinedAverageRecentEarnings sets the "combined_average_recent_earnings" field.
func (ufuo *UpworkFreelancerUpdateOne) SetCombinedAverageRecentEarnings(f float64) *UpworkFreelancerUpdateOne {
	ufuo.mutation.ResetCombinedAverageRecentEarnings()
	ufuo.mutation.SetCombinedAverageRecentEarnings(f)
	return ufuo
}

// SetNillableCombinedAverageRecentEarnings sets the "combined_average_recent_earnings" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableCombinedAverageRecentEarnings(f *float64) *UpworkFreelancerUpdateOne {
	if f != nil {
		ufuo.SetCombinedAverageRecentEarnings(*f)
	}
	return ufuo
}

// AddCombinedAverageRecentEarnings adds f to the "combined_average_recent_earnings" field.
func (ufuo *UpworkFreelancerUpdateOne) AddCombinedAverageRecentEarnings(f float64) *UpworkFreelancerUpdateOne {
	ufuo.mutation.AddCombinedAverageRecentEarnings(f)
	return ufuo
}

// SetCombinedRecentEarnings sets the "combined_recent_earnings" field.
func (ufuo *UpworkFreelancerUpdateOne) SetCombinedRecentEarnings(f float64) *UpworkFreelancerUpdateOne {
	ufuo.mutation.ResetCombinedRecentEarnings()
	ufuo.mutation.SetCombinedRecentEarnings(f)
	return ufuo
}

// SetNillableCombinedRecentEarnings sets the "combined_recent_earnings" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableCombinedRecentEarnings(f *float64) *UpworkFreelancerUpdateOne {
	if f != nil {
		ufuo.SetCombinedRecentEarnings(*f)
	}
	return ufuo
}

// AddCombinedRecentEarnings adds f to the "combined_recent_earnings" field.
func (ufuo *UpworkFreelancerUpdateOne) AddCombinedRecentEarnings(f float64) *UpworkFreelancerUpdateOne {
	ufuo.mutation.AddCombinedRecentEarnings(f)
	return ufuo
}

// SetCombinedTotalEarnings sets the "combined_total_earnings" field.
func (ufuo *UpworkFreelancerUpdateOne) SetCombinedTotalEarnings(f float64) *UpworkFreelancerUpdateOne {
	ufuo.mutation.ResetCombinedTotalEarnings()
	ufuo.mutation.SetCombinedTotalEarnings(f)
	return ufuo
}

// SetNillableCombinedTotalEarnings sets the "combined_total_earnings" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableCombinedTotalEarnings(f *float64) *UpworkFreelancerUpdateOne {
	if f != nil {
		ufuo.SetCombinedTotalEarnings(*f)
	}
	return ufuo
}

// AddCombinedTotalEarnings adds f to the "combined_total_earnings" field.
func (ufuo *UpworkFreelancerUpdateOne) AddCombinedTotalEarnings(f float64) *UpworkFreelancerUpdateOne {
	ufuo.mutation.AddCombinedTotalEarnings(f)
	return ufuo
}

// SetCombinedTotalRevenue sets the "combined_total_revenue" field.
func (ufuo *UpworkFreelancerUpdateOne) SetCombinedTotalRevenue(f float64) *UpworkFreelancerUpdateOne {
	ufuo.mutation.ResetCombinedTotalRevenue()
	ufuo.mutation.SetCombinedTotalRevenue(f)
	return ufuo
}

// SetNillableCombinedTotalRevenue sets the "combined_total_revenue" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableCombinedTotalRevenue(f *float64) *UpworkFreelancerUpdateOne {
	if f != nil {
		ufuo.SetCombinedTotalRevenue(*f)
	}
	return ufuo
}

// AddCombinedTotalRevenue adds f to the "combined_total_revenue" field.
func (ufuo *UpworkFreelancerUpdateOne) AddCombinedTotalRevenue(f float64) *UpworkFreelancerUpdateOne {
	ufuo.mutation.AddCombinedTotalRevenue(f)
	return ufuo
}

// SetRecentEarnings sets the "recent_earnings" field.
func (ufuo *UpworkFreelancerUpdateOne) SetRecentEarnings(f float64) *UpworkFreelancerUpdateOne {
	ufuo.mutation.ResetRecentEarnings()
	ufuo.mutation.SetRecentEarnings(f)
	return ufuo
}

// SetNillableRecentEarnings sets the "recent_earnings" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableRecentEarnings(f *float64) *UpworkFreelancerUpdateOne {
	if f != nil {
		ufuo.SetRecentEarnings(*f)
	}
	return ufuo
}

// AddRecentEarnings adds f to the "recent_earnings" field.
func (ufuo *UpworkFreelancerUpdateOne) AddRecentEarnings(f float64) *UpworkFreelancerUpdateOne {
	ufuo.mutation.AddRecentEarnings(f)
	return ufuo
}

// SetTotalRevenue sets the "total_revenue" field.
func (ufuo *UpworkFreelancerUpdateOne) SetTotalRevenue(f float64) *UpworkFreelancerUpdateOne {
	ufuo.mutation.ResetTotalRevenue()
	ufuo.mutation.SetTotalRevenue(f)
	return ufuo
}

// SetNillableTotalRevenue sets the "total_revenue" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableTotalRevenue(f *float64) *UpworkFreelancerUpdateOne {
	if f != nil {
		ufuo.SetTotalRevenue(*f)
	}
	return ufuo
}

// AddTotalRevenue adds f to the "total_revenue" field.
func (ufuo *UpworkFreelancerUpdateOne) AddTotalRevenue(f float64) *UpworkFreelancerUpdateOne {
	ufuo.mutation.AddTotalRevenue(f)
	return ufuo
}

// SetMissingFields sets the "missing_fields" field.
func (ufuo *UpworkFreelancerUpdateOne) SetMissingFields(b bool) *UpworkFreelancerUpdateOne {
	ufuo.mutation.SetMissingFields(b)
	return ufuo
}

// SetNillableMissingFields sets the "missing_fields" field if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableMissingFields(b *bool) *UpworkFreelancerUpdateOne {
	if b != nil {
		ufuo.SetMissingFields(*b)
	}
	return ufuo
}

// AddUpworkJobIDs adds the "upwork_job" edge to the UpworkJob entity by IDs.
func (ufuo *UpworkFreelancerUpdateOne) AddUpworkJobIDs(ids ...string) *UpworkFreelancerUpdateOne {
	ufuo.mutation.AddUpworkJobIDs(ids...)
	return ufuo
}

// AddUpworkJob adds the "upwork_job" edges to the UpworkJob entity.
func (ufuo *UpworkFreelancerUpdateOne) AddUpworkJob(u ...*UpworkJob) *UpworkFreelancerUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ufuo.AddUpworkJobIDs(ids...)
}

// AddAttachmentIDs adds the "attachments" edge to the AttachmentRef entity by IDs.
func (ufuo *UpworkFreelancerUpdateOne) AddAttachmentIDs(ids ...int) *UpworkFreelancerUpdateOne {
	ufuo.mutation.AddAttachmentIDs(ids...)
	return ufuo
}

// AddAttachments adds the "attachments" edges to the AttachmentRef entity.
func (ufuo *UpworkFreelancerUpdateOne) AddAttachments(a ...*AttachmentRef) *UpworkFreelancerUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ufuo.AddAttachmentIDs(ids...)
}

// AddWorkHistoryIDs adds the "work_histories" edge to the WorkHistory entity by IDs.
func (ufuo *UpworkFreelancerUpdateOne) AddWorkHistoryIDs(ids ...int) *UpworkFreelancerUpdateOne {
	ufuo.mutation.AddWorkHistoryIDs(ids...)
	return ufuo
}

// AddWorkHistories adds the "work_histories" edges to the WorkHistory entity.
func (ufuo *UpworkFreelancerUpdateOne) AddWorkHistories(w ...*WorkHistory) *UpworkFreelancerUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return ufuo.AddWorkHistoryIDs(ids...)
}

// SetFreelancerInferenceDataID sets the "freelancer_inference_data" edge to the FreelancerInferenceData entity by ID.
func (ufuo *UpworkFreelancerUpdateOne) SetFreelancerInferenceDataID(id int) *UpworkFreelancerUpdateOne {
	ufuo.mutation.SetFreelancerInferenceDataID(id)
	return ufuo
}

// SetNillableFreelancerInferenceDataID sets the "freelancer_inference_data" edge to the FreelancerInferenceData entity by ID if the given value is not nil.
func (ufuo *UpworkFreelancerUpdateOne) SetNillableFreelancerInferenceDataID(id *int) *UpworkFreelancerUpdateOne {
	if id != nil {
		ufuo = ufuo.SetFreelancerInferenceDataID(*id)
	}
	return ufuo
}

// SetFreelancerInferenceData sets the "freelancer_inference_data" edge to the FreelancerInferenceData entity.
func (ufuo *UpworkFreelancerUpdateOne) SetFreelancerInferenceData(f *FreelancerInferenceData) *UpworkFreelancerUpdateOne {
	return ufuo.SetFreelancerInferenceDataID(f.ID)
}

// Mutation returns the UpworkFreelancerMutation object of the builder.
func (ufuo *UpworkFreelancerUpdateOne) Mutation() *UpworkFreelancerMutation {
	return ufuo.mutation
}

// ClearUpworkJob clears all "upwork_job" edges to the UpworkJob entity.
func (ufuo *UpworkFreelancerUpdateOne) ClearUpworkJob() *UpworkFreelancerUpdateOne {
	ufuo.mutation.ClearUpworkJob()
	return ufuo
}

// RemoveUpworkJobIDs removes the "upwork_job" edge to UpworkJob entities by IDs.
func (ufuo *UpworkFreelancerUpdateOne) RemoveUpworkJobIDs(ids ...string) *UpworkFreelancerUpdateOne {
	ufuo.mutation.RemoveUpworkJobIDs(ids...)
	return ufuo
}

// RemoveUpworkJob removes "upwork_job" edges to UpworkJob entities.
func (ufuo *UpworkFreelancerUpdateOne) RemoveUpworkJob(u ...*UpworkJob) *UpworkFreelancerUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ufuo.RemoveUpworkJobIDs(ids...)
}

// ClearAttachments clears all "attachments" edges to the AttachmentRef entity.
func (ufuo *UpworkFreelancerUpdateOne) ClearAttachments() *UpworkFreelancerUpdateOne {
	ufuo.mutation.ClearAttachments()
	return ufuo
}

// RemoveAttachmentIDs removes the "attachments" edge to AttachmentRef entities by IDs.
func (ufuo *UpworkFreelancerUpdateOne) RemoveAttachmentIDs(ids ...int) *UpworkFreelancerUpdateOne {
	ufuo.mutation.RemoveAttachmentIDs(ids...)
	return ufuo
}

// RemoveAttachments removes "attachments" edges to AttachmentRef entities.
func (ufuo *UpworkFreelancerUpdateOne) RemoveAttachments(a ...*AttachmentRef) *UpworkFreelancerUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ufuo.RemoveAttachmentIDs(ids...)
}

// ClearWorkHistories clears all "work_histories" edges to the WorkHistory entity.
func (ufuo *UpworkFreelancerUpdateOne) ClearWorkHistories() *UpworkFreelancerUpdateOne {
	ufuo.mutation.ClearWorkHistories()
	return ufuo
}

// RemoveWorkHistoryIDs removes the "work_histories" edge to WorkHistory entities by IDs.
func (ufuo *UpworkFreelancerUpdateOne) RemoveWorkHistoryIDs(ids ...int) *UpworkFreelancerUpdateOne {
	ufuo.mutation.RemoveWorkHistoryIDs(ids...)
	return ufuo
}

// RemoveWorkHistories removes "work_histories" edges to WorkHistory entities.
func (ufuo *UpworkFreelancerUpdateOne) RemoveWorkHistories(w ...*WorkHistory) *UpworkFreelancerUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return ufuo.RemoveWorkHistoryIDs(ids...)
}

// ClearFreelancerInferenceData clears the "freelancer_inference_data" edge to the FreelancerInferenceData entity.
func (ufuo *UpworkFreelancerUpdateOne) ClearFreelancerInferenceData() *UpworkFreelancerUpdateOne {
	ufuo.mutation.ClearFreelancerInferenceData()
	return ufuo
}

// Where appends a list predicates to the UpworkFreelancerUpdate builder.
func (ufuo *UpworkFreelancerUpdateOne) Where(ps ...predicate.UpworkFreelancer) *UpworkFreelancerUpdateOne {
	ufuo.mutation.Where(ps...)
	return ufuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ufuo *UpworkFreelancerUpdateOne) Select(field string, fields ...string) *UpworkFreelancerUpdateOne {
	ufuo.fields = append([]string{field}, fields...)
	return ufuo
}

// Save executes the query and returns the updated UpworkFreelancer entity.
func (ufuo *UpworkFreelancerUpdateOne) Save(ctx context.Context) (*UpworkFreelancer, error) {
	ufuo.defaults()
	return withHooks(ctx, ufuo.sqlSave, ufuo.mutation, ufuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ufuo *UpworkFreelancerUpdateOne) SaveX(ctx context.Context) *UpworkFreelancer {
	node, err := ufuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ufuo *UpworkFreelancerUpdateOne) Exec(ctx context.Context) error {
	_, err := ufuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufuo *UpworkFreelancerUpdateOne) ExecX(ctx context.Context) {
	if err := ufuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ufuo *UpworkFreelancerUpdateOne) defaults() {
	if _, ok := ufuo.mutation.UpdatedAt(); !ok {
		v := upworkfreelancer.UpdateDefaultUpdatedAt()
		ufuo.mutation.SetUpdatedAt(v)
	}
}

func (ufuo *UpworkFreelancerUpdateOne) sqlSave(ctx context.Context) (_node *UpworkFreelancer, err error) {
	_spec := sqlgraph.NewUpdateSpec(upworkfreelancer.Table, upworkfreelancer.Columns, sqlgraph.NewFieldSpec(upworkfreelancer.FieldID, field.TypeString))
	id, ok := ufuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpworkFreelancer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ufuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upworkfreelancer.FieldID)
		for _, f := range fields {
			if !upworkfreelancer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upworkfreelancer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ufuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ufuo.mutation.Name(); ok {
		_spec.SetField(upworkfreelancer.FieldName, field.TypeString, value)
	}
	if value, ok := ufuo.mutation.Title(); ok {
		_spec.SetField(upworkfreelancer.FieldTitle, field.TypeString, value)
	}
	if value, ok := ufuo.mutation.Description(); ok {
		_spec.SetField(upworkfreelancer.FieldDescription, field.TypeString, value)
	}
	if value, ok := ufuo.mutation.City(); ok {
		_spec.SetField(upworkfreelancer.FieldCity, field.TypeString, value)
	}
	if value, ok := ufuo.mutation.Country(); ok {
		_spec.SetField(upworkfreelancer.FieldCountry, field.TypeString, value)
	}
	if value, ok := ufuo.mutation.Timezone(); ok {
		_spec.SetField(upworkfreelancer.FieldTimezone, field.TypeString, value)
	}
	if value, ok := ufuo.mutation.Cv(); ok {
		_spec.SetField(upworkfreelancer.FieldCv, field.TypeString, value)
	}
	if value, ok := ufuo.mutation.AiReccomended(); ok {
		_spec.SetField(upworkfreelancer.FieldAiReccomended, field.TypeBool, value)
	}
	if value, ok := ufuo.mutation.FixedChargeAmount(); ok {
		_spec.SetField(upworkfreelancer.FieldFixedChargeAmount, field.TypeFloat64, value)
	}
	if value, ok := ufuo.mutation.AddedFixedChargeAmount(); ok {
		_spec.AddField(upworkfreelancer.FieldFixedChargeAmount, field.TypeFloat64, value)
	}
	if ufuo.mutation.FixedChargeAmountCleared() {
		_spec.ClearField(upworkfreelancer.FieldFixedChargeAmount, field.TypeFloat64)
	}
	if value, ok := ufuo.mutation.FixedChargeCurrency(); ok {
		_spec.SetField(upworkfreelancer.FieldFixedChargeCurrency, field.TypeString, value)
	}
	if value, ok := ufuo.mutation.HourlyChargeAmount(); ok {
		_spec.SetField(upworkfreelancer.FieldHourlyChargeAmount, field.TypeFloat64, value)
	}
	if value, ok := ufuo.mutation.AddedHourlyChargeAmount(); ok {
		_spec.AddField(upworkfreelancer.FieldHourlyChargeAmount, field.TypeFloat64, value)
	}
	if ufuo.mutation.HourlyChargeAmountCleared() {
		_spec.ClearField(upworkfreelancer.FieldHourlyChargeAmount, field.TypeFloat64)
	}
	if value, ok := ufuo.mutation.HourlyChargeCurrency(); ok {
		_spec.SetField(upworkfreelancer.FieldHourlyChargeCurrency, field.TypeString, value)
	}
	if value, ok := ufuo.mutation.Invited(); ok {
		_spec.SetField(upworkfreelancer.FieldInvited, field.TypeBool, value)
	}
	if value, ok := ufuo.mutation.PhotoURL(); ok {
		_spec.SetField(upworkfreelancer.FieldPhotoURL, field.TypeString, value)
	}
	if value, ok := ufuo.mutation.RecentHours(); ok {
		_spec.SetField(upworkfreelancer.FieldRecentHours, field.TypeFloat64, value)
	}
	if value, ok := ufuo.mutation.AddedRecentHours(); ok {
		_spec.AddField(upworkfreelancer.FieldRecentHours, field.TypeFloat64, value)
	}
	if value, ok := ufuo.mutation.TotalHours(); ok {
		_spec.SetField(upworkfreelancer.FieldTotalHours, field.TypeFloat64, value)
	}
	if value, ok := ufuo.mutation.AddedTotalHours(); ok {
		_spec.AddField(upworkfreelancer.FieldTotalHours, field.TypeFloat64, value)
	}
	if value, ok := ufuo.mutation.UpdatedAt(); ok {
		_spec.SetField(upworkfreelancer.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ufuo.mutation.EmbeddedAt(); ok {
		_spec.SetField(upworkfreelancer.FieldEmbeddedAt, field.TypeTime, value)
	}
	if ufuo.mutation.EmbeddedAtCleared() {
		_spec.ClearField(upworkfreelancer.FieldEmbeddedAt, field.TypeTime)
	}
	if value, ok := ufuo.mutation.TotalPortfolioItems(); ok {
		_spec.SetField(upworkfreelancer.FieldTotalPortfolioItems, field.TypeInt, value)
	}
	if value, ok := ufuo.mutation.AddedTotalPortfolioItems(); ok {
		_spec.AddField(upworkfreelancer.FieldTotalPortfolioItems, field.TypeInt, value)
	}
	if value, ok := ufuo.mutation.TotalPortfolioV2Items(); ok {
		_spec.SetField(upworkfreelancer.FieldTotalPortfolioV2Items, field.TypeInt, value)
	}
	if value, ok := ufuo.mutation.AddedTotalPortfolioV2Items(); ok {
		_spec.AddField(upworkfreelancer.FieldTotalPortfolioV2Items, field.TypeInt, value)
	}
	if value, ok := ufuo.mutation.UpworkTotalFeedback(); ok {
		_spec.SetField(upworkfreelancer.FieldUpworkTotalFeedback, field.TypeFloat64, value)
	}
	if value, ok := ufuo.mutation.AddedUpworkTotalFeedback(); ok {
		_spec.AddField(upworkfreelancer.FieldUpworkTotalFeedback, field.TypeFloat64, value)
	}
	if value, ok := ufuo.mutation.UpworkRecentFeedback(); ok {
		_spec.SetField(upworkfreelancer.FieldUpworkRecentFeedback, field.TypeFloat64, value)
	}
	if value, ok := ufuo.mutation.AddedUpworkRecentFeedback(); ok {
		_spec.AddField(upworkfreelancer.FieldUpworkRecentFeedback, field.TypeFloat64, value)
	}
	if value, ok := ufuo.mutation.UpworkTopRatedStatus(); ok {
		_spec.SetField(upworkfreelancer.FieldUpworkTopRatedStatus, field.TypeBool, value)
	}
	if value, ok := ufuo.mutation.UpworkTopRatedPlusStatus(); ok {
		_spec.SetField(upworkfreelancer.FieldUpworkTopRatedPlusStatus, field.TypeBool, value)
	}
	if value, ok := ufuo.mutation.UpworkSponsored(); ok {
		_spec.SetField(upworkfreelancer.FieldUpworkSponsored, field.TypeBool, value)
	}
	if value, ok := ufuo.mutation.UpworkJobSuccessScore(); ok {
		_spec.SetField(upworkfreelancer.FieldUpworkJobSuccessScore, field.TypeFloat64, value)
	}
	if value, ok := ufuo.mutation.AddedUpworkJobSuccessScore(); ok {
		_spec.AddField(upworkfreelancer.FieldUpworkJobSuccessScore, field.TypeFloat64, value)
	}
	if value, ok := ufuo.mutation.UpworkReccomended(); ok {
		_spec.SetField(upworkfreelancer.FieldUpworkReccomended, field.TypeBool, value)
	}
	if value, ok := ufuo.mutation.Skills(); ok {
		_spec.SetField(upworkfreelancer.FieldSkills, field.TypeJSON, value)
	}
	if value, ok := ufuo.mutation.AppendedSkills(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, upworkfreelancer.FieldSkills, value)
		})
	}
	if value, ok := ufuo.mutation.AverageRecentEarnings(); ok {
		_spec.SetField(upworkfreelancer.FieldAverageRecentEarnings, field.TypeFloat64, value)
	}
	if value, ok := ufuo.mutation.AddedAverageRecentEarnings(); ok {
		_spec.AddField(upworkfreelancer.FieldAverageRecentEarnings, field.TypeFloat64, value)
	}
	if value, ok := ufuo.mutation.CombinedAverageRecentEarnings(); ok {
		_spec.SetField(upworkfreelancer.FieldCombinedAverageRecentEarnings, field.TypeFloat64, value)
	}
	if value, ok := ufuo.mutation.AddedCombinedAverageRecentEarnings(); ok {
		_spec.AddField(upworkfreelancer.FieldCombinedAverageRecentEarnings, field.TypeFloat64, value)
	}
	if value, ok := ufuo.mutation.CombinedRecentEarnings(); ok {
		_spec.SetField(upworkfreelancer.FieldCombinedRecentEarnings, field.TypeFloat64, value)
	}
	if value, ok := ufuo.mutation.AddedCombinedRecentEarnings(); ok {
		_spec.AddField(upworkfreelancer.FieldCombinedRecentEarnings, field.TypeFloat64, value)
	}
	if value, ok := ufuo.mutation.CombinedTotalEarnings(); ok {
		_spec.SetField(upworkfreelancer.FieldCombinedTotalEarnings, field.TypeFloat64, value)
	}
	if value, ok := ufuo.mutation.AddedCombinedTotalEarnings(); ok {
		_spec.AddField(upworkfreelancer.FieldCombinedTotalEarnings, field.TypeFloat64, value)
	}
	if value, ok := ufuo.mutation.CombinedTotalRevenue(); ok {
		_spec.SetField(upworkfreelancer.FieldCombinedTotalRevenue, field.TypeFloat64, value)
	}
	if value, ok := ufuo.mutation.AddedCombinedTotalRevenue(); ok {
		_spec.AddField(upworkfreelancer.FieldCombinedTotalRevenue, field.TypeFloat64, value)
	}
	if value, ok := ufuo.mutation.RecentEarnings(); ok {
		_spec.SetField(upworkfreelancer.FieldRecentEarnings, field.TypeFloat64, value)
	}
	if value, ok := ufuo.mutation.AddedRecentEarnings(); ok {
		_spec.AddField(upworkfreelancer.FieldRecentEarnings, field.TypeFloat64, value)
	}
	if value, ok := ufuo.mutation.TotalRevenue(); ok {
		_spec.SetField(upworkfreelancer.FieldTotalRevenue, field.TypeFloat64, value)
	}
	if value, ok := ufuo.mutation.AddedTotalRevenue(); ok {
		_spec.AddField(upworkfreelancer.FieldTotalRevenue, field.TypeFloat64, value)
	}
	if value, ok := ufuo.mutation.MissingFields(); ok {
		_spec.SetField(upworkfreelancer.FieldMissingFields, field.TypeBool, value)
	}
	if ufuo.mutation.UpworkJobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   upworkfreelancer.UpworkJobTable,
			Columns: upworkfreelancer.UpworkJobPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upworkjob.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufuo.mutation.RemovedUpworkJobIDs(); len(nodes) > 0 && !ufuo.mutation.UpworkJobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   upworkfreelancer.UpworkJobTable,
			Columns: upworkfreelancer.UpworkJobPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upworkjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufuo.mutation.UpworkJobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   upworkfreelancer.UpworkJobTable,
			Columns: upworkfreelancer.UpworkJobPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upworkjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ufuo.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   upworkfreelancer.AttachmentsTable,
			Columns: []string{upworkfreelancer.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachmentref.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufuo.mutation.RemovedAttachmentsIDs(); len(nodes) > 0 && !ufuo.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   upworkfreelancer.AttachmentsTable,
			Columns: []string{upworkfreelancer.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachmentref.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufuo.mutation.AttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   upworkfreelancer.AttachmentsTable,
			Columns: []string{upworkfreelancer.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachmentref.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ufuo.mutation.WorkHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   upworkfreelancer.WorkHistoriesTable,
			Columns: []string{upworkfreelancer.WorkHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workhistory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufuo.mutation.RemovedWorkHistoriesIDs(); len(nodes) > 0 && !ufuo.mutation.WorkHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   upworkfreelancer.WorkHistoriesTable,
			Columns: []string{upworkfreelancer.WorkHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufuo.mutation.WorkHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   upworkfreelancer.WorkHistoriesTable,
			Columns: []string{upworkfreelancer.WorkHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ufuo.mutation.FreelancerInferenceDataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   upworkfreelancer.FreelancerInferenceDataTable,
			Columns: []string{upworkfreelancer.FreelancerInferenceDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(freelancerinferencedata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ufuo.mutation.FreelancerInferenceDataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   upworkfreelancer.FreelancerInferenceDataTable,
			Columns: []string{upworkfreelancer.FreelancerInferenceDataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(freelancerinferencedata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UpworkFreelancer{config: ufuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ufuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upworkfreelancer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ufuo.mutation.done = true
	return _node, nil
}
