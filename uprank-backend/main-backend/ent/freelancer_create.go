// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/notzree/uprank-backend/main-backend/ent/attachmentref"
	"github.com/notzree/uprank-backend/main-backend/ent/freelancer"
	"github.com/notzree/uprank-backend/main-backend/ent/job"
	"github.com/notzree/uprank-backend/main-backend/ent/workhistory"
)

// FreelancerCreate is the builder for creating a Freelancer entity.
type FreelancerCreate struct {
	config
	mutation *FreelancerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (fc *FreelancerCreate) SetName(s string) *FreelancerCreate {
	fc.mutation.SetName(s)
	return fc
}

// SetTitle sets the "title" field.
func (fc *FreelancerCreate) SetTitle(s string) *FreelancerCreate {
	fc.mutation.SetTitle(s)
	return fc
}

// SetDescription sets the "description" field.
func (fc *FreelancerCreate) SetDescription(s string) *FreelancerCreate {
	fc.mutation.SetDescription(s)
	return fc
}

// SetCity sets the "city" field.
func (fc *FreelancerCreate) SetCity(s string) *FreelancerCreate {
	fc.mutation.SetCity(s)
	return fc
}

// SetCountry sets the "country" field.
func (fc *FreelancerCreate) SetCountry(s string) *FreelancerCreate {
	fc.mutation.SetCountry(s)
	return fc
}

// SetTimezone sets the "timezone" field.
func (fc *FreelancerCreate) SetTimezone(s string) *FreelancerCreate {
	fc.mutation.SetTimezone(s)
	return fc
}

// SetCv sets the "cv" field.
func (fc *FreelancerCreate) SetCv(s string) *FreelancerCreate {
	fc.mutation.SetCv(s)
	return fc
}

// SetAiReccomended sets the "ai_reccomended" field.
func (fc *FreelancerCreate) SetAiReccomended(b bool) *FreelancerCreate {
	fc.mutation.SetAiReccomended(b)
	return fc
}

// SetFixedChargeAmount sets the "fixed_charge_amount" field.
func (fc *FreelancerCreate) SetFixedChargeAmount(f float64) *FreelancerCreate {
	fc.mutation.SetFixedChargeAmount(f)
	return fc
}

// SetNillableFixedChargeAmount sets the "fixed_charge_amount" field if the given value is not nil.
func (fc *FreelancerCreate) SetNillableFixedChargeAmount(f *float64) *FreelancerCreate {
	if f != nil {
		fc.SetFixedChargeAmount(*f)
	}
	return fc
}

// SetFixedChargeCurrency sets the "fixed_charge_currency" field.
func (fc *FreelancerCreate) SetFixedChargeCurrency(s string) *FreelancerCreate {
	fc.mutation.SetFixedChargeCurrency(s)
	return fc
}

// SetHourlyChargeAmount sets the "hourly_charge_amount" field.
func (fc *FreelancerCreate) SetHourlyChargeAmount(f float64) *FreelancerCreate {
	fc.mutation.SetHourlyChargeAmount(f)
	return fc
}

// SetNillableHourlyChargeAmount sets the "hourly_charge_amount" field if the given value is not nil.
func (fc *FreelancerCreate) SetNillableHourlyChargeAmount(f *float64) *FreelancerCreate {
	if f != nil {
		fc.SetHourlyChargeAmount(*f)
	}
	return fc
}

// SetHourlyChargeCurrency sets the "hourly_charge_currency" field.
func (fc *FreelancerCreate) SetHourlyChargeCurrency(s string) *FreelancerCreate {
	fc.mutation.SetHourlyChargeCurrency(s)
	return fc
}

// SetInvited sets the "invited" field.
func (fc *FreelancerCreate) SetInvited(b bool) *FreelancerCreate {
	fc.mutation.SetInvited(b)
	return fc
}

// SetPhotoURL sets the "photo_url" field.
func (fc *FreelancerCreate) SetPhotoURL(s string) *FreelancerCreate {
	fc.mutation.SetPhotoURL(s)
	return fc
}

// SetRecentHours sets the "recent_hours" field.
func (fc *FreelancerCreate) SetRecentHours(f float64) *FreelancerCreate {
	fc.mutation.SetRecentHours(f)
	return fc
}

// SetTotalHours sets the "total_hours" field.
func (fc *FreelancerCreate) SetTotalHours(f float64) *FreelancerCreate {
	fc.mutation.SetTotalHours(f)
	return fc
}

// SetTotalPortfolioItems sets the "total_portfolio_items" field.
func (fc *FreelancerCreate) SetTotalPortfolioItems(i int) *FreelancerCreate {
	fc.mutation.SetTotalPortfolioItems(i)
	return fc
}

// SetTotalPortfolioV2Items sets the "total_portfolio_v2_items" field.
func (fc *FreelancerCreate) SetTotalPortfolioV2Items(i int) *FreelancerCreate {
	fc.mutation.SetTotalPortfolioV2Items(i)
	return fc
}

// SetUpworkTotalFeedback sets the "upwork_total_feedback" field.
func (fc *FreelancerCreate) SetUpworkTotalFeedback(f float64) *FreelancerCreate {
	fc.mutation.SetUpworkTotalFeedback(f)
	return fc
}

// SetUpworkRecentFeedback sets the "upwork_recent_feedback" field.
func (fc *FreelancerCreate) SetUpworkRecentFeedback(f float64) *FreelancerCreate {
	fc.mutation.SetUpworkRecentFeedback(f)
	return fc
}

// SetUpworkTopRatedStatus sets the "upwork_top_rated_status" field.
func (fc *FreelancerCreate) SetUpworkTopRatedStatus(b bool) *FreelancerCreate {
	fc.mutation.SetUpworkTopRatedStatus(b)
	return fc
}

// SetUpworkTopRatedPlusStatus sets the "upwork_top_rated_plus_status" field.
func (fc *FreelancerCreate) SetUpworkTopRatedPlusStatus(b bool) *FreelancerCreate {
	fc.mutation.SetUpworkTopRatedPlusStatus(b)
	return fc
}

// SetUpworkSponsored sets the "upwork_sponsored" field.
func (fc *FreelancerCreate) SetUpworkSponsored(b bool) *FreelancerCreate {
	fc.mutation.SetUpworkSponsored(b)
	return fc
}

// SetUpworkJobSuccessScore sets the "upwork_job_success_score" field.
func (fc *FreelancerCreate) SetUpworkJobSuccessScore(f float64) *FreelancerCreate {
	fc.mutation.SetUpworkJobSuccessScore(f)
	return fc
}

// SetUpworkReccomended sets the "upwork_reccomended" field.
func (fc *FreelancerCreate) SetUpworkReccomended(b bool) *FreelancerCreate {
	fc.mutation.SetUpworkReccomended(b)
	return fc
}

// SetSkills sets the "skills" field.
func (fc *FreelancerCreate) SetSkills(s []string) *FreelancerCreate {
	fc.mutation.SetSkills(s)
	return fc
}

// SetAverageRecentEarnings sets the "average_recent_earnings" field.
func (fc *FreelancerCreate) SetAverageRecentEarnings(f float64) *FreelancerCreate {
	fc.mutation.SetAverageRecentEarnings(f)
	return fc
}

// SetCombinedAverageRecentEarnings sets the "combined_average_recent_earnings" field.
func (fc *FreelancerCreate) SetCombinedAverageRecentEarnings(f float64) *FreelancerCreate {
	fc.mutation.SetCombinedAverageRecentEarnings(f)
	return fc
}

// SetCombinedRecentEarnings sets the "combined_recent_earnings" field.
func (fc *FreelancerCreate) SetCombinedRecentEarnings(f float64) *FreelancerCreate {
	fc.mutation.SetCombinedRecentEarnings(f)
	return fc
}

// SetCombinedTotalEarnings sets the "combined_total_earnings" field.
func (fc *FreelancerCreate) SetCombinedTotalEarnings(f float64) *FreelancerCreate {
	fc.mutation.SetCombinedTotalEarnings(f)
	return fc
}

// SetCombinedTotalRevenue sets the "combined_total_revenue" field.
func (fc *FreelancerCreate) SetCombinedTotalRevenue(f float64) *FreelancerCreate {
	fc.mutation.SetCombinedTotalRevenue(f)
	return fc
}

// SetRecentEarnings sets the "recent_earnings" field.
func (fc *FreelancerCreate) SetRecentEarnings(f float64) *FreelancerCreate {
	fc.mutation.SetRecentEarnings(f)
	return fc
}

// SetTotalRevenue sets the "total_revenue" field.
func (fc *FreelancerCreate) SetTotalRevenue(f float64) *FreelancerCreate {
	fc.mutation.SetTotalRevenue(f)
	return fc
}

// SetUprankScore sets the "uprank_score" field.
func (fc *FreelancerCreate) SetUprankScore(i int) *FreelancerCreate {
	fc.mutation.SetUprankScore(i)
	return fc
}

// SetNillableUprankScore sets the "uprank_score" field if the given value is not nil.
func (fc *FreelancerCreate) SetNillableUprankScore(i *int) *FreelancerCreate {
	if i != nil {
		fc.SetUprankScore(*i)
	}
	return fc
}

// SetUprankUpdatedAt sets the "uprank_updated_at" field.
func (fc *FreelancerCreate) SetUprankUpdatedAt(t time.Time) *FreelancerCreate {
	fc.mutation.SetUprankUpdatedAt(t)
	return fc
}

// SetNillableUprankUpdatedAt sets the "uprank_updated_at" field if the given value is not nil.
func (fc *FreelancerCreate) SetNillableUprankUpdatedAt(t *time.Time) *FreelancerCreate {
	if t != nil {
		fc.SetUprankUpdatedAt(*t)
	}
	return fc
}

// SetUprankReccomended sets the "uprank_reccomended" field.
func (fc *FreelancerCreate) SetUprankReccomended(b bool) *FreelancerCreate {
	fc.mutation.SetUprankReccomended(b)
	return fc
}

// SetNillableUprankReccomended sets the "uprank_reccomended" field if the given value is not nil.
func (fc *FreelancerCreate) SetNillableUprankReccomended(b *bool) *FreelancerCreate {
	if b != nil {
		fc.SetUprankReccomended(*b)
	}
	return fc
}

// SetUprankReccomendedReasons sets the "uprank_reccomended_reasons" field.
func (fc *FreelancerCreate) SetUprankReccomendedReasons(s string) *FreelancerCreate {
	fc.mutation.SetUprankReccomendedReasons(s)
	return fc
}

// SetNillableUprankReccomendedReasons sets the "uprank_reccomended_reasons" field if the given value is not nil.
func (fc *FreelancerCreate) SetNillableUprankReccomendedReasons(s *string) *FreelancerCreate {
	if s != nil {
		fc.SetUprankReccomendedReasons(*s)
	}
	return fc
}

// SetUprankNotEnoughData sets the "uprank_not_enough_data" field.
func (fc *FreelancerCreate) SetUprankNotEnoughData(b bool) *FreelancerCreate {
	fc.mutation.SetUprankNotEnoughData(b)
	return fc
}

// SetNillableUprankNotEnoughData sets the "uprank_not_enough_data" field if the given value is not nil.
func (fc *FreelancerCreate) SetNillableUprankNotEnoughData(b *bool) *FreelancerCreate {
	if b != nil {
		fc.SetUprankNotEnoughData(*b)
	}
	return fc
}

// SetID sets the "id" field.
func (fc *FreelancerCreate) SetID(s string) *FreelancerCreate {
	fc.mutation.SetID(s)
	return fc
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (fc *FreelancerCreate) SetJobID(id string) *FreelancerCreate {
	fc.mutation.SetJobID(id)
	return fc
}

// SetJob sets the "job" edge to the Job entity.
func (fc *FreelancerCreate) SetJob(j *Job) *FreelancerCreate {
	return fc.SetJobID(j.ID)
}

// AddAttachmentIDs adds the "attachments" edge to the AttachmentRef entity by IDs.
func (fc *FreelancerCreate) AddAttachmentIDs(ids ...int) *FreelancerCreate {
	fc.mutation.AddAttachmentIDs(ids...)
	return fc
}

// AddAttachments adds the "attachments" edges to the AttachmentRef entity.
func (fc *FreelancerCreate) AddAttachments(a ...*AttachmentRef) *FreelancerCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return fc.AddAttachmentIDs(ids...)
}

// AddWorkHistoryIDs adds the "work_histories" edge to the WorkHistory entity by IDs.
func (fc *FreelancerCreate) AddWorkHistoryIDs(ids ...int) *FreelancerCreate {
	fc.mutation.AddWorkHistoryIDs(ids...)
	return fc
}

// AddWorkHistories adds the "work_histories" edges to the WorkHistory entity.
func (fc *FreelancerCreate) AddWorkHistories(w ...*WorkHistory) *FreelancerCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return fc.AddWorkHistoryIDs(ids...)
}

// Mutation returns the FreelancerMutation object of the builder.
func (fc *FreelancerCreate) Mutation() *FreelancerMutation {
	return fc.mutation
}

// Save creates the Freelancer in the database.
func (fc *FreelancerCreate) Save(ctx context.Context) (*Freelancer, error) {
	fc.defaults()
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FreelancerCreate) SaveX(ctx context.Context) *Freelancer {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FreelancerCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FreelancerCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FreelancerCreate) defaults() {
	if _, ok := fc.mutation.UprankScore(); !ok {
		v := freelancer.DefaultUprankScore
		fc.mutation.SetUprankScore(v)
	}
	if _, ok := fc.mutation.UprankUpdatedAt(); !ok {
		v := freelancer.DefaultUprankUpdatedAt()
		fc.mutation.SetUprankUpdatedAt(v)
	}
	if _, ok := fc.mutation.UprankReccomended(); !ok {
		v := freelancer.DefaultUprankReccomended
		fc.mutation.SetUprankReccomended(v)
	}
	if _, ok := fc.mutation.UprankNotEnoughData(); !ok {
		v := freelancer.DefaultUprankNotEnoughData
		fc.mutation.SetUprankNotEnoughData(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FreelancerCreate) check() error {
	if _, ok := fc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Freelancer.name"`)}
	}
	if _, ok := fc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Freelancer.title"`)}
	}
	if _, ok := fc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Freelancer.description"`)}
	}
	if _, ok := fc.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "Freelancer.city"`)}
	}
	if _, ok := fc.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`ent: missing required field "Freelancer.country"`)}
	}
	if _, ok := fc.mutation.Timezone(); !ok {
		return &ValidationError{Name: "timezone", err: errors.New(`ent: missing required field "Freelancer.timezone"`)}
	}
	if _, ok := fc.mutation.Cv(); !ok {
		return &ValidationError{Name: "cv", err: errors.New(`ent: missing required field "Freelancer.cv"`)}
	}
	if _, ok := fc.mutation.AiReccomended(); !ok {
		return &ValidationError{Name: "ai_reccomended", err: errors.New(`ent: missing required field "Freelancer.ai_reccomended"`)}
	}
	if _, ok := fc.mutation.FixedChargeCurrency(); !ok {
		return &ValidationError{Name: "fixed_charge_currency", err: errors.New(`ent: missing required field "Freelancer.fixed_charge_currency"`)}
	}
	if _, ok := fc.mutation.HourlyChargeCurrency(); !ok {
		return &ValidationError{Name: "hourly_charge_currency", err: errors.New(`ent: missing required field "Freelancer.hourly_charge_currency"`)}
	}
	if _, ok := fc.mutation.Invited(); !ok {
		return &ValidationError{Name: "invited", err: errors.New(`ent: missing required field "Freelancer.invited"`)}
	}
	if _, ok := fc.mutation.PhotoURL(); !ok {
		return &ValidationError{Name: "photo_url", err: errors.New(`ent: missing required field "Freelancer.photo_url"`)}
	}
	if _, ok := fc.mutation.RecentHours(); !ok {
		return &ValidationError{Name: "recent_hours", err: errors.New(`ent: missing required field "Freelancer.recent_hours"`)}
	}
	if _, ok := fc.mutation.TotalHours(); !ok {
		return &ValidationError{Name: "total_hours", err: errors.New(`ent: missing required field "Freelancer.total_hours"`)}
	}
	if _, ok := fc.mutation.TotalPortfolioItems(); !ok {
		return &ValidationError{Name: "total_portfolio_items", err: errors.New(`ent: missing required field "Freelancer.total_portfolio_items"`)}
	}
	if _, ok := fc.mutation.TotalPortfolioV2Items(); !ok {
		return &ValidationError{Name: "total_portfolio_v2_items", err: errors.New(`ent: missing required field "Freelancer.total_portfolio_v2_items"`)}
	}
	if _, ok := fc.mutation.UpworkTotalFeedback(); !ok {
		return &ValidationError{Name: "upwork_total_feedback", err: errors.New(`ent: missing required field "Freelancer.upwork_total_feedback"`)}
	}
	if _, ok := fc.mutation.UpworkRecentFeedback(); !ok {
		return &ValidationError{Name: "upwork_recent_feedback", err: errors.New(`ent: missing required field "Freelancer.upwork_recent_feedback"`)}
	}
	if _, ok := fc.mutation.UpworkTopRatedStatus(); !ok {
		return &ValidationError{Name: "upwork_top_rated_status", err: errors.New(`ent: missing required field "Freelancer.upwork_top_rated_status"`)}
	}
	if _, ok := fc.mutation.UpworkTopRatedPlusStatus(); !ok {
		return &ValidationError{Name: "upwork_top_rated_plus_status", err: errors.New(`ent: missing required field "Freelancer.upwork_top_rated_plus_status"`)}
	}
	if _, ok := fc.mutation.UpworkSponsored(); !ok {
		return &ValidationError{Name: "upwork_sponsored", err: errors.New(`ent: missing required field "Freelancer.upwork_sponsored"`)}
	}
	if _, ok := fc.mutation.UpworkJobSuccessScore(); !ok {
		return &ValidationError{Name: "upwork_job_success_score", err: errors.New(`ent: missing required field "Freelancer.upwork_job_success_score"`)}
	}
	if _, ok := fc.mutation.UpworkReccomended(); !ok {
		return &ValidationError{Name: "upwork_reccomended", err: errors.New(`ent: missing required field "Freelancer.upwork_reccomended"`)}
	}
	if _, ok := fc.mutation.Skills(); !ok {
		return &ValidationError{Name: "skills", err: errors.New(`ent: missing required field "Freelancer.skills"`)}
	}
	if _, ok := fc.mutation.AverageRecentEarnings(); !ok {
		return &ValidationError{Name: "average_recent_earnings", err: errors.New(`ent: missing required field "Freelancer.average_recent_earnings"`)}
	}
	if _, ok := fc.mutation.CombinedAverageRecentEarnings(); !ok {
		return &ValidationError{Name: "combined_average_recent_earnings", err: errors.New(`ent: missing required field "Freelancer.combined_average_recent_earnings"`)}
	}
	if _, ok := fc.mutation.CombinedRecentEarnings(); !ok {
		return &ValidationError{Name: "combined_recent_earnings", err: errors.New(`ent: missing required field "Freelancer.combined_recent_earnings"`)}
	}
	if _, ok := fc.mutation.CombinedTotalEarnings(); !ok {
		return &ValidationError{Name: "combined_total_earnings", err: errors.New(`ent: missing required field "Freelancer.combined_total_earnings"`)}
	}
	if _, ok := fc.mutation.CombinedTotalRevenue(); !ok {
		return &ValidationError{Name: "combined_total_revenue", err: errors.New(`ent: missing required field "Freelancer.combined_total_revenue"`)}
	}
	if _, ok := fc.mutation.RecentEarnings(); !ok {
		return &ValidationError{Name: "recent_earnings", err: errors.New(`ent: missing required field "Freelancer.recent_earnings"`)}
	}
	if _, ok := fc.mutation.TotalRevenue(); !ok {
		return &ValidationError{Name: "total_revenue", err: errors.New(`ent: missing required field "Freelancer.total_revenue"`)}
	}
	if _, ok := fc.mutation.UprankUpdatedAt(); !ok {
		return &ValidationError{Name: "uprank_updated_at", err: errors.New(`ent: missing required field "Freelancer.uprank_updated_at"`)}
	}
	if v, ok := fc.mutation.ID(); ok {
		if err := freelancer.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Freelancer.id": %w`, err)}
		}
	}
	if _, ok := fc.mutation.JobID(); !ok {
		return &ValidationError{Name: "job", err: errors.New(`ent: missing required edge "Freelancer.job"`)}
	}
	return nil
}

func (fc *FreelancerCreate) sqlSave(ctx context.Context) (*Freelancer, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Freelancer.ID type: %T", _spec.ID.Value)
		}
	}
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FreelancerCreate) createSpec() (*Freelancer, *sqlgraph.CreateSpec) {
	var (
		_node = &Freelancer{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(freelancer.Table, sqlgraph.NewFieldSpec(freelancer.FieldID, field.TypeString))
	)
	_spec.OnConflict = fc.conflict
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fc.mutation.Name(); ok {
		_spec.SetField(freelancer.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := fc.mutation.Title(); ok {
		_spec.SetField(freelancer.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := fc.mutation.Description(); ok {
		_spec.SetField(freelancer.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := fc.mutation.City(); ok {
		_spec.SetField(freelancer.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := fc.mutation.Country(); ok {
		_spec.SetField(freelancer.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := fc.mutation.Timezone(); ok {
		_spec.SetField(freelancer.FieldTimezone, field.TypeString, value)
		_node.Timezone = value
	}
	if value, ok := fc.mutation.Cv(); ok {
		_spec.SetField(freelancer.FieldCv, field.TypeString, value)
		_node.Cv = value
	}
	if value, ok := fc.mutation.AiReccomended(); ok {
		_spec.SetField(freelancer.FieldAiReccomended, field.TypeBool, value)
		_node.AiReccomended = value
	}
	if value, ok := fc.mutation.FixedChargeAmount(); ok {
		_spec.SetField(freelancer.FieldFixedChargeAmount, field.TypeFloat64, value)
		_node.FixedChargeAmount = value
	}
	if value, ok := fc.mutation.FixedChargeCurrency(); ok {
		_spec.SetField(freelancer.FieldFixedChargeCurrency, field.TypeString, value)
		_node.FixedChargeCurrency = value
	}
	if value, ok := fc.mutation.HourlyChargeAmount(); ok {
		_spec.SetField(freelancer.FieldHourlyChargeAmount, field.TypeFloat64, value)
		_node.HourlyChargeAmount = value
	}
	if value, ok := fc.mutation.HourlyChargeCurrency(); ok {
		_spec.SetField(freelancer.FieldHourlyChargeCurrency, field.TypeString, value)
		_node.HourlyChargeCurrency = value
	}
	if value, ok := fc.mutation.Invited(); ok {
		_spec.SetField(freelancer.FieldInvited, field.TypeBool, value)
		_node.Invited = value
	}
	if value, ok := fc.mutation.PhotoURL(); ok {
		_spec.SetField(freelancer.FieldPhotoURL, field.TypeString, value)
		_node.PhotoURL = value
	}
	if value, ok := fc.mutation.RecentHours(); ok {
		_spec.SetField(freelancer.FieldRecentHours, field.TypeFloat64, value)
		_node.RecentHours = value
	}
	if value, ok := fc.mutation.TotalHours(); ok {
		_spec.SetField(freelancer.FieldTotalHours, field.TypeFloat64, value)
		_node.TotalHours = value
	}
	if value, ok := fc.mutation.TotalPortfolioItems(); ok {
		_spec.SetField(freelancer.FieldTotalPortfolioItems, field.TypeInt, value)
		_node.TotalPortfolioItems = value
	}
	if value, ok := fc.mutation.TotalPortfolioV2Items(); ok {
		_spec.SetField(freelancer.FieldTotalPortfolioV2Items, field.TypeInt, value)
		_node.TotalPortfolioV2Items = value
	}
	if value, ok := fc.mutation.UpworkTotalFeedback(); ok {
		_spec.SetField(freelancer.FieldUpworkTotalFeedback, field.TypeFloat64, value)
		_node.UpworkTotalFeedback = value
	}
	if value, ok := fc.mutation.UpworkRecentFeedback(); ok {
		_spec.SetField(freelancer.FieldUpworkRecentFeedback, field.TypeFloat64, value)
		_node.UpworkRecentFeedback = value
	}
	if value, ok := fc.mutation.UpworkTopRatedStatus(); ok {
		_spec.SetField(freelancer.FieldUpworkTopRatedStatus, field.TypeBool, value)
		_node.UpworkTopRatedStatus = value
	}
	if value, ok := fc.mutation.UpworkTopRatedPlusStatus(); ok {
		_spec.SetField(freelancer.FieldUpworkTopRatedPlusStatus, field.TypeBool, value)
		_node.UpworkTopRatedPlusStatus = value
	}
	if value, ok := fc.mutation.UpworkSponsored(); ok {
		_spec.SetField(freelancer.FieldUpworkSponsored, field.TypeBool, value)
		_node.UpworkSponsored = value
	}
	if value, ok := fc.mutation.UpworkJobSuccessScore(); ok {
		_spec.SetField(freelancer.FieldUpworkJobSuccessScore, field.TypeFloat64, value)
		_node.UpworkJobSuccessScore = value
	}
	if value, ok := fc.mutation.UpworkReccomended(); ok {
		_spec.SetField(freelancer.FieldUpworkReccomended, field.TypeBool, value)
		_node.UpworkReccomended = value
	}
	if value, ok := fc.mutation.Skills(); ok {
		_spec.SetField(freelancer.FieldSkills, field.TypeJSON, value)
		_node.Skills = value
	}
	if value, ok := fc.mutation.AverageRecentEarnings(); ok {
		_spec.SetField(freelancer.FieldAverageRecentEarnings, field.TypeFloat64, value)
		_node.AverageRecentEarnings = value
	}
	if value, ok := fc.mutation.CombinedAverageRecentEarnings(); ok {
		_spec.SetField(freelancer.FieldCombinedAverageRecentEarnings, field.TypeFloat64, value)
		_node.CombinedAverageRecentEarnings = value
	}
	if value, ok := fc.mutation.CombinedRecentEarnings(); ok {
		_spec.SetField(freelancer.FieldCombinedRecentEarnings, field.TypeFloat64, value)
		_node.CombinedRecentEarnings = value
	}
	if value, ok := fc.mutation.CombinedTotalEarnings(); ok {
		_spec.SetField(freelancer.FieldCombinedTotalEarnings, field.TypeFloat64, value)
		_node.CombinedTotalEarnings = value
	}
	if value, ok := fc.mutation.CombinedTotalRevenue(); ok {
		_spec.SetField(freelancer.FieldCombinedTotalRevenue, field.TypeFloat64, value)
		_node.CombinedTotalRevenue = value
	}
	if value, ok := fc.mutation.RecentEarnings(); ok {
		_spec.SetField(freelancer.FieldRecentEarnings, field.TypeFloat64, value)
		_node.RecentEarnings = value
	}
	if value, ok := fc.mutation.TotalRevenue(); ok {
		_spec.SetField(freelancer.FieldTotalRevenue, field.TypeFloat64, value)
		_node.TotalRevenue = value
	}
	if value, ok := fc.mutation.UprankScore(); ok {
		_spec.SetField(freelancer.FieldUprankScore, field.TypeInt, value)
		_node.UprankScore = value
	}
	if value, ok := fc.mutation.UprankUpdatedAt(); ok {
		_spec.SetField(freelancer.FieldUprankUpdatedAt, field.TypeTime, value)
		_node.UprankUpdatedAt = value
	}
	if value, ok := fc.mutation.UprankReccomended(); ok {
		_spec.SetField(freelancer.FieldUprankReccomended, field.TypeBool, value)
		_node.UprankReccomended = value
	}
	if value, ok := fc.mutation.UprankReccomendedReasons(); ok {
		_spec.SetField(freelancer.FieldUprankReccomendedReasons, field.TypeString, value)
		_node.UprankReccomendedReasons = value
	}
	if value, ok := fc.mutation.UprankNotEnoughData(); ok {
		_spec.SetField(freelancer.FieldUprankNotEnoughData, field.TypeBool, value)
		_node.UprankNotEnoughData = value
	}
	if nodes := fc.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   freelancer.JobTable,
			Columns: []string{freelancer.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.job_freelancers = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.AttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   freelancer.AttachmentsTable,
			Columns: []string{freelancer.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachmentref.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.WorkHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   freelancer.WorkHistoriesTable,
			Columns: []string{freelancer.WorkHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Freelancer.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FreelancerUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (fc *FreelancerCreate) OnConflict(opts ...sql.ConflictOption) *FreelancerUpsertOne {
	fc.conflict = opts
	return &FreelancerUpsertOne{
		create: fc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Freelancer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fc *FreelancerCreate) OnConflictColumns(columns ...string) *FreelancerUpsertOne {
	fc.conflict = append(fc.conflict, sql.ConflictColumns(columns...))
	return &FreelancerUpsertOne{
		create: fc,
	}
}

type (
	// FreelancerUpsertOne is the builder for "upsert"-ing
	//  one Freelancer node.
	FreelancerUpsertOne struct {
		create *FreelancerCreate
	}

	// FreelancerUpsert is the "OnConflict" setter.
	FreelancerUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *FreelancerUpsert) SetName(v string) *FreelancerUpsert {
	u.Set(freelancer.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateName() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldName)
	return u
}

// SetTitle sets the "title" field.
func (u *FreelancerUpsert) SetTitle(v string) *FreelancerUpsert {
	u.Set(freelancer.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateTitle() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *FreelancerUpsert) SetDescription(v string) *FreelancerUpsert {
	u.Set(freelancer.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateDescription() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldDescription)
	return u
}

// SetCity sets the "city" field.
func (u *FreelancerUpsert) SetCity(v string) *FreelancerUpsert {
	u.Set(freelancer.FieldCity, v)
	return u
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateCity() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldCity)
	return u
}

// SetCountry sets the "country" field.
func (u *FreelancerUpsert) SetCountry(v string) *FreelancerUpsert {
	u.Set(freelancer.FieldCountry, v)
	return u
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateCountry() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldCountry)
	return u
}

// SetTimezone sets the "timezone" field.
func (u *FreelancerUpsert) SetTimezone(v string) *FreelancerUpsert {
	u.Set(freelancer.FieldTimezone, v)
	return u
}

// UpdateTimezone sets the "timezone" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateTimezone() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldTimezone)
	return u
}

// SetCv sets the "cv" field.
func (u *FreelancerUpsert) SetCv(v string) *FreelancerUpsert {
	u.Set(freelancer.FieldCv, v)
	return u
}

// UpdateCv sets the "cv" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateCv() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldCv)
	return u
}

// SetAiReccomended sets the "ai_reccomended" field.
func (u *FreelancerUpsert) SetAiReccomended(v bool) *FreelancerUpsert {
	u.Set(freelancer.FieldAiReccomended, v)
	return u
}

// UpdateAiReccomended sets the "ai_reccomended" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateAiReccomended() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldAiReccomended)
	return u
}

// SetFixedChargeAmount sets the "fixed_charge_amount" field.
func (u *FreelancerUpsert) SetFixedChargeAmount(v float64) *FreelancerUpsert {
	u.Set(freelancer.FieldFixedChargeAmount, v)
	return u
}

// UpdateFixedChargeAmount sets the "fixed_charge_amount" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateFixedChargeAmount() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldFixedChargeAmount)
	return u
}

// AddFixedChargeAmount adds v to the "fixed_charge_amount" field.
func (u *FreelancerUpsert) AddFixedChargeAmount(v float64) *FreelancerUpsert {
	u.Add(freelancer.FieldFixedChargeAmount, v)
	return u
}

// ClearFixedChargeAmount clears the value of the "fixed_charge_amount" field.
func (u *FreelancerUpsert) ClearFixedChargeAmount() *FreelancerUpsert {
	u.SetNull(freelancer.FieldFixedChargeAmount)
	return u
}

// SetFixedChargeCurrency sets the "fixed_charge_currency" field.
func (u *FreelancerUpsert) SetFixedChargeCurrency(v string) *FreelancerUpsert {
	u.Set(freelancer.FieldFixedChargeCurrency, v)
	return u
}

// UpdateFixedChargeCurrency sets the "fixed_charge_currency" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateFixedChargeCurrency() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldFixedChargeCurrency)
	return u
}

// SetHourlyChargeAmount sets the "hourly_charge_amount" field.
func (u *FreelancerUpsert) SetHourlyChargeAmount(v float64) *FreelancerUpsert {
	u.Set(freelancer.FieldHourlyChargeAmount, v)
	return u
}

// UpdateHourlyChargeAmount sets the "hourly_charge_amount" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateHourlyChargeAmount() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldHourlyChargeAmount)
	return u
}

// AddHourlyChargeAmount adds v to the "hourly_charge_amount" field.
func (u *FreelancerUpsert) AddHourlyChargeAmount(v float64) *FreelancerUpsert {
	u.Add(freelancer.FieldHourlyChargeAmount, v)
	return u
}

// ClearHourlyChargeAmount clears the value of the "hourly_charge_amount" field.
func (u *FreelancerUpsert) ClearHourlyChargeAmount() *FreelancerUpsert {
	u.SetNull(freelancer.FieldHourlyChargeAmount)
	return u
}

// SetHourlyChargeCurrency sets the "hourly_charge_currency" field.
func (u *FreelancerUpsert) SetHourlyChargeCurrency(v string) *FreelancerUpsert {
	u.Set(freelancer.FieldHourlyChargeCurrency, v)
	return u
}

// UpdateHourlyChargeCurrency sets the "hourly_charge_currency" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateHourlyChargeCurrency() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldHourlyChargeCurrency)
	return u
}

// SetInvited sets the "invited" field.
func (u *FreelancerUpsert) SetInvited(v bool) *FreelancerUpsert {
	u.Set(freelancer.FieldInvited, v)
	return u
}

// UpdateInvited sets the "invited" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateInvited() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldInvited)
	return u
}

// SetPhotoURL sets the "photo_url" field.
func (u *FreelancerUpsert) SetPhotoURL(v string) *FreelancerUpsert {
	u.Set(freelancer.FieldPhotoURL, v)
	return u
}

// UpdatePhotoURL sets the "photo_url" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdatePhotoURL() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldPhotoURL)
	return u
}

// SetRecentHours sets the "recent_hours" field.
func (u *FreelancerUpsert) SetRecentHours(v float64) *FreelancerUpsert {
	u.Set(freelancer.FieldRecentHours, v)
	return u
}

// UpdateRecentHours sets the "recent_hours" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateRecentHours() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldRecentHours)
	return u
}

// AddRecentHours adds v to the "recent_hours" field.
func (u *FreelancerUpsert) AddRecentHours(v float64) *FreelancerUpsert {
	u.Add(freelancer.FieldRecentHours, v)
	return u
}

// SetTotalHours sets the "total_hours" field.
func (u *FreelancerUpsert) SetTotalHours(v float64) *FreelancerUpsert {
	u.Set(freelancer.FieldTotalHours, v)
	return u
}

// UpdateTotalHours sets the "total_hours" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateTotalHours() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldTotalHours)
	return u
}

// AddTotalHours adds v to the "total_hours" field.
func (u *FreelancerUpsert) AddTotalHours(v float64) *FreelancerUpsert {
	u.Add(freelancer.FieldTotalHours, v)
	return u
}

// SetTotalPortfolioItems sets the "total_portfolio_items" field.
func (u *FreelancerUpsert) SetTotalPortfolioItems(v int) *FreelancerUpsert {
	u.Set(freelancer.FieldTotalPortfolioItems, v)
	return u
}

// UpdateTotalPortfolioItems sets the "total_portfolio_items" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateTotalPortfolioItems() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldTotalPortfolioItems)
	return u
}

// AddTotalPortfolioItems adds v to the "total_portfolio_items" field.
func (u *FreelancerUpsert) AddTotalPortfolioItems(v int) *FreelancerUpsert {
	u.Add(freelancer.FieldTotalPortfolioItems, v)
	return u
}

// SetTotalPortfolioV2Items sets the "total_portfolio_v2_items" field.
func (u *FreelancerUpsert) SetTotalPortfolioV2Items(v int) *FreelancerUpsert {
	u.Set(freelancer.FieldTotalPortfolioV2Items, v)
	return u
}

// UpdateTotalPortfolioV2Items sets the "total_portfolio_v2_items" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateTotalPortfolioV2Items() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldTotalPortfolioV2Items)
	return u
}

// AddTotalPortfolioV2Items adds v to the "total_portfolio_v2_items" field.
func (u *FreelancerUpsert) AddTotalPortfolioV2Items(v int) *FreelancerUpsert {
	u.Add(freelancer.FieldTotalPortfolioV2Items, v)
	return u
}

// SetUpworkTotalFeedback sets the "upwork_total_feedback" field.
func (u *FreelancerUpsert) SetUpworkTotalFeedback(v float64) *FreelancerUpsert {
	u.Set(freelancer.FieldUpworkTotalFeedback, v)
	return u
}

// UpdateUpworkTotalFeedback sets the "upwork_total_feedback" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateUpworkTotalFeedback() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldUpworkTotalFeedback)
	return u
}

// AddUpworkTotalFeedback adds v to the "upwork_total_feedback" field.
func (u *FreelancerUpsert) AddUpworkTotalFeedback(v float64) *FreelancerUpsert {
	u.Add(freelancer.FieldUpworkTotalFeedback, v)
	return u
}

// SetUpworkRecentFeedback sets the "upwork_recent_feedback" field.
func (u *FreelancerUpsert) SetUpworkRecentFeedback(v float64) *FreelancerUpsert {
	u.Set(freelancer.FieldUpworkRecentFeedback, v)
	return u
}

// UpdateUpworkRecentFeedback sets the "upwork_recent_feedback" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateUpworkRecentFeedback() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldUpworkRecentFeedback)
	return u
}

// AddUpworkRecentFeedback adds v to the "upwork_recent_feedback" field.
func (u *FreelancerUpsert) AddUpworkRecentFeedback(v float64) *FreelancerUpsert {
	u.Add(freelancer.FieldUpworkRecentFeedback, v)
	return u
}

// SetUpworkTopRatedStatus sets the "upwork_top_rated_status" field.
func (u *FreelancerUpsert) SetUpworkTopRatedStatus(v bool) *FreelancerUpsert {
	u.Set(freelancer.FieldUpworkTopRatedStatus, v)
	return u
}

// UpdateUpworkTopRatedStatus sets the "upwork_top_rated_status" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateUpworkTopRatedStatus() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldUpworkTopRatedStatus)
	return u
}

// SetUpworkTopRatedPlusStatus sets the "upwork_top_rated_plus_status" field.
func (u *FreelancerUpsert) SetUpworkTopRatedPlusStatus(v bool) *FreelancerUpsert {
	u.Set(freelancer.FieldUpworkTopRatedPlusStatus, v)
	return u
}

// UpdateUpworkTopRatedPlusStatus sets the "upwork_top_rated_plus_status" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateUpworkTopRatedPlusStatus() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldUpworkTopRatedPlusStatus)
	return u
}

// SetUpworkSponsored sets the "upwork_sponsored" field.
func (u *FreelancerUpsert) SetUpworkSponsored(v bool) *FreelancerUpsert {
	u.Set(freelancer.FieldUpworkSponsored, v)
	return u
}

// UpdateUpworkSponsored sets the "upwork_sponsored" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateUpworkSponsored() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldUpworkSponsored)
	return u
}

// SetUpworkJobSuccessScore sets the "upwork_job_success_score" field.
func (u *FreelancerUpsert) SetUpworkJobSuccessScore(v float64) *FreelancerUpsert {
	u.Set(freelancer.FieldUpworkJobSuccessScore, v)
	return u
}

// UpdateUpworkJobSuccessScore sets the "upwork_job_success_score" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateUpworkJobSuccessScore() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldUpworkJobSuccessScore)
	return u
}

// AddUpworkJobSuccessScore adds v to the "upwork_job_success_score" field.
func (u *FreelancerUpsert) AddUpworkJobSuccessScore(v float64) *FreelancerUpsert {
	u.Add(freelancer.FieldUpworkJobSuccessScore, v)
	return u
}

// SetUpworkReccomended sets the "upwork_reccomended" field.
func (u *FreelancerUpsert) SetUpworkReccomended(v bool) *FreelancerUpsert {
	u.Set(freelancer.FieldUpworkReccomended, v)
	return u
}

// UpdateUpworkReccomended sets the "upwork_reccomended" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateUpworkReccomended() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldUpworkReccomended)
	return u
}

// SetSkills sets the "skills" field.
func (u *FreelancerUpsert) SetSkills(v []string) *FreelancerUpsert {
	u.Set(freelancer.FieldSkills, v)
	return u
}

// UpdateSkills sets the "skills" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateSkills() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldSkills)
	return u
}

// SetAverageRecentEarnings sets the "average_recent_earnings" field.
func (u *FreelancerUpsert) SetAverageRecentEarnings(v float64) *FreelancerUpsert {
	u.Set(freelancer.FieldAverageRecentEarnings, v)
	return u
}

// UpdateAverageRecentEarnings sets the "average_recent_earnings" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateAverageRecentEarnings() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldAverageRecentEarnings)
	return u
}

// AddAverageRecentEarnings adds v to the "average_recent_earnings" field.
func (u *FreelancerUpsert) AddAverageRecentEarnings(v float64) *FreelancerUpsert {
	u.Add(freelancer.FieldAverageRecentEarnings, v)
	return u
}

// SetCombinedAverageRecentEarnings sets the "combined_average_recent_earnings" field.
func (u *FreelancerUpsert) SetCombinedAverageRecentEarnings(v float64) *FreelancerUpsert {
	u.Set(freelancer.FieldCombinedAverageRecentEarnings, v)
	return u
}

// UpdateCombinedAverageRecentEarnings sets the "combined_average_recent_earnings" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateCombinedAverageRecentEarnings() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldCombinedAverageRecentEarnings)
	return u
}

// AddCombinedAverageRecentEarnings adds v to the "combined_average_recent_earnings" field.
func (u *FreelancerUpsert) AddCombinedAverageRecentEarnings(v float64) *FreelancerUpsert {
	u.Add(freelancer.FieldCombinedAverageRecentEarnings, v)
	return u
}

// SetCombinedRecentEarnings sets the "combined_recent_earnings" field.
func (u *FreelancerUpsert) SetCombinedRecentEarnings(v float64) *FreelancerUpsert {
	u.Set(freelancer.FieldCombinedRecentEarnings, v)
	return u
}

// UpdateCombinedRecentEarnings sets the "combined_recent_earnings" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateCombinedRecentEarnings() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldCombinedRecentEarnings)
	return u
}

// AddCombinedRecentEarnings adds v to the "combined_recent_earnings" field.
func (u *FreelancerUpsert) AddCombinedRecentEarnings(v float64) *FreelancerUpsert {
	u.Add(freelancer.FieldCombinedRecentEarnings, v)
	return u
}

// SetCombinedTotalEarnings sets the "combined_total_earnings" field.
func (u *FreelancerUpsert) SetCombinedTotalEarnings(v float64) *FreelancerUpsert {
	u.Set(freelancer.FieldCombinedTotalEarnings, v)
	return u
}

// UpdateCombinedTotalEarnings sets the "combined_total_earnings" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateCombinedTotalEarnings() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldCombinedTotalEarnings)
	return u
}

// AddCombinedTotalEarnings adds v to the "combined_total_earnings" field.
func (u *FreelancerUpsert) AddCombinedTotalEarnings(v float64) *FreelancerUpsert {
	u.Add(freelancer.FieldCombinedTotalEarnings, v)
	return u
}

// SetCombinedTotalRevenue sets the "combined_total_revenue" field.
func (u *FreelancerUpsert) SetCombinedTotalRevenue(v float64) *FreelancerUpsert {
	u.Set(freelancer.FieldCombinedTotalRevenue, v)
	return u
}

// UpdateCombinedTotalRevenue sets the "combined_total_revenue" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateCombinedTotalRevenue() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldCombinedTotalRevenue)
	return u
}

// AddCombinedTotalRevenue adds v to the "combined_total_revenue" field.
func (u *FreelancerUpsert) AddCombinedTotalRevenue(v float64) *FreelancerUpsert {
	u.Add(freelancer.FieldCombinedTotalRevenue, v)
	return u
}

// SetRecentEarnings sets the "recent_earnings" field.
func (u *FreelancerUpsert) SetRecentEarnings(v float64) *FreelancerUpsert {
	u.Set(freelancer.FieldRecentEarnings, v)
	return u
}

// UpdateRecentEarnings sets the "recent_earnings" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateRecentEarnings() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldRecentEarnings)
	return u
}

// AddRecentEarnings adds v to the "recent_earnings" field.
func (u *FreelancerUpsert) AddRecentEarnings(v float64) *FreelancerUpsert {
	u.Add(freelancer.FieldRecentEarnings, v)
	return u
}

// SetTotalRevenue sets the "total_revenue" field.
func (u *FreelancerUpsert) SetTotalRevenue(v float64) *FreelancerUpsert {
	u.Set(freelancer.FieldTotalRevenue, v)
	return u
}

// UpdateTotalRevenue sets the "total_revenue" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateTotalRevenue() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldTotalRevenue)
	return u
}

// AddTotalRevenue adds v to the "total_revenue" field.
func (u *FreelancerUpsert) AddTotalRevenue(v float64) *FreelancerUpsert {
	u.Add(freelancer.FieldTotalRevenue, v)
	return u
}

// SetUprankScore sets the "uprank_score" field.
func (u *FreelancerUpsert) SetUprankScore(v int) *FreelancerUpsert {
	u.Set(freelancer.FieldUprankScore, v)
	return u
}

// UpdateUprankScore sets the "uprank_score" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateUprankScore() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldUprankScore)
	return u
}

// AddUprankScore adds v to the "uprank_score" field.
func (u *FreelancerUpsert) AddUprankScore(v int) *FreelancerUpsert {
	u.Add(freelancer.FieldUprankScore, v)
	return u
}

// ClearUprankScore clears the value of the "uprank_score" field.
func (u *FreelancerUpsert) ClearUprankScore() *FreelancerUpsert {
	u.SetNull(freelancer.FieldUprankScore)
	return u
}

// SetUprankUpdatedAt sets the "uprank_updated_at" field.
func (u *FreelancerUpsert) SetUprankUpdatedAt(v time.Time) *FreelancerUpsert {
	u.Set(freelancer.FieldUprankUpdatedAt, v)
	return u
}

// UpdateUprankUpdatedAt sets the "uprank_updated_at" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateUprankUpdatedAt() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldUprankUpdatedAt)
	return u
}

// SetUprankReccomended sets the "uprank_reccomended" field.
func (u *FreelancerUpsert) SetUprankReccomended(v bool) *FreelancerUpsert {
	u.Set(freelancer.FieldUprankReccomended, v)
	return u
}

// UpdateUprankReccomended sets the "uprank_reccomended" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateUprankReccomended() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldUprankReccomended)
	return u
}

// ClearUprankReccomended clears the value of the "uprank_reccomended" field.
func (u *FreelancerUpsert) ClearUprankReccomended() *FreelancerUpsert {
	u.SetNull(freelancer.FieldUprankReccomended)
	return u
}

// SetUprankReccomendedReasons sets the "uprank_reccomended_reasons" field.
func (u *FreelancerUpsert) SetUprankReccomendedReasons(v string) *FreelancerUpsert {
	u.Set(freelancer.FieldUprankReccomendedReasons, v)
	return u
}

// UpdateUprankReccomendedReasons sets the "uprank_reccomended_reasons" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateUprankReccomendedReasons() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldUprankReccomendedReasons)
	return u
}

// ClearUprankReccomendedReasons clears the value of the "uprank_reccomended_reasons" field.
func (u *FreelancerUpsert) ClearUprankReccomendedReasons() *FreelancerUpsert {
	u.SetNull(freelancer.FieldUprankReccomendedReasons)
	return u
}

// SetUprankNotEnoughData sets the "uprank_not_enough_data" field.
func (u *FreelancerUpsert) SetUprankNotEnoughData(v bool) *FreelancerUpsert {
	u.Set(freelancer.FieldUprankNotEnoughData, v)
	return u
}

// UpdateUprankNotEnoughData sets the "uprank_not_enough_data" field to the value that was provided on create.
func (u *FreelancerUpsert) UpdateUprankNotEnoughData() *FreelancerUpsert {
	u.SetExcluded(freelancer.FieldUprankNotEnoughData)
	return u
}

// ClearUprankNotEnoughData clears the value of the "uprank_not_enough_data" field.
func (u *FreelancerUpsert) ClearUprankNotEnoughData() *FreelancerUpsert {
	u.SetNull(freelancer.FieldUprankNotEnoughData)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Freelancer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(freelancer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FreelancerUpsertOne) UpdateNewValues() *FreelancerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(freelancer.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Freelancer.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FreelancerUpsertOne) Ignore() *FreelancerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FreelancerUpsertOne) DoNothing() *FreelancerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FreelancerCreate.OnConflict
// documentation for more info.
func (u *FreelancerUpsertOne) Update(set func(*FreelancerUpsert)) *FreelancerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FreelancerUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *FreelancerUpsertOne) SetName(v string) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateName() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateName()
	})
}

// SetTitle sets the "title" field.
func (u *FreelancerUpsertOne) SetTitle(v string) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateTitle() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *FreelancerUpsertOne) SetDescription(v string) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateDescription() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateDescription()
	})
}

// SetCity sets the "city" field.
func (u *FreelancerUpsertOne) SetCity(v string) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateCity() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateCity()
	})
}

// SetCountry sets the "country" field.
func (u *FreelancerUpsertOne) SetCountry(v string) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateCountry() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateCountry()
	})
}

// SetTimezone sets the "timezone" field.
func (u *FreelancerUpsertOne) SetTimezone(v string) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetTimezone(v)
	})
}

// UpdateTimezone sets the "timezone" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateTimezone() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateTimezone()
	})
}

// SetCv sets the "cv" field.
func (u *FreelancerUpsertOne) SetCv(v string) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetCv(v)
	})
}

// UpdateCv sets the "cv" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateCv() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateCv()
	})
}

// SetAiReccomended sets the "ai_reccomended" field.
func (u *FreelancerUpsertOne) SetAiReccomended(v bool) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetAiReccomended(v)
	})
}

// UpdateAiReccomended sets the "ai_reccomended" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateAiReccomended() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateAiReccomended()
	})
}

// SetFixedChargeAmount sets the "fixed_charge_amount" field.
func (u *FreelancerUpsertOne) SetFixedChargeAmount(v float64) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetFixedChargeAmount(v)
	})
}

// AddFixedChargeAmount adds v to the "fixed_charge_amount" field.
func (u *FreelancerUpsertOne) AddFixedChargeAmount(v float64) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddFixedChargeAmount(v)
	})
}

// UpdateFixedChargeAmount sets the "fixed_charge_amount" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateFixedChargeAmount() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateFixedChargeAmount()
	})
}

// ClearFixedChargeAmount clears the value of the "fixed_charge_amount" field.
func (u *FreelancerUpsertOne) ClearFixedChargeAmount() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.ClearFixedChargeAmount()
	})
}

// SetFixedChargeCurrency sets the "fixed_charge_currency" field.
func (u *FreelancerUpsertOne) SetFixedChargeCurrency(v string) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetFixedChargeCurrency(v)
	})
}

// UpdateFixedChargeCurrency sets the "fixed_charge_currency" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateFixedChargeCurrency() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateFixedChargeCurrency()
	})
}

// SetHourlyChargeAmount sets the "hourly_charge_amount" field.
func (u *FreelancerUpsertOne) SetHourlyChargeAmount(v float64) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetHourlyChargeAmount(v)
	})
}

// AddHourlyChargeAmount adds v to the "hourly_charge_amount" field.
func (u *FreelancerUpsertOne) AddHourlyChargeAmount(v float64) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddHourlyChargeAmount(v)
	})
}

// UpdateHourlyChargeAmount sets the "hourly_charge_amount" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateHourlyChargeAmount() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateHourlyChargeAmount()
	})
}

// ClearHourlyChargeAmount clears the value of the "hourly_charge_amount" field.
func (u *FreelancerUpsertOne) ClearHourlyChargeAmount() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.ClearHourlyChargeAmount()
	})
}

// SetHourlyChargeCurrency sets the "hourly_charge_currency" field.
func (u *FreelancerUpsertOne) SetHourlyChargeCurrency(v string) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetHourlyChargeCurrency(v)
	})
}

// UpdateHourlyChargeCurrency sets the "hourly_charge_currency" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateHourlyChargeCurrency() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateHourlyChargeCurrency()
	})
}

// SetInvited sets the "invited" field.
func (u *FreelancerUpsertOne) SetInvited(v bool) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetInvited(v)
	})
}

// UpdateInvited sets the "invited" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateInvited() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateInvited()
	})
}

// SetPhotoURL sets the "photo_url" field.
func (u *FreelancerUpsertOne) SetPhotoURL(v string) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetPhotoURL(v)
	})
}

// UpdatePhotoURL sets the "photo_url" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdatePhotoURL() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdatePhotoURL()
	})
}

// SetRecentHours sets the "recent_hours" field.
func (u *FreelancerUpsertOne) SetRecentHours(v float64) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetRecentHours(v)
	})
}

// AddRecentHours adds v to the "recent_hours" field.
func (u *FreelancerUpsertOne) AddRecentHours(v float64) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddRecentHours(v)
	})
}

// UpdateRecentHours sets the "recent_hours" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateRecentHours() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateRecentHours()
	})
}

// SetTotalHours sets the "total_hours" field.
func (u *FreelancerUpsertOne) SetTotalHours(v float64) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetTotalHours(v)
	})
}

// AddTotalHours adds v to the "total_hours" field.
func (u *FreelancerUpsertOne) AddTotalHours(v float64) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddTotalHours(v)
	})
}

// UpdateTotalHours sets the "total_hours" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateTotalHours() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateTotalHours()
	})
}

// SetTotalPortfolioItems sets the "total_portfolio_items" field.
func (u *FreelancerUpsertOne) SetTotalPortfolioItems(v int) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetTotalPortfolioItems(v)
	})
}

// AddTotalPortfolioItems adds v to the "total_portfolio_items" field.
func (u *FreelancerUpsertOne) AddTotalPortfolioItems(v int) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddTotalPortfolioItems(v)
	})
}

// UpdateTotalPortfolioItems sets the "total_portfolio_items" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateTotalPortfolioItems() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateTotalPortfolioItems()
	})
}

// SetTotalPortfolioV2Items sets the "total_portfolio_v2_items" field.
func (u *FreelancerUpsertOne) SetTotalPortfolioV2Items(v int) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetTotalPortfolioV2Items(v)
	})
}

// AddTotalPortfolioV2Items adds v to the "total_portfolio_v2_items" field.
func (u *FreelancerUpsertOne) AddTotalPortfolioV2Items(v int) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddTotalPortfolioV2Items(v)
	})
}

// UpdateTotalPortfolioV2Items sets the "total_portfolio_v2_items" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateTotalPortfolioV2Items() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateTotalPortfolioV2Items()
	})
}

// SetUpworkTotalFeedback sets the "upwork_total_feedback" field.
func (u *FreelancerUpsertOne) SetUpworkTotalFeedback(v float64) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetUpworkTotalFeedback(v)
	})
}

// AddUpworkTotalFeedback adds v to the "upwork_total_feedback" field.
func (u *FreelancerUpsertOne) AddUpworkTotalFeedback(v float64) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddUpworkTotalFeedback(v)
	})
}

// UpdateUpworkTotalFeedback sets the "upwork_total_feedback" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateUpworkTotalFeedback() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateUpworkTotalFeedback()
	})
}

// SetUpworkRecentFeedback sets the "upwork_recent_feedback" field.
func (u *FreelancerUpsertOne) SetUpworkRecentFeedback(v float64) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetUpworkRecentFeedback(v)
	})
}

// AddUpworkRecentFeedback adds v to the "upwork_recent_feedback" field.
func (u *FreelancerUpsertOne) AddUpworkRecentFeedback(v float64) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddUpworkRecentFeedback(v)
	})
}

// UpdateUpworkRecentFeedback sets the "upwork_recent_feedback" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateUpworkRecentFeedback() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateUpworkRecentFeedback()
	})
}

// SetUpworkTopRatedStatus sets the "upwork_top_rated_status" field.
func (u *FreelancerUpsertOne) SetUpworkTopRatedStatus(v bool) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetUpworkTopRatedStatus(v)
	})
}

// UpdateUpworkTopRatedStatus sets the "upwork_top_rated_status" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateUpworkTopRatedStatus() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateUpworkTopRatedStatus()
	})
}

// SetUpworkTopRatedPlusStatus sets the "upwork_top_rated_plus_status" field.
func (u *FreelancerUpsertOne) SetUpworkTopRatedPlusStatus(v bool) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetUpworkTopRatedPlusStatus(v)
	})
}

// UpdateUpworkTopRatedPlusStatus sets the "upwork_top_rated_plus_status" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateUpworkTopRatedPlusStatus() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateUpworkTopRatedPlusStatus()
	})
}

// SetUpworkSponsored sets the "upwork_sponsored" field.
func (u *FreelancerUpsertOne) SetUpworkSponsored(v bool) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetUpworkSponsored(v)
	})
}

// UpdateUpworkSponsored sets the "upwork_sponsored" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateUpworkSponsored() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateUpworkSponsored()
	})
}

// SetUpworkJobSuccessScore sets the "upwork_job_success_score" field.
func (u *FreelancerUpsertOne) SetUpworkJobSuccessScore(v float64) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetUpworkJobSuccessScore(v)
	})
}

// AddUpworkJobSuccessScore adds v to the "upwork_job_success_score" field.
func (u *FreelancerUpsertOne) AddUpworkJobSuccessScore(v float64) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddUpworkJobSuccessScore(v)
	})
}

// UpdateUpworkJobSuccessScore sets the "upwork_job_success_score" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateUpworkJobSuccessScore() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateUpworkJobSuccessScore()
	})
}

// SetUpworkReccomended sets the "upwork_reccomended" field.
func (u *FreelancerUpsertOne) SetUpworkReccomended(v bool) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetUpworkReccomended(v)
	})
}

// UpdateUpworkReccomended sets the "upwork_reccomended" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateUpworkReccomended() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateUpworkReccomended()
	})
}

// SetSkills sets the "skills" field.
func (u *FreelancerUpsertOne) SetSkills(v []string) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetSkills(v)
	})
}

// UpdateSkills sets the "skills" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateSkills() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateSkills()
	})
}

// SetAverageRecentEarnings sets the "average_recent_earnings" field.
func (u *FreelancerUpsertOne) SetAverageRecentEarnings(v float64) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetAverageRecentEarnings(v)
	})
}

// AddAverageRecentEarnings adds v to the "average_recent_earnings" field.
func (u *FreelancerUpsertOne) AddAverageRecentEarnings(v float64) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddAverageRecentEarnings(v)
	})
}

// UpdateAverageRecentEarnings sets the "average_recent_earnings" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateAverageRecentEarnings() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateAverageRecentEarnings()
	})
}

// SetCombinedAverageRecentEarnings sets the "combined_average_recent_earnings" field.
func (u *FreelancerUpsertOne) SetCombinedAverageRecentEarnings(v float64) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetCombinedAverageRecentEarnings(v)
	})
}

// AddCombinedAverageRecentEarnings adds v to the "combined_average_recent_earnings" field.
func (u *FreelancerUpsertOne) AddCombinedAverageRecentEarnings(v float64) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddCombinedAverageRecentEarnings(v)
	})
}

// UpdateCombinedAverageRecentEarnings sets the "combined_average_recent_earnings" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateCombinedAverageRecentEarnings() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateCombinedAverageRecentEarnings()
	})
}

// SetCombinedRecentEarnings sets the "combined_recent_earnings" field.
func (u *FreelancerUpsertOne) SetCombinedRecentEarnings(v float64) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetCombinedRecentEarnings(v)
	})
}

// AddCombinedRecentEarnings adds v to the "combined_recent_earnings" field.
func (u *FreelancerUpsertOne) AddCombinedRecentEarnings(v float64) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddCombinedRecentEarnings(v)
	})
}

// UpdateCombinedRecentEarnings sets the "combined_recent_earnings" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateCombinedRecentEarnings() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateCombinedRecentEarnings()
	})
}

// SetCombinedTotalEarnings sets the "combined_total_earnings" field.
func (u *FreelancerUpsertOne) SetCombinedTotalEarnings(v float64) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetCombinedTotalEarnings(v)
	})
}

// AddCombinedTotalEarnings adds v to the "combined_total_earnings" field.
func (u *FreelancerUpsertOne) AddCombinedTotalEarnings(v float64) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddCombinedTotalEarnings(v)
	})
}

// UpdateCombinedTotalEarnings sets the "combined_total_earnings" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateCombinedTotalEarnings() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateCombinedTotalEarnings()
	})
}

// SetCombinedTotalRevenue sets the "combined_total_revenue" field.
func (u *FreelancerUpsertOne) SetCombinedTotalRevenue(v float64) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetCombinedTotalRevenue(v)
	})
}

// AddCombinedTotalRevenue adds v to the "combined_total_revenue" field.
func (u *FreelancerUpsertOne) AddCombinedTotalRevenue(v float64) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddCombinedTotalRevenue(v)
	})
}

// UpdateCombinedTotalRevenue sets the "combined_total_revenue" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateCombinedTotalRevenue() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateCombinedTotalRevenue()
	})
}

// SetRecentEarnings sets the "recent_earnings" field.
func (u *FreelancerUpsertOne) SetRecentEarnings(v float64) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetRecentEarnings(v)
	})
}

// AddRecentEarnings adds v to the "recent_earnings" field.
func (u *FreelancerUpsertOne) AddRecentEarnings(v float64) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddRecentEarnings(v)
	})
}

// UpdateRecentEarnings sets the "recent_earnings" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateRecentEarnings() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateRecentEarnings()
	})
}

// SetTotalRevenue sets the "total_revenue" field.
func (u *FreelancerUpsertOne) SetTotalRevenue(v float64) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetTotalRevenue(v)
	})
}

// AddTotalRevenue adds v to the "total_revenue" field.
func (u *FreelancerUpsertOne) AddTotalRevenue(v float64) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddTotalRevenue(v)
	})
}

// UpdateTotalRevenue sets the "total_revenue" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateTotalRevenue() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateTotalRevenue()
	})
}

// SetUprankScore sets the "uprank_score" field.
func (u *FreelancerUpsertOne) SetUprankScore(v int) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetUprankScore(v)
	})
}

// AddUprankScore adds v to the "uprank_score" field.
func (u *FreelancerUpsertOne) AddUprankScore(v int) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddUprankScore(v)
	})
}

// UpdateUprankScore sets the "uprank_score" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateUprankScore() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateUprankScore()
	})
}

// ClearUprankScore clears the value of the "uprank_score" field.
func (u *FreelancerUpsertOne) ClearUprankScore() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.ClearUprankScore()
	})
}

// SetUprankUpdatedAt sets the "uprank_updated_at" field.
func (u *FreelancerUpsertOne) SetUprankUpdatedAt(v time.Time) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetUprankUpdatedAt(v)
	})
}

// UpdateUprankUpdatedAt sets the "uprank_updated_at" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateUprankUpdatedAt() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateUprankUpdatedAt()
	})
}

// SetUprankReccomended sets the "uprank_reccomended" field.
func (u *FreelancerUpsertOne) SetUprankReccomended(v bool) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetUprankReccomended(v)
	})
}

// UpdateUprankReccomended sets the "uprank_reccomended" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateUprankReccomended() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateUprankReccomended()
	})
}

// ClearUprankReccomended clears the value of the "uprank_reccomended" field.
func (u *FreelancerUpsertOne) ClearUprankReccomended() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.ClearUprankReccomended()
	})
}

// SetUprankReccomendedReasons sets the "uprank_reccomended_reasons" field.
func (u *FreelancerUpsertOne) SetUprankReccomendedReasons(v string) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetUprankReccomendedReasons(v)
	})
}

// UpdateUprankReccomendedReasons sets the "uprank_reccomended_reasons" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateUprankReccomendedReasons() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateUprankReccomendedReasons()
	})
}

// ClearUprankReccomendedReasons clears the value of the "uprank_reccomended_reasons" field.
func (u *FreelancerUpsertOne) ClearUprankReccomendedReasons() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.ClearUprankReccomendedReasons()
	})
}

// SetUprankNotEnoughData sets the "uprank_not_enough_data" field.
func (u *FreelancerUpsertOne) SetUprankNotEnoughData(v bool) *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetUprankNotEnoughData(v)
	})
}

// UpdateUprankNotEnoughData sets the "uprank_not_enough_data" field to the value that was provided on create.
func (u *FreelancerUpsertOne) UpdateUprankNotEnoughData() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateUprankNotEnoughData()
	})
}

// ClearUprankNotEnoughData clears the value of the "uprank_not_enough_data" field.
func (u *FreelancerUpsertOne) ClearUprankNotEnoughData() *FreelancerUpsertOne {
	return u.Update(func(s *FreelancerUpsert) {
		s.ClearUprankNotEnoughData()
	})
}

// Exec executes the query.
func (u *FreelancerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FreelancerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FreelancerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FreelancerUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: FreelancerUpsertOne.ID is not supported by MySQL driver. Use FreelancerUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FreelancerUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FreelancerCreateBulk is the builder for creating many Freelancer entities in bulk.
type FreelancerCreateBulk struct {
	config
	err      error
	builders []*FreelancerCreate
	conflict []sql.ConflictOption
}

// Save creates the Freelancer entities in the database.
func (fcb *FreelancerCreateBulk) Save(ctx context.Context) ([]*Freelancer, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Freelancer, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FreelancerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FreelancerCreateBulk) SaveX(ctx context.Context) []*Freelancer {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FreelancerCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FreelancerCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Freelancer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FreelancerUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (fcb *FreelancerCreateBulk) OnConflict(opts ...sql.ConflictOption) *FreelancerUpsertBulk {
	fcb.conflict = opts
	return &FreelancerUpsertBulk{
		create: fcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Freelancer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fcb *FreelancerCreateBulk) OnConflictColumns(columns ...string) *FreelancerUpsertBulk {
	fcb.conflict = append(fcb.conflict, sql.ConflictColumns(columns...))
	return &FreelancerUpsertBulk{
		create: fcb,
	}
}

// FreelancerUpsertBulk is the builder for "upsert"-ing
// a bulk of Freelancer nodes.
type FreelancerUpsertBulk struct {
	create *FreelancerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Freelancer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(freelancer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *FreelancerUpsertBulk) UpdateNewValues() *FreelancerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(freelancer.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Freelancer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FreelancerUpsertBulk) Ignore() *FreelancerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FreelancerUpsertBulk) DoNothing() *FreelancerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FreelancerCreateBulk.OnConflict
// documentation for more info.
func (u *FreelancerUpsertBulk) Update(set func(*FreelancerUpsert)) *FreelancerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FreelancerUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *FreelancerUpsertBulk) SetName(v string) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateName() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateName()
	})
}

// SetTitle sets the "title" field.
func (u *FreelancerUpsertBulk) SetTitle(v string) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateTitle() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *FreelancerUpsertBulk) SetDescription(v string) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateDescription() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateDescription()
	})
}

// SetCity sets the "city" field.
func (u *FreelancerUpsertBulk) SetCity(v string) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateCity() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateCity()
	})
}

// SetCountry sets the "country" field.
func (u *FreelancerUpsertBulk) SetCountry(v string) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateCountry() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateCountry()
	})
}

// SetTimezone sets the "timezone" field.
func (u *FreelancerUpsertBulk) SetTimezone(v string) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetTimezone(v)
	})
}

// UpdateTimezone sets the "timezone" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateTimezone() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateTimezone()
	})
}

// SetCv sets the "cv" field.
func (u *FreelancerUpsertBulk) SetCv(v string) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetCv(v)
	})
}

// UpdateCv sets the "cv" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateCv() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateCv()
	})
}

// SetAiReccomended sets the "ai_reccomended" field.
func (u *FreelancerUpsertBulk) SetAiReccomended(v bool) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetAiReccomended(v)
	})
}

// UpdateAiReccomended sets the "ai_reccomended" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateAiReccomended() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateAiReccomended()
	})
}

// SetFixedChargeAmount sets the "fixed_charge_amount" field.
func (u *FreelancerUpsertBulk) SetFixedChargeAmount(v float64) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetFixedChargeAmount(v)
	})
}

// AddFixedChargeAmount adds v to the "fixed_charge_amount" field.
func (u *FreelancerUpsertBulk) AddFixedChargeAmount(v float64) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddFixedChargeAmount(v)
	})
}

// UpdateFixedChargeAmount sets the "fixed_charge_amount" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateFixedChargeAmount() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateFixedChargeAmount()
	})
}

// ClearFixedChargeAmount clears the value of the "fixed_charge_amount" field.
func (u *FreelancerUpsertBulk) ClearFixedChargeAmount() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.ClearFixedChargeAmount()
	})
}

// SetFixedChargeCurrency sets the "fixed_charge_currency" field.
func (u *FreelancerUpsertBulk) SetFixedChargeCurrency(v string) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetFixedChargeCurrency(v)
	})
}

// UpdateFixedChargeCurrency sets the "fixed_charge_currency" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateFixedChargeCurrency() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateFixedChargeCurrency()
	})
}

// SetHourlyChargeAmount sets the "hourly_charge_amount" field.
func (u *FreelancerUpsertBulk) SetHourlyChargeAmount(v float64) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetHourlyChargeAmount(v)
	})
}

// AddHourlyChargeAmount adds v to the "hourly_charge_amount" field.
func (u *FreelancerUpsertBulk) AddHourlyChargeAmount(v float64) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddHourlyChargeAmount(v)
	})
}

// UpdateHourlyChargeAmount sets the "hourly_charge_amount" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateHourlyChargeAmount() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateHourlyChargeAmount()
	})
}

// ClearHourlyChargeAmount clears the value of the "hourly_charge_amount" field.
func (u *FreelancerUpsertBulk) ClearHourlyChargeAmount() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.ClearHourlyChargeAmount()
	})
}

// SetHourlyChargeCurrency sets the "hourly_charge_currency" field.
func (u *FreelancerUpsertBulk) SetHourlyChargeCurrency(v string) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetHourlyChargeCurrency(v)
	})
}

// UpdateHourlyChargeCurrency sets the "hourly_charge_currency" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateHourlyChargeCurrency() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateHourlyChargeCurrency()
	})
}

// SetInvited sets the "invited" field.
func (u *FreelancerUpsertBulk) SetInvited(v bool) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetInvited(v)
	})
}

// UpdateInvited sets the "invited" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateInvited() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateInvited()
	})
}

// SetPhotoURL sets the "photo_url" field.
func (u *FreelancerUpsertBulk) SetPhotoURL(v string) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetPhotoURL(v)
	})
}

// UpdatePhotoURL sets the "photo_url" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdatePhotoURL() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdatePhotoURL()
	})
}

// SetRecentHours sets the "recent_hours" field.
func (u *FreelancerUpsertBulk) SetRecentHours(v float64) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetRecentHours(v)
	})
}

// AddRecentHours adds v to the "recent_hours" field.
func (u *FreelancerUpsertBulk) AddRecentHours(v float64) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddRecentHours(v)
	})
}

// UpdateRecentHours sets the "recent_hours" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateRecentHours() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateRecentHours()
	})
}

// SetTotalHours sets the "total_hours" field.
func (u *FreelancerUpsertBulk) SetTotalHours(v float64) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetTotalHours(v)
	})
}

// AddTotalHours adds v to the "total_hours" field.
func (u *FreelancerUpsertBulk) AddTotalHours(v float64) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddTotalHours(v)
	})
}

// UpdateTotalHours sets the "total_hours" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateTotalHours() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateTotalHours()
	})
}

// SetTotalPortfolioItems sets the "total_portfolio_items" field.
func (u *FreelancerUpsertBulk) SetTotalPortfolioItems(v int) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetTotalPortfolioItems(v)
	})
}

// AddTotalPortfolioItems adds v to the "total_portfolio_items" field.
func (u *FreelancerUpsertBulk) AddTotalPortfolioItems(v int) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddTotalPortfolioItems(v)
	})
}

// UpdateTotalPortfolioItems sets the "total_portfolio_items" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateTotalPortfolioItems() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateTotalPortfolioItems()
	})
}

// SetTotalPortfolioV2Items sets the "total_portfolio_v2_items" field.
func (u *FreelancerUpsertBulk) SetTotalPortfolioV2Items(v int) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetTotalPortfolioV2Items(v)
	})
}

// AddTotalPortfolioV2Items adds v to the "total_portfolio_v2_items" field.
func (u *FreelancerUpsertBulk) AddTotalPortfolioV2Items(v int) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddTotalPortfolioV2Items(v)
	})
}

// UpdateTotalPortfolioV2Items sets the "total_portfolio_v2_items" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateTotalPortfolioV2Items() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateTotalPortfolioV2Items()
	})
}

// SetUpworkTotalFeedback sets the "upwork_total_feedback" field.
func (u *FreelancerUpsertBulk) SetUpworkTotalFeedback(v float64) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetUpworkTotalFeedback(v)
	})
}

// AddUpworkTotalFeedback adds v to the "upwork_total_feedback" field.
func (u *FreelancerUpsertBulk) AddUpworkTotalFeedback(v float64) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddUpworkTotalFeedback(v)
	})
}

// UpdateUpworkTotalFeedback sets the "upwork_total_feedback" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateUpworkTotalFeedback() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateUpworkTotalFeedback()
	})
}

// SetUpworkRecentFeedback sets the "upwork_recent_feedback" field.
func (u *FreelancerUpsertBulk) SetUpworkRecentFeedback(v float64) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetUpworkRecentFeedback(v)
	})
}

// AddUpworkRecentFeedback adds v to the "upwork_recent_feedback" field.
func (u *FreelancerUpsertBulk) AddUpworkRecentFeedback(v float64) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddUpworkRecentFeedback(v)
	})
}

// UpdateUpworkRecentFeedback sets the "upwork_recent_feedback" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateUpworkRecentFeedback() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateUpworkRecentFeedback()
	})
}

// SetUpworkTopRatedStatus sets the "upwork_top_rated_status" field.
func (u *FreelancerUpsertBulk) SetUpworkTopRatedStatus(v bool) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetUpworkTopRatedStatus(v)
	})
}

// UpdateUpworkTopRatedStatus sets the "upwork_top_rated_status" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateUpworkTopRatedStatus() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateUpworkTopRatedStatus()
	})
}

// SetUpworkTopRatedPlusStatus sets the "upwork_top_rated_plus_status" field.
func (u *FreelancerUpsertBulk) SetUpworkTopRatedPlusStatus(v bool) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetUpworkTopRatedPlusStatus(v)
	})
}

// UpdateUpworkTopRatedPlusStatus sets the "upwork_top_rated_plus_status" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateUpworkTopRatedPlusStatus() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateUpworkTopRatedPlusStatus()
	})
}

// SetUpworkSponsored sets the "upwork_sponsored" field.
func (u *FreelancerUpsertBulk) SetUpworkSponsored(v bool) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetUpworkSponsored(v)
	})
}

// UpdateUpworkSponsored sets the "upwork_sponsored" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateUpworkSponsored() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateUpworkSponsored()
	})
}

// SetUpworkJobSuccessScore sets the "upwork_job_success_score" field.
func (u *FreelancerUpsertBulk) SetUpworkJobSuccessScore(v float64) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetUpworkJobSuccessScore(v)
	})
}

// AddUpworkJobSuccessScore adds v to the "upwork_job_success_score" field.
func (u *FreelancerUpsertBulk) AddUpworkJobSuccessScore(v float64) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddUpworkJobSuccessScore(v)
	})
}

// UpdateUpworkJobSuccessScore sets the "upwork_job_success_score" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateUpworkJobSuccessScore() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateUpworkJobSuccessScore()
	})
}

// SetUpworkReccomended sets the "upwork_reccomended" field.
func (u *FreelancerUpsertBulk) SetUpworkReccomended(v bool) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetUpworkReccomended(v)
	})
}

// UpdateUpworkReccomended sets the "upwork_reccomended" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateUpworkReccomended() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateUpworkReccomended()
	})
}

// SetSkills sets the "skills" field.
func (u *FreelancerUpsertBulk) SetSkills(v []string) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetSkills(v)
	})
}

// UpdateSkills sets the "skills" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateSkills() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateSkills()
	})
}

// SetAverageRecentEarnings sets the "average_recent_earnings" field.
func (u *FreelancerUpsertBulk) SetAverageRecentEarnings(v float64) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetAverageRecentEarnings(v)
	})
}

// AddAverageRecentEarnings adds v to the "average_recent_earnings" field.
func (u *FreelancerUpsertBulk) AddAverageRecentEarnings(v float64) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddAverageRecentEarnings(v)
	})
}

// UpdateAverageRecentEarnings sets the "average_recent_earnings" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateAverageRecentEarnings() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateAverageRecentEarnings()
	})
}

// SetCombinedAverageRecentEarnings sets the "combined_average_recent_earnings" field.
func (u *FreelancerUpsertBulk) SetCombinedAverageRecentEarnings(v float64) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetCombinedAverageRecentEarnings(v)
	})
}

// AddCombinedAverageRecentEarnings adds v to the "combined_average_recent_earnings" field.
func (u *FreelancerUpsertBulk) AddCombinedAverageRecentEarnings(v float64) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddCombinedAverageRecentEarnings(v)
	})
}

// UpdateCombinedAverageRecentEarnings sets the "combined_average_recent_earnings" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateCombinedAverageRecentEarnings() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateCombinedAverageRecentEarnings()
	})
}

// SetCombinedRecentEarnings sets the "combined_recent_earnings" field.
func (u *FreelancerUpsertBulk) SetCombinedRecentEarnings(v float64) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetCombinedRecentEarnings(v)
	})
}

// AddCombinedRecentEarnings adds v to the "combined_recent_earnings" field.
func (u *FreelancerUpsertBulk) AddCombinedRecentEarnings(v float64) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddCombinedRecentEarnings(v)
	})
}

// UpdateCombinedRecentEarnings sets the "combined_recent_earnings" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateCombinedRecentEarnings() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateCombinedRecentEarnings()
	})
}

// SetCombinedTotalEarnings sets the "combined_total_earnings" field.
func (u *FreelancerUpsertBulk) SetCombinedTotalEarnings(v float64) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetCombinedTotalEarnings(v)
	})
}

// AddCombinedTotalEarnings adds v to the "combined_total_earnings" field.
func (u *FreelancerUpsertBulk) AddCombinedTotalEarnings(v float64) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddCombinedTotalEarnings(v)
	})
}

// UpdateCombinedTotalEarnings sets the "combined_total_earnings" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateCombinedTotalEarnings() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateCombinedTotalEarnings()
	})
}

// SetCombinedTotalRevenue sets the "combined_total_revenue" field.
func (u *FreelancerUpsertBulk) SetCombinedTotalRevenue(v float64) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetCombinedTotalRevenue(v)
	})
}

// AddCombinedTotalRevenue adds v to the "combined_total_revenue" field.
func (u *FreelancerUpsertBulk) AddCombinedTotalRevenue(v float64) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddCombinedTotalRevenue(v)
	})
}

// UpdateCombinedTotalRevenue sets the "combined_total_revenue" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateCombinedTotalRevenue() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateCombinedTotalRevenue()
	})
}

// SetRecentEarnings sets the "recent_earnings" field.
func (u *FreelancerUpsertBulk) SetRecentEarnings(v float64) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetRecentEarnings(v)
	})
}

// AddRecentEarnings adds v to the "recent_earnings" field.
func (u *FreelancerUpsertBulk) AddRecentEarnings(v float64) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddRecentEarnings(v)
	})
}

// UpdateRecentEarnings sets the "recent_earnings" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateRecentEarnings() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateRecentEarnings()
	})
}

// SetTotalRevenue sets the "total_revenue" field.
func (u *FreelancerUpsertBulk) SetTotalRevenue(v float64) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetTotalRevenue(v)
	})
}

// AddTotalRevenue adds v to the "total_revenue" field.
func (u *FreelancerUpsertBulk) AddTotalRevenue(v float64) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddTotalRevenue(v)
	})
}

// UpdateTotalRevenue sets the "total_revenue" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateTotalRevenue() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateTotalRevenue()
	})
}

// SetUprankScore sets the "uprank_score" field.
func (u *FreelancerUpsertBulk) SetUprankScore(v int) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetUprankScore(v)
	})
}

// AddUprankScore adds v to the "uprank_score" field.
func (u *FreelancerUpsertBulk) AddUprankScore(v int) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.AddUprankScore(v)
	})
}

// UpdateUprankScore sets the "uprank_score" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateUprankScore() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateUprankScore()
	})
}

// ClearUprankScore clears the value of the "uprank_score" field.
func (u *FreelancerUpsertBulk) ClearUprankScore() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.ClearUprankScore()
	})
}

// SetUprankUpdatedAt sets the "uprank_updated_at" field.
func (u *FreelancerUpsertBulk) SetUprankUpdatedAt(v time.Time) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetUprankUpdatedAt(v)
	})
}

// UpdateUprankUpdatedAt sets the "uprank_updated_at" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateUprankUpdatedAt() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateUprankUpdatedAt()
	})
}

// SetUprankReccomended sets the "uprank_reccomended" field.
func (u *FreelancerUpsertBulk) SetUprankReccomended(v bool) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetUprankReccomended(v)
	})
}

// UpdateUprankReccomended sets the "uprank_reccomended" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateUprankReccomended() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateUprankReccomended()
	})
}

// ClearUprankReccomended clears the value of the "uprank_reccomended" field.
func (u *FreelancerUpsertBulk) ClearUprankReccomended() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.ClearUprankReccomended()
	})
}

// SetUprankReccomendedReasons sets the "uprank_reccomended_reasons" field.
func (u *FreelancerUpsertBulk) SetUprankReccomendedReasons(v string) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetUprankReccomendedReasons(v)
	})
}

// UpdateUprankReccomendedReasons sets the "uprank_reccomended_reasons" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateUprankReccomendedReasons() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateUprankReccomendedReasons()
	})
}

// ClearUprankReccomendedReasons clears the value of the "uprank_reccomended_reasons" field.
func (u *FreelancerUpsertBulk) ClearUprankReccomendedReasons() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.ClearUprankReccomendedReasons()
	})
}

// SetUprankNotEnoughData sets the "uprank_not_enough_data" field.
func (u *FreelancerUpsertBulk) SetUprankNotEnoughData(v bool) *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.SetUprankNotEnoughData(v)
	})
}

// UpdateUprankNotEnoughData sets the "uprank_not_enough_data" field to the value that was provided on create.
func (u *FreelancerUpsertBulk) UpdateUprankNotEnoughData() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.UpdateUprankNotEnoughData()
	})
}

// ClearUprankNotEnoughData clears the value of the "uprank_not_enough_data" field.
func (u *FreelancerUpsertBulk) ClearUprankNotEnoughData() *FreelancerUpsertBulk {
	return u.Update(func(s *FreelancerUpsert) {
		s.ClearUprankNotEnoughData()
	})
}

// Exec executes the query.
func (u *FreelancerUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FreelancerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FreelancerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FreelancerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
