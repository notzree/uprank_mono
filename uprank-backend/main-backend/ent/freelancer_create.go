// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/notzree/uprank-backend/main-backend/ent/attachmentref"
	"github.com/notzree/uprank-backend/main-backend/ent/freelancer"
	"github.com/notzree/uprank-backend/main-backend/ent/job"
	"github.com/notzree/uprank-backend/main-backend/ent/workhistory"
)

// FreelancerCreate is the builder for creating a Freelancer entity.
type FreelancerCreate struct {
	config
	mutation *FreelancerMutation
	hooks    []Hook
}

// SetURL sets the "url" field.
func (fc *FreelancerCreate) SetURL(s string) *FreelancerCreate {
	fc.mutation.SetURL(s)
	return fc
}

// SetName sets the "name" field.
func (fc *FreelancerCreate) SetName(s string) *FreelancerCreate {
	fc.mutation.SetName(s)
	return fc
}

// SetTitle sets the "title" field.
func (fc *FreelancerCreate) SetTitle(s string) *FreelancerCreate {
	fc.mutation.SetTitle(s)
	return fc
}

// SetDescription sets the "description" field.
func (fc *FreelancerCreate) SetDescription(s string) *FreelancerCreate {
	fc.mutation.SetDescription(s)
	return fc
}

// SetCity sets the "city" field.
func (fc *FreelancerCreate) SetCity(s string) *FreelancerCreate {
	fc.mutation.SetCity(s)
	return fc
}

// SetCountry sets the "country" field.
func (fc *FreelancerCreate) SetCountry(s string) *FreelancerCreate {
	fc.mutation.SetCountry(s)
	return fc
}

// SetTimezone sets the "timezone" field.
func (fc *FreelancerCreate) SetTimezone(s string) *FreelancerCreate {
	fc.mutation.SetTimezone(s)
	return fc
}

// SetCv sets the "cv" field.
func (fc *FreelancerCreate) SetCv(s string) *FreelancerCreate {
	fc.mutation.SetCv(s)
	return fc
}

// SetAiReccomended sets the "ai_reccomended" field.
func (fc *FreelancerCreate) SetAiReccomended(b bool) *FreelancerCreate {
	fc.mutation.SetAiReccomended(b)
	return fc
}

// SetFixedChargeAmount sets the "fixed_charge_amount" field.
func (fc *FreelancerCreate) SetFixedChargeAmount(i int) *FreelancerCreate {
	fc.mutation.SetFixedChargeAmount(i)
	return fc
}

// SetNillableFixedChargeAmount sets the "fixed_charge_amount" field if the given value is not nil.
func (fc *FreelancerCreate) SetNillableFixedChargeAmount(i *int) *FreelancerCreate {
	if i != nil {
		fc.SetFixedChargeAmount(*i)
	}
	return fc
}

// SetFixedChargeCurrency sets the "fixed_charge_currency" field.
func (fc *FreelancerCreate) SetFixedChargeCurrency(s string) *FreelancerCreate {
	fc.mutation.SetFixedChargeCurrency(s)
	return fc
}

// SetHourlyChargeAmount sets the "hourly_charge_amount" field.
func (fc *FreelancerCreate) SetHourlyChargeAmount(i int) *FreelancerCreate {
	fc.mutation.SetHourlyChargeAmount(i)
	return fc
}

// SetNillableHourlyChargeAmount sets the "hourly_charge_amount" field if the given value is not nil.
func (fc *FreelancerCreate) SetNillableHourlyChargeAmount(i *int) *FreelancerCreate {
	if i != nil {
		fc.SetHourlyChargeAmount(*i)
	}
	return fc
}

// SetHourlyChargeCurrency sets the "hourly_charge_currency" field.
func (fc *FreelancerCreate) SetHourlyChargeCurrency(s string) *FreelancerCreate {
	fc.mutation.SetHourlyChargeCurrency(s)
	return fc
}

// SetInvited sets the "invited" field.
func (fc *FreelancerCreate) SetInvited(b bool) *FreelancerCreate {
	fc.mutation.SetInvited(b)
	return fc
}

// SetPhotoURL sets the "photo_url" field.
func (fc *FreelancerCreate) SetPhotoURL(s string) *FreelancerCreate {
	fc.mutation.SetPhotoURL(s)
	return fc
}

// SetRecentHours sets the "recent_hours" field.
func (fc *FreelancerCreate) SetRecentHours(i int) *FreelancerCreate {
	fc.mutation.SetRecentHours(i)
	return fc
}

// SetTotalHours sets the "total_hours" field.
func (fc *FreelancerCreate) SetTotalHours(i int) *FreelancerCreate {
	fc.mutation.SetTotalHours(i)
	return fc
}

// SetTotalPortfolioItems sets the "total_portfolio_items" field.
func (fc *FreelancerCreate) SetTotalPortfolioItems(i int) *FreelancerCreate {
	fc.mutation.SetTotalPortfolioItems(i)
	return fc
}

// SetTotalPortfolioV2Items sets the "total_portfolio_v2_items" field.
func (fc *FreelancerCreate) SetTotalPortfolioV2Items(i int) *FreelancerCreate {
	fc.mutation.SetTotalPortfolioV2Items(i)
	return fc
}

// SetUpworkTotalFeedback sets the "upwork_total_feedback" field.
func (fc *FreelancerCreate) SetUpworkTotalFeedback(f float64) *FreelancerCreate {
	fc.mutation.SetUpworkTotalFeedback(f)
	return fc
}

// SetUpworkRecentFeedback sets the "upwork_recent_feedback" field.
func (fc *FreelancerCreate) SetUpworkRecentFeedback(f float64) *FreelancerCreate {
	fc.mutation.SetUpworkRecentFeedback(f)
	return fc
}

// SetUpworkTopRatedStatus sets the "upwork_top_rated_status" field.
func (fc *FreelancerCreate) SetUpworkTopRatedStatus(b bool) *FreelancerCreate {
	fc.mutation.SetUpworkTopRatedStatus(b)
	return fc
}

// SetUpworkTopRatedPlusStatus sets the "upwork_top_rated_plus_status" field.
func (fc *FreelancerCreate) SetUpworkTopRatedPlusStatus(b bool) *FreelancerCreate {
	fc.mutation.SetUpworkTopRatedPlusStatus(b)
	return fc
}

// SetUpworkSponsored sets the "upwork_sponsored" field.
func (fc *FreelancerCreate) SetUpworkSponsored(b bool) *FreelancerCreate {
	fc.mutation.SetUpworkSponsored(b)
	return fc
}

// SetUpworkJobSuccessScore sets the "upwork_job_success_score" field.
func (fc *FreelancerCreate) SetUpworkJobSuccessScore(f float64) *FreelancerCreate {
	fc.mutation.SetUpworkJobSuccessScore(f)
	return fc
}

// SetUpworkReccomended sets the "upwork_reccomended" field.
func (fc *FreelancerCreate) SetUpworkReccomended(b bool) *FreelancerCreate {
	fc.mutation.SetUpworkReccomended(b)
	return fc
}

// SetSkills sets the "skills" field.
func (fc *FreelancerCreate) SetSkills(s []string) *FreelancerCreate {
	fc.mutation.SetSkills(s)
	return fc
}

// SetAverageRecentEarnings sets the "average_recent_earnings" field.
func (fc *FreelancerCreate) SetAverageRecentEarnings(f float64) *FreelancerCreate {
	fc.mutation.SetAverageRecentEarnings(f)
	return fc
}

// SetCombinedAverageRecentEarnings sets the "combined_average_recent_earnings" field.
func (fc *FreelancerCreate) SetCombinedAverageRecentEarnings(f float64) *FreelancerCreate {
	fc.mutation.SetCombinedAverageRecentEarnings(f)
	return fc
}

// SetCombinedRecentEarnings sets the "combined_recent_earnings" field.
func (fc *FreelancerCreate) SetCombinedRecentEarnings(f float64) *FreelancerCreate {
	fc.mutation.SetCombinedRecentEarnings(f)
	return fc
}

// SetCombinedTotalEarnings sets the "combined_total_earnings" field.
func (fc *FreelancerCreate) SetCombinedTotalEarnings(f float64) *FreelancerCreate {
	fc.mutation.SetCombinedTotalEarnings(f)
	return fc
}

// SetCombinedTotalRevenue sets the "combined_total_revenue" field.
func (fc *FreelancerCreate) SetCombinedTotalRevenue(f float64) *FreelancerCreate {
	fc.mutation.SetCombinedTotalRevenue(f)
	return fc
}

// SetRecentEarnings sets the "recent_earnings" field.
func (fc *FreelancerCreate) SetRecentEarnings(f float64) *FreelancerCreate {
	fc.mutation.SetRecentEarnings(f)
	return fc
}

// SetTotalRevenue sets the "total_revenue" field.
func (fc *FreelancerCreate) SetTotalRevenue(f float64) *FreelancerCreate {
	fc.mutation.SetTotalRevenue(f)
	return fc
}

// SetUprankScore sets the "uprank_score" field.
func (fc *FreelancerCreate) SetUprankScore(i int) *FreelancerCreate {
	fc.mutation.SetUprankScore(i)
	return fc
}

// SetNillableUprankScore sets the "uprank_score" field if the given value is not nil.
func (fc *FreelancerCreate) SetNillableUprankScore(i *int) *FreelancerCreate {
	if i != nil {
		fc.SetUprankScore(*i)
	}
	return fc
}

// SetUprankUpdatedAt sets the "uprank_updated_at" field.
func (fc *FreelancerCreate) SetUprankUpdatedAt(t time.Time) *FreelancerCreate {
	fc.mutation.SetUprankUpdatedAt(t)
	return fc
}

// SetNillableUprankUpdatedAt sets the "uprank_updated_at" field if the given value is not nil.
func (fc *FreelancerCreate) SetNillableUprankUpdatedAt(t *time.Time) *FreelancerCreate {
	if t != nil {
		fc.SetUprankUpdatedAt(*t)
	}
	return fc
}

// SetUprankReccomended sets the "uprank_reccomended" field.
func (fc *FreelancerCreate) SetUprankReccomended(b bool) *FreelancerCreate {
	fc.mutation.SetUprankReccomended(b)
	return fc
}

// SetNillableUprankReccomended sets the "uprank_reccomended" field if the given value is not nil.
func (fc *FreelancerCreate) SetNillableUprankReccomended(b *bool) *FreelancerCreate {
	if b != nil {
		fc.SetUprankReccomended(*b)
	}
	return fc
}

// SetUprankReccomendedReasons sets the "uprank_reccomended_reasons" field.
func (fc *FreelancerCreate) SetUprankReccomendedReasons(s string) *FreelancerCreate {
	fc.mutation.SetUprankReccomendedReasons(s)
	return fc
}

// SetNillableUprankReccomendedReasons sets the "uprank_reccomended_reasons" field if the given value is not nil.
func (fc *FreelancerCreate) SetNillableUprankReccomendedReasons(s *string) *FreelancerCreate {
	if s != nil {
		fc.SetUprankReccomendedReasons(*s)
	}
	return fc
}

// SetUprankNotEnoughData sets the "uprank_not_enough_data" field.
func (fc *FreelancerCreate) SetUprankNotEnoughData(b bool) *FreelancerCreate {
	fc.mutation.SetUprankNotEnoughData(b)
	return fc
}

// SetNillableUprankNotEnoughData sets the "uprank_not_enough_data" field if the given value is not nil.
func (fc *FreelancerCreate) SetNillableUprankNotEnoughData(b *bool) *FreelancerCreate {
	if b != nil {
		fc.SetUprankNotEnoughData(*b)
	}
	return fc
}

// SetID sets the "id" field.
func (fc *FreelancerCreate) SetID(u uuid.UUID) *FreelancerCreate {
	fc.mutation.SetID(u)
	return fc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fc *FreelancerCreate) SetNillableID(u *uuid.UUID) *FreelancerCreate {
	if u != nil {
		fc.SetID(*u)
	}
	return fc
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (fc *FreelancerCreate) SetJobID(id int) *FreelancerCreate {
	fc.mutation.SetJobID(id)
	return fc
}

// SetJob sets the "job" edge to the Job entity.
func (fc *FreelancerCreate) SetJob(j *Job) *FreelancerCreate {
	return fc.SetJobID(j.ID)
}

// AddAttachmentIDs adds the "attachments" edge to the AttachmentRef entity by IDs.
func (fc *FreelancerCreate) AddAttachmentIDs(ids ...int) *FreelancerCreate {
	fc.mutation.AddAttachmentIDs(ids...)
	return fc
}

// AddAttachments adds the "attachments" edges to the AttachmentRef entity.
func (fc *FreelancerCreate) AddAttachments(a ...*AttachmentRef) *FreelancerCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return fc.AddAttachmentIDs(ids...)
}

// AddWorkHistoryIDs adds the "work_histories" edge to the WorkHistory entity by IDs.
func (fc *FreelancerCreate) AddWorkHistoryIDs(ids ...int) *FreelancerCreate {
	fc.mutation.AddWorkHistoryIDs(ids...)
	return fc
}

// AddWorkHistories adds the "work_histories" edges to the WorkHistory entity.
func (fc *FreelancerCreate) AddWorkHistories(w ...*WorkHistory) *FreelancerCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return fc.AddWorkHistoryIDs(ids...)
}

// Mutation returns the FreelancerMutation object of the builder.
func (fc *FreelancerCreate) Mutation() *FreelancerMutation {
	return fc.mutation
}

// Save creates the Freelancer in the database.
func (fc *FreelancerCreate) Save(ctx context.Context) (*Freelancer, error) {
	fc.defaults()
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FreelancerCreate) SaveX(ctx context.Context) *Freelancer {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FreelancerCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FreelancerCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FreelancerCreate) defaults() {
	if _, ok := fc.mutation.UprankScore(); !ok {
		v := freelancer.DefaultUprankScore
		fc.mutation.SetUprankScore(v)
	}
	if _, ok := fc.mutation.UprankUpdatedAt(); !ok {
		v := freelancer.DefaultUprankUpdatedAt()
		fc.mutation.SetUprankUpdatedAt(v)
	}
	if _, ok := fc.mutation.UprankReccomended(); !ok {
		v := freelancer.DefaultUprankReccomended
		fc.mutation.SetUprankReccomended(v)
	}
	if _, ok := fc.mutation.UprankNotEnoughData(); !ok {
		v := freelancer.DefaultUprankNotEnoughData
		fc.mutation.SetUprankNotEnoughData(v)
	}
	if _, ok := fc.mutation.ID(); !ok {
		v := freelancer.DefaultID()
		fc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FreelancerCreate) check() error {
	if _, ok := fc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Freelancer.url"`)}
	}
	if _, ok := fc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Freelancer.name"`)}
	}
	if _, ok := fc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Freelancer.title"`)}
	}
	if _, ok := fc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Freelancer.description"`)}
	}
	if _, ok := fc.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "Freelancer.city"`)}
	}
	if _, ok := fc.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`ent: missing required field "Freelancer.country"`)}
	}
	if _, ok := fc.mutation.Timezone(); !ok {
		return &ValidationError{Name: "timezone", err: errors.New(`ent: missing required field "Freelancer.timezone"`)}
	}
	if _, ok := fc.mutation.Cv(); !ok {
		return &ValidationError{Name: "cv", err: errors.New(`ent: missing required field "Freelancer.cv"`)}
	}
	if _, ok := fc.mutation.AiReccomended(); !ok {
		return &ValidationError{Name: "ai_reccomended", err: errors.New(`ent: missing required field "Freelancer.ai_reccomended"`)}
	}
	if _, ok := fc.mutation.FixedChargeCurrency(); !ok {
		return &ValidationError{Name: "fixed_charge_currency", err: errors.New(`ent: missing required field "Freelancer.fixed_charge_currency"`)}
	}
	if _, ok := fc.mutation.HourlyChargeCurrency(); !ok {
		return &ValidationError{Name: "hourly_charge_currency", err: errors.New(`ent: missing required field "Freelancer.hourly_charge_currency"`)}
	}
	if _, ok := fc.mutation.Invited(); !ok {
		return &ValidationError{Name: "invited", err: errors.New(`ent: missing required field "Freelancer.invited"`)}
	}
	if _, ok := fc.mutation.PhotoURL(); !ok {
		return &ValidationError{Name: "photo_url", err: errors.New(`ent: missing required field "Freelancer.photo_url"`)}
	}
	if _, ok := fc.mutation.RecentHours(); !ok {
		return &ValidationError{Name: "recent_hours", err: errors.New(`ent: missing required field "Freelancer.recent_hours"`)}
	}
	if _, ok := fc.mutation.TotalHours(); !ok {
		return &ValidationError{Name: "total_hours", err: errors.New(`ent: missing required field "Freelancer.total_hours"`)}
	}
	if _, ok := fc.mutation.TotalPortfolioItems(); !ok {
		return &ValidationError{Name: "total_portfolio_items", err: errors.New(`ent: missing required field "Freelancer.total_portfolio_items"`)}
	}
	if _, ok := fc.mutation.TotalPortfolioV2Items(); !ok {
		return &ValidationError{Name: "total_portfolio_v2_items", err: errors.New(`ent: missing required field "Freelancer.total_portfolio_v2_items"`)}
	}
	if _, ok := fc.mutation.UpworkTotalFeedback(); !ok {
		return &ValidationError{Name: "upwork_total_feedback", err: errors.New(`ent: missing required field "Freelancer.upwork_total_feedback"`)}
	}
	if _, ok := fc.mutation.UpworkRecentFeedback(); !ok {
		return &ValidationError{Name: "upwork_recent_feedback", err: errors.New(`ent: missing required field "Freelancer.upwork_recent_feedback"`)}
	}
	if _, ok := fc.mutation.UpworkTopRatedStatus(); !ok {
		return &ValidationError{Name: "upwork_top_rated_status", err: errors.New(`ent: missing required field "Freelancer.upwork_top_rated_status"`)}
	}
	if _, ok := fc.mutation.UpworkTopRatedPlusStatus(); !ok {
		return &ValidationError{Name: "upwork_top_rated_plus_status", err: errors.New(`ent: missing required field "Freelancer.upwork_top_rated_plus_status"`)}
	}
	if _, ok := fc.mutation.UpworkSponsored(); !ok {
		return &ValidationError{Name: "upwork_sponsored", err: errors.New(`ent: missing required field "Freelancer.upwork_sponsored"`)}
	}
	if _, ok := fc.mutation.UpworkJobSuccessScore(); !ok {
		return &ValidationError{Name: "upwork_job_success_score", err: errors.New(`ent: missing required field "Freelancer.upwork_job_success_score"`)}
	}
	if _, ok := fc.mutation.UpworkReccomended(); !ok {
		return &ValidationError{Name: "upwork_reccomended", err: errors.New(`ent: missing required field "Freelancer.upwork_reccomended"`)}
	}
	if _, ok := fc.mutation.Skills(); !ok {
		return &ValidationError{Name: "skills", err: errors.New(`ent: missing required field "Freelancer.skills"`)}
	}
	if _, ok := fc.mutation.AverageRecentEarnings(); !ok {
		return &ValidationError{Name: "average_recent_earnings", err: errors.New(`ent: missing required field "Freelancer.average_recent_earnings"`)}
	}
	if _, ok := fc.mutation.CombinedAverageRecentEarnings(); !ok {
		return &ValidationError{Name: "combined_average_recent_earnings", err: errors.New(`ent: missing required field "Freelancer.combined_average_recent_earnings"`)}
	}
	if _, ok := fc.mutation.CombinedRecentEarnings(); !ok {
		return &ValidationError{Name: "combined_recent_earnings", err: errors.New(`ent: missing required field "Freelancer.combined_recent_earnings"`)}
	}
	if _, ok := fc.mutation.CombinedTotalEarnings(); !ok {
		return &ValidationError{Name: "combined_total_earnings", err: errors.New(`ent: missing required field "Freelancer.combined_total_earnings"`)}
	}
	if _, ok := fc.mutation.CombinedTotalRevenue(); !ok {
		return &ValidationError{Name: "combined_total_revenue", err: errors.New(`ent: missing required field "Freelancer.combined_total_revenue"`)}
	}
	if _, ok := fc.mutation.RecentEarnings(); !ok {
		return &ValidationError{Name: "recent_earnings", err: errors.New(`ent: missing required field "Freelancer.recent_earnings"`)}
	}
	if _, ok := fc.mutation.TotalRevenue(); !ok {
		return &ValidationError{Name: "total_revenue", err: errors.New(`ent: missing required field "Freelancer.total_revenue"`)}
	}
	if _, ok := fc.mutation.UprankUpdatedAt(); !ok {
		return &ValidationError{Name: "uprank_updated_at", err: errors.New(`ent: missing required field "Freelancer.uprank_updated_at"`)}
	}
	if _, ok := fc.mutation.JobID(); !ok {
		return &ValidationError{Name: "job", err: errors.New(`ent: missing required edge "Freelancer.job"`)}
	}
	return nil
}

func (fc *FreelancerCreate) sqlSave(ctx context.Context) (*Freelancer, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FreelancerCreate) createSpec() (*Freelancer, *sqlgraph.CreateSpec) {
	var (
		_node = &Freelancer{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(freelancer.Table, sqlgraph.NewFieldSpec(freelancer.FieldID, field.TypeUUID))
	)
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := fc.mutation.URL(); ok {
		_spec.SetField(freelancer.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := fc.mutation.Name(); ok {
		_spec.SetField(freelancer.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := fc.mutation.Title(); ok {
		_spec.SetField(freelancer.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := fc.mutation.Description(); ok {
		_spec.SetField(freelancer.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := fc.mutation.City(); ok {
		_spec.SetField(freelancer.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := fc.mutation.Country(); ok {
		_spec.SetField(freelancer.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := fc.mutation.Timezone(); ok {
		_spec.SetField(freelancer.FieldTimezone, field.TypeString, value)
		_node.Timezone = value
	}
	if value, ok := fc.mutation.Cv(); ok {
		_spec.SetField(freelancer.FieldCv, field.TypeString, value)
		_node.Cv = value
	}
	if value, ok := fc.mutation.AiReccomended(); ok {
		_spec.SetField(freelancer.FieldAiReccomended, field.TypeBool, value)
		_node.AiReccomended = value
	}
	if value, ok := fc.mutation.FixedChargeAmount(); ok {
		_spec.SetField(freelancer.FieldFixedChargeAmount, field.TypeInt, value)
		_node.FixedChargeAmount = value
	}
	if value, ok := fc.mutation.FixedChargeCurrency(); ok {
		_spec.SetField(freelancer.FieldFixedChargeCurrency, field.TypeString, value)
		_node.FixedChargeCurrency = value
	}
	if value, ok := fc.mutation.HourlyChargeAmount(); ok {
		_spec.SetField(freelancer.FieldHourlyChargeAmount, field.TypeInt, value)
		_node.HourlyChargeAmount = value
	}
	if value, ok := fc.mutation.HourlyChargeCurrency(); ok {
		_spec.SetField(freelancer.FieldHourlyChargeCurrency, field.TypeString, value)
		_node.HourlyChargeCurrency = value
	}
	if value, ok := fc.mutation.Invited(); ok {
		_spec.SetField(freelancer.FieldInvited, field.TypeBool, value)
		_node.Invited = value
	}
	if value, ok := fc.mutation.PhotoURL(); ok {
		_spec.SetField(freelancer.FieldPhotoURL, field.TypeString, value)
		_node.PhotoURL = value
	}
	if value, ok := fc.mutation.RecentHours(); ok {
		_spec.SetField(freelancer.FieldRecentHours, field.TypeInt, value)
		_node.RecentHours = value
	}
	if value, ok := fc.mutation.TotalHours(); ok {
		_spec.SetField(freelancer.FieldTotalHours, field.TypeInt, value)
		_node.TotalHours = value
	}
	if value, ok := fc.mutation.TotalPortfolioItems(); ok {
		_spec.SetField(freelancer.FieldTotalPortfolioItems, field.TypeInt, value)
		_node.TotalPortfolioItems = value
	}
	if value, ok := fc.mutation.TotalPortfolioV2Items(); ok {
		_spec.SetField(freelancer.FieldTotalPortfolioV2Items, field.TypeInt, value)
		_node.TotalPortfolioV2Items = value
	}
	if value, ok := fc.mutation.UpworkTotalFeedback(); ok {
		_spec.SetField(freelancer.FieldUpworkTotalFeedback, field.TypeFloat64, value)
		_node.UpworkTotalFeedback = value
	}
	if value, ok := fc.mutation.UpworkRecentFeedback(); ok {
		_spec.SetField(freelancer.FieldUpworkRecentFeedback, field.TypeFloat64, value)
		_node.UpworkRecentFeedback = value
	}
	if value, ok := fc.mutation.UpworkTopRatedStatus(); ok {
		_spec.SetField(freelancer.FieldUpworkTopRatedStatus, field.TypeBool, value)
		_node.UpworkTopRatedStatus = value
	}
	if value, ok := fc.mutation.UpworkTopRatedPlusStatus(); ok {
		_spec.SetField(freelancer.FieldUpworkTopRatedPlusStatus, field.TypeBool, value)
		_node.UpworkTopRatedPlusStatus = value
	}
	if value, ok := fc.mutation.UpworkSponsored(); ok {
		_spec.SetField(freelancer.FieldUpworkSponsored, field.TypeBool, value)
		_node.UpworkSponsored = value
	}
	if value, ok := fc.mutation.UpworkJobSuccessScore(); ok {
		_spec.SetField(freelancer.FieldUpworkJobSuccessScore, field.TypeFloat64, value)
		_node.UpworkJobSuccessScore = value
	}
	if value, ok := fc.mutation.UpworkReccomended(); ok {
		_spec.SetField(freelancer.FieldUpworkReccomended, field.TypeBool, value)
		_node.UpworkReccomended = value
	}
	if value, ok := fc.mutation.Skills(); ok {
		_spec.SetField(freelancer.FieldSkills, field.TypeJSON, value)
		_node.Skills = value
	}
	if value, ok := fc.mutation.AverageRecentEarnings(); ok {
		_spec.SetField(freelancer.FieldAverageRecentEarnings, field.TypeFloat64, value)
		_node.AverageRecentEarnings = value
	}
	if value, ok := fc.mutation.CombinedAverageRecentEarnings(); ok {
		_spec.SetField(freelancer.FieldCombinedAverageRecentEarnings, field.TypeFloat64, value)
		_node.CombinedAverageRecentEarnings = value
	}
	if value, ok := fc.mutation.CombinedRecentEarnings(); ok {
		_spec.SetField(freelancer.FieldCombinedRecentEarnings, field.TypeFloat64, value)
		_node.CombinedRecentEarnings = value
	}
	if value, ok := fc.mutation.CombinedTotalEarnings(); ok {
		_spec.SetField(freelancer.FieldCombinedTotalEarnings, field.TypeFloat64, value)
		_node.CombinedTotalEarnings = value
	}
	if value, ok := fc.mutation.CombinedTotalRevenue(); ok {
		_spec.SetField(freelancer.FieldCombinedTotalRevenue, field.TypeFloat64, value)
		_node.CombinedTotalRevenue = value
	}
	if value, ok := fc.mutation.RecentEarnings(); ok {
		_spec.SetField(freelancer.FieldRecentEarnings, field.TypeFloat64, value)
		_node.RecentEarnings = value
	}
	if value, ok := fc.mutation.TotalRevenue(); ok {
		_spec.SetField(freelancer.FieldTotalRevenue, field.TypeFloat64, value)
		_node.TotalRevenue = value
	}
	if value, ok := fc.mutation.UprankScore(); ok {
		_spec.SetField(freelancer.FieldUprankScore, field.TypeInt, value)
		_node.UprankScore = value
	}
	if value, ok := fc.mutation.UprankUpdatedAt(); ok {
		_spec.SetField(freelancer.FieldUprankUpdatedAt, field.TypeTime, value)
		_node.UprankUpdatedAt = value
	}
	if value, ok := fc.mutation.UprankReccomended(); ok {
		_spec.SetField(freelancer.FieldUprankReccomended, field.TypeBool, value)
		_node.UprankReccomended = value
	}
	if value, ok := fc.mutation.UprankReccomendedReasons(); ok {
		_spec.SetField(freelancer.FieldUprankReccomendedReasons, field.TypeString, value)
		_node.UprankReccomendedReasons = value
	}
	if value, ok := fc.mutation.UprankNotEnoughData(); ok {
		_spec.SetField(freelancer.FieldUprankNotEnoughData, field.TypeBool, value)
		_node.UprankNotEnoughData = value
	}
	if nodes := fc.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   freelancer.JobTable,
			Columns: []string{freelancer.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.job_freelancers = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.AttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   freelancer.AttachmentsTable,
			Columns: []string{freelancer.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachmentref.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.WorkHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   freelancer.WorkHistoriesTable,
			Columns: []string{freelancer.WorkHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FreelancerCreateBulk is the builder for creating many Freelancer entities in bulk.
type FreelancerCreateBulk struct {
	config
	err      error
	builders []*FreelancerCreate
}

// Save creates the Freelancer entities in the database.
func (fcb *FreelancerCreateBulk) Save(ctx context.Context) ([]*Freelancer, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Freelancer, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FreelancerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FreelancerCreateBulk) SaveX(ctx context.Context) []*Freelancer {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FreelancerCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FreelancerCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}
