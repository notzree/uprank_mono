// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/notzree/uprank-backend/main-backend/ent/freelancer"
	"github.com/notzree/uprank-backend/main-backend/ent/predicate"
	"github.com/notzree/uprank-backend/main-backend/ent/workhistory"
)

// WorkHistoryUpdate is the builder for updating WorkHistory entities.
type WorkHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *WorkHistoryMutation
}

// Where appends a list predicates to the WorkHistoryUpdate builder.
func (whu *WorkHistoryUpdate) Where(ps ...predicate.WorkHistory) *WorkHistoryUpdate {
	whu.mutation.Where(ps...)
	return whu
}

// SetTitle sets the "title" field.
func (whu *WorkHistoryUpdate) SetTitle(s string) *WorkHistoryUpdate {
	whu.mutation.SetTitle(s)
	return whu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (whu *WorkHistoryUpdate) SetNillableTitle(s *string) *WorkHistoryUpdate {
	if s != nil {
		whu.SetTitle(*s)
	}
	return whu
}

// SetClientFeedback sets the "client_feedback" field.
func (whu *WorkHistoryUpdate) SetClientFeedback(s string) *WorkHistoryUpdate {
	whu.mutation.SetClientFeedback(s)
	return whu
}

// SetNillableClientFeedback sets the "client_feedback" field if the given value is not nil.
func (whu *WorkHistoryUpdate) SetNillableClientFeedback(s *string) *WorkHistoryUpdate {
	if s != nil {
		whu.SetClientFeedback(*s)
	}
	return whu
}

// SetOverallRating sets the "overall_rating" field.
func (whu *WorkHistoryUpdate) SetOverallRating(f float64) *WorkHistoryUpdate {
	whu.mutation.ResetOverallRating()
	whu.mutation.SetOverallRating(f)
	return whu
}

// SetNillableOverallRating sets the "overall_rating" field if the given value is not nil.
func (whu *WorkHistoryUpdate) SetNillableOverallRating(f *float64) *WorkHistoryUpdate {
	if f != nil {
		whu.SetOverallRating(*f)
	}
	return whu
}

// AddOverallRating adds f to the "overall_rating" field.
func (whu *WorkHistoryUpdate) AddOverallRating(f float64) *WorkHistoryUpdate {
	whu.mutation.AddOverallRating(f)
	return whu
}

// SetIsHourly sets the "is_hourly" field.
func (whu *WorkHistoryUpdate) SetIsHourly(b bool) *WorkHistoryUpdate {
	whu.mutation.SetIsHourly(b)
	return whu
}

// SetNillableIsHourly sets the "is_hourly" field if the given value is not nil.
func (whu *WorkHistoryUpdate) SetNillableIsHourly(b *bool) *WorkHistoryUpdate {
	if b != nil {
		whu.SetIsHourly(*b)
	}
	return whu
}

// SetFreelancerEarnings sets the "freelancer_earnings" field.
func (whu *WorkHistoryUpdate) SetFreelancerEarnings(f float64) *WorkHistoryUpdate {
	whu.mutation.ResetFreelancerEarnings()
	whu.mutation.SetFreelancerEarnings(f)
	return whu
}

// SetNillableFreelancerEarnings sets the "freelancer_earnings" field if the given value is not nil.
func (whu *WorkHistoryUpdate) SetNillableFreelancerEarnings(f *float64) *WorkHistoryUpdate {
	if f != nil {
		whu.SetFreelancerEarnings(*f)
	}
	return whu
}

// AddFreelancerEarnings adds f to the "freelancer_earnings" field.
func (whu *WorkHistoryUpdate) AddFreelancerEarnings(f float64) *WorkHistoryUpdate {
	whu.mutation.AddFreelancerEarnings(f)
	return whu
}

// SetStartDate sets the "start_date" field.
func (whu *WorkHistoryUpdate) SetStartDate(t time.Time) *WorkHistoryUpdate {
	whu.mutation.SetStartDate(t)
	return whu
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (whu *WorkHistoryUpdate) SetNillableStartDate(t *time.Time) *WorkHistoryUpdate {
	if t != nil {
		whu.SetStartDate(*t)
	}
	return whu
}

// SetEndDate sets the "end_date" field.
func (whu *WorkHistoryUpdate) SetEndDate(t time.Time) *WorkHistoryUpdate {
	whu.mutation.SetEndDate(t)
	return whu
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (whu *WorkHistoryUpdate) SetNillableEndDate(t *time.Time) *WorkHistoryUpdate {
	if t != nil {
		whu.SetEndDate(*t)
	}
	return whu
}

// ClearEndDate clears the value of the "end_date" field.
func (whu *WorkHistoryUpdate) ClearEndDate() *WorkHistoryUpdate {
	whu.mutation.ClearEndDate()
	return whu
}

// SetDescription sets the "description" field.
func (whu *WorkHistoryUpdate) SetDescription(s string) *WorkHistoryUpdate {
	whu.mutation.SetDescription(s)
	return whu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (whu *WorkHistoryUpdate) SetNillableDescription(s *string) *WorkHistoryUpdate {
	if s != nil {
		whu.SetDescription(*s)
	}
	return whu
}

// SetBudget sets the "budget" field.
func (whu *WorkHistoryUpdate) SetBudget(f float64) *WorkHistoryUpdate {
	whu.mutation.ResetBudget()
	whu.mutation.SetBudget(f)
	return whu
}

// SetNillableBudget sets the "budget" field if the given value is not nil.
func (whu *WorkHistoryUpdate) SetNillableBudget(f *float64) *WorkHistoryUpdate {
	if f != nil {
		whu.SetBudget(*f)
	}
	return whu
}

// AddBudget adds f to the "budget" field.
func (whu *WorkHistoryUpdate) AddBudget(f float64) *WorkHistoryUpdate {
	whu.mutation.AddBudget(f)
	return whu
}

// SetTotalProposals sets the "total_proposals" field.
func (whu *WorkHistoryUpdate) SetTotalProposals(i int) *WorkHistoryUpdate {
	whu.mutation.ResetTotalProposals()
	whu.mutation.SetTotalProposals(i)
	return whu
}

// SetNillableTotalProposals sets the "total_proposals" field if the given value is not nil.
func (whu *WorkHistoryUpdate) SetNillableTotalProposals(i *int) *WorkHistoryUpdate {
	if i != nil {
		whu.SetTotalProposals(*i)
	}
	return whu
}

// AddTotalProposals adds i to the "total_proposals" field.
func (whu *WorkHistoryUpdate) AddTotalProposals(i int) *WorkHistoryUpdate {
	whu.mutation.AddTotalProposals(i)
	return whu
}

// SetNumberOfInterviews sets the "number_of_interviews" field.
func (whu *WorkHistoryUpdate) SetNumberOfInterviews(i int) *WorkHistoryUpdate {
	whu.mutation.ResetNumberOfInterviews()
	whu.mutation.SetNumberOfInterviews(i)
	return whu
}

// SetNillableNumberOfInterviews sets the "number_of_interviews" field if the given value is not nil.
func (whu *WorkHistoryUpdate) SetNillableNumberOfInterviews(i *int) *WorkHistoryUpdate {
	if i != nil {
		whu.SetNumberOfInterviews(*i)
	}
	return whu
}

// AddNumberOfInterviews adds i to the "number_of_interviews" field.
func (whu *WorkHistoryUpdate) AddNumberOfInterviews(i int) *WorkHistoryUpdate {
	whu.mutation.AddNumberOfInterviews(i)
	return whu
}

// SetSkills sets the "skills" field.
func (whu *WorkHistoryUpdate) SetSkills(s []string) *WorkHistoryUpdate {
	whu.mutation.SetSkills(s)
	return whu
}

// AppendSkills appends s to the "skills" field.
func (whu *WorkHistoryUpdate) AppendSkills(s []string) *WorkHistoryUpdate {
	whu.mutation.AppendSkills(s)
	return whu
}

// SetClientRating sets the "client_rating" field.
func (whu *WorkHistoryUpdate) SetClientRating(f float64) *WorkHistoryUpdate {
	whu.mutation.ResetClientRating()
	whu.mutation.SetClientRating(f)
	return whu
}

// SetNillableClientRating sets the "client_rating" field if the given value is not nil.
func (whu *WorkHistoryUpdate) SetNillableClientRating(f *float64) *WorkHistoryUpdate {
	if f != nil {
		whu.SetClientRating(*f)
	}
	return whu
}

// AddClientRating adds f to the "client_rating" field.
func (whu *WorkHistoryUpdate) AddClientRating(f float64) *WorkHistoryUpdate {
	whu.mutation.AddClientRating(f)
	return whu
}

// SetClientReviewCount sets the "client_review_count" field.
func (whu *WorkHistoryUpdate) SetClientReviewCount(i int) *WorkHistoryUpdate {
	whu.mutation.ResetClientReviewCount()
	whu.mutation.SetClientReviewCount(i)
	return whu
}

// SetNillableClientReviewCount sets the "client_review_count" field if the given value is not nil.
func (whu *WorkHistoryUpdate) SetNillableClientReviewCount(i *int) *WorkHistoryUpdate {
	if i != nil {
		whu.SetClientReviewCount(*i)
	}
	return whu
}

// AddClientReviewCount adds i to the "client_review_count" field.
func (whu *WorkHistoryUpdate) AddClientReviewCount(i int) *WorkHistoryUpdate {
	whu.mutation.AddClientReviewCount(i)
	return whu
}

// SetClientCountry sets the "client_country" field.
func (whu *WorkHistoryUpdate) SetClientCountry(s string) *WorkHistoryUpdate {
	whu.mutation.SetClientCountry(s)
	return whu
}

// SetNillableClientCountry sets the "client_country" field if the given value is not nil.
func (whu *WorkHistoryUpdate) SetNillableClientCountry(s *string) *WorkHistoryUpdate {
	if s != nil {
		whu.SetClientCountry(*s)
	}
	return whu
}

// SetClientTotalJobsPosted sets the "client_total_jobs_posted" field.
func (whu *WorkHistoryUpdate) SetClientTotalJobsPosted(i int) *WorkHistoryUpdate {
	whu.mutation.ResetClientTotalJobsPosted()
	whu.mutation.SetClientTotalJobsPosted(i)
	return whu
}

// SetNillableClientTotalJobsPosted sets the "client_total_jobs_posted" field if the given value is not nil.
func (whu *WorkHistoryUpdate) SetNillableClientTotalJobsPosted(i *int) *WorkHistoryUpdate {
	if i != nil {
		whu.SetClientTotalJobsPosted(*i)
	}
	return whu
}

// AddClientTotalJobsPosted adds i to the "client_total_jobs_posted" field.
func (whu *WorkHistoryUpdate) AddClientTotalJobsPosted(i int) *WorkHistoryUpdate {
	whu.mutation.AddClientTotalJobsPosted(i)
	return whu
}

// SetClientTotalSpend sets the "client_total_spend" field.
func (whu *WorkHistoryUpdate) SetClientTotalSpend(f float64) *WorkHistoryUpdate {
	whu.mutation.ResetClientTotalSpend()
	whu.mutation.SetClientTotalSpend(f)
	return whu
}

// SetNillableClientTotalSpend sets the "client_total_spend" field if the given value is not nil.
func (whu *WorkHistoryUpdate) SetNillableClientTotalSpend(f *float64) *WorkHistoryUpdate {
	if f != nil {
		whu.SetClientTotalSpend(*f)
	}
	return whu
}

// AddClientTotalSpend adds f to the "client_total_spend" field.
func (whu *WorkHistoryUpdate) AddClientTotalSpend(f float64) *WorkHistoryUpdate {
	whu.mutation.AddClientTotalSpend(f)
	return whu
}

// SetClientTotalHires sets the "client_total_hires" field.
func (whu *WorkHistoryUpdate) SetClientTotalHires(i int) *WorkHistoryUpdate {
	whu.mutation.ResetClientTotalHires()
	whu.mutation.SetClientTotalHires(i)
	return whu
}

// SetNillableClientTotalHires sets the "client_total_hires" field if the given value is not nil.
func (whu *WorkHistoryUpdate) SetNillableClientTotalHires(i *int) *WorkHistoryUpdate {
	if i != nil {
		whu.SetClientTotalHires(*i)
	}
	return whu
}

// AddClientTotalHires adds i to the "client_total_hires" field.
func (whu *WorkHistoryUpdate) AddClientTotalHires(i int) *WorkHistoryUpdate {
	whu.mutation.AddClientTotalHires(i)
	return whu
}

// ClearClientTotalHires clears the value of the "client_total_hires" field.
func (whu *WorkHistoryUpdate) ClearClientTotalHires() *WorkHistoryUpdate {
	whu.mutation.ClearClientTotalHires()
	return whu
}

// SetClientTotalPaidHours sets the "client_total_paid_hours" field.
func (whu *WorkHistoryUpdate) SetClientTotalPaidHours(i int) *WorkHistoryUpdate {
	whu.mutation.ResetClientTotalPaidHours()
	whu.mutation.SetClientTotalPaidHours(i)
	return whu
}

// SetNillableClientTotalPaidHours sets the "client_total_paid_hours" field if the given value is not nil.
func (whu *WorkHistoryUpdate) SetNillableClientTotalPaidHours(i *int) *WorkHistoryUpdate {
	if i != nil {
		whu.SetClientTotalPaidHours(*i)
	}
	return whu
}

// AddClientTotalPaidHours adds i to the "client_total_paid_hours" field.
func (whu *WorkHistoryUpdate) AddClientTotalPaidHours(i int) *WorkHistoryUpdate {
	whu.mutation.AddClientTotalPaidHours(i)
	return whu
}

// ClearClientTotalPaidHours clears the value of the "client_total_paid_hours" field.
func (whu *WorkHistoryUpdate) ClearClientTotalPaidHours() *WorkHistoryUpdate {
	whu.mutation.ClearClientTotalPaidHours()
	return whu
}

// SetClientAverageHourlyRatePaid sets the "client_average_hourly_rate_paid" field.
func (whu *WorkHistoryUpdate) SetClientAverageHourlyRatePaid(f float64) *WorkHistoryUpdate {
	whu.mutation.ResetClientAverageHourlyRatePaid()
	whu.mutation.SetClientAverageHourlyRatePaid(f)
	return whu
}

// SetNillableClientAverageHourlyRatePaid sets the "client_average_hourly_rate_paid" field if the given value is not nil.
func (whu *WorkHistoryUpdate) SetNillableClientAverageHourlyRatePaid(f *float64) *WorkHistoryUpdate {
	if f != nil {
		whu.SetClientAverageHourlyRatePaid(*f)
	}
	return whu
}

// AddClientAverageHourlyRatePaid adds f to the "client_average_hourly_rate_paid" field.
func (whu *WorkHistoryUpdate) AddClientAverageHourlyRatePaid(f float64) *WorkHistoryUpdate {
	whu.mutation.AddClientAverageHourlyRatePaid(f)
	return whu
}

// ClearClientAverageHourlyRatePaid clears the value of the "client_average_hourly_rate_paid" field.
func (whu *WorkHistoryUpdate) ClearClientAverageHourlyRatePaid() *WorkHistoryUpdate {
	whu.mutation.ClearClientAverageHourlyRatePaid()
	return whu
}

// SetClientCompanyCategory sets the "client_company_category" field.
func (whu *WorkHistoryUpdate) SetClientCompanyCategory(s string) *WorkHistoryUpdate {
	whu.mutation.SetClientCompanyCategory(s)
	return whu
}

// SetNillableClientCompanyCategory sets the "client_company_category" field if the given value is not nil.
func (whu *WorkHistoryUpdate) SetNillableClientCompanyCategory(s *string) *WorkHistoryUpdate {
	if s != nil {
		whu.SetClientCompanyCategory(*s)
	}
	return whu
}

// ClearClientCompanyCategory clears the value of the "client_company_category" field.
func (whu *WorkHistoryUpdate) ClearClientCompanyCategory() *WorkHistoryUpdate {
	whu.mutation.ClearClientCompanyCategory()
	return whu
}

// SetClientCompanySize sets the "client_company_size" field.
func (whu *WorkHistoryUpdate) SetClientCompanySize(s string) *WorkHistoryUpdate {
	whu.mutation.SetClientCompanySize(s)
	return whu
}

// SetNillableClientCompanySize sets the "client_company_size" field if the given value is not nil.
func (whu *WorkHistoryUpdate) SetNillableClientCompanySize(s *string) *WorkHistoryUpdate {
	if s != nil {
		whu.SetClientCompanySize(*s)
	}
	return whu
}

// ClearClientCompanySize clears the value of the "client_company_size" field.
func (whu *WorkHistoryUpdate) ClearClientCompanySize() *WorkHistoryUpdate {
	whu.mutation.ClearClientCompanySize()
	return whu
}

// SetUpworkFreelancerProposalID sets the "upwork_Freelancer_Proposal" edge to the Freelancer entity by ID.
func (whu *WorkHistoryUpdate) SetUpworkFreelancerProposalID(id string) *WorkHistoryUpdate {
	whu.mutation.SetUpworkFreelancerProposalID(id)
	return whu
}

// SetUpworkFreelancerProposal sets the "upwork_Freelancer_Proposal" edge to the Freelancer entity.
func (whu *WorkHistoryUpdate) SetUpworkFreelancerProposal(f *Freelancer) *WorkHistoryUpdate {
	return whu.SetUpworkFreelancerProposalID(f.ID)
}

// Mutation returns the WorkHistoryMutation object of the builder.
func (whu *WorkHistoryUpdate) Mutation() *WorkHistoryMutation {
	return whu.mutation
}

// ClearUpworkFreelancerProposal clears the "upwork_Freelancer_Proposal" edge to the Freelancer entity.
func (whu *WorkHistoryUpdate) ClearUpworkFreelancerProposal() *WorkHistoryUpdate {
	whu.mutation.ClearUpworkFreelancerProposal()
	return whu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (whu *WorkHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, whu.sqlSave, whu.mutation, whu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (whu *WorkHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := whu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (whu *WorkHistoryUpdate) Exec(ctx context.Context) error {
	_, err := whu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (whu *WorkHistoryUpdate) ExecX(ctx context.Context) {
	if err := whu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (whu *WorkHistoryUpdate) check() error {
	if _, ok := whu.mutation.UpworkFreelancerProposalID(); whu.mutation.UpworkFreelancerProposalCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "WorkHistory.upwork_Freelancer_Proposal"`)
	}
	return nil
}

func (whu *WorkHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := whu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(workhistory.Table, workhistory.Columns, sqlgraph.NewFieldSpec(workhistory.FieldID, field.TypeInt))
	if ps := whu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := whu.mutation.Title(); ok {
		_spec.SetField(workhistory.FieldTitle, field.TypeString, value)
	}
	if value, ok := whu.mutation.ClientFeedback(); ok {
		_spec.SetField(workhistory.FieldClientFeedback, field.TypeString, value)
	}
	if value, ok := whu.mutation.OverallRating(); ok {
		_spec.SetField(workhistory.FieldOverallRating, field.TypeFloat64, value)
	}
	if value, ok := whu.mutation.AddedOverallRating(); ok {
		_spec.AddField(workhistory.FieldOverallRating, field.TypeFloat64, value)
	}
	if value, ok := whu.mutation.IsHourly(); ok {
		_spec.SetField(workhistory.FieldIsHourly, field.TypeBool, value)
	}
	if value, ok := whu.mutation.FreelancerEarnings(); ok {
		_spec.SetField(workhistory.FieldFreelancerEarnings, field.TypeFloat64, value)
	}
	if value, ok := whu.mutation.AddedFreelancerEarnings(); ok {
		_spec.AddField(workhistory.FieldFreelancerEarnings, field.TypeFloat64, value)
	}
	if value, ok := whu.mutation.StartDate(); ok {
		_spec.SetField(workhistory.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := whu.mutation.EndDate(); ok {
		_spec.SetField(workhistory.FieldEndDate, field.TypeTime, value)
	}
	if whu.mutation.EndDateCleared() {
		_spec.ClearField(workhistory.FieldEndDate, field.TypeTime)
	}
	if value, ok := whu.mutation.Description(); ok {
		_spec.SetField(workhistory.FieldDescription, field.TypeString, value)
	}
	if value, ok := whu.mutation.Budget(); ok {
		_spec.SetField(workhistory.FieldBudget, field.TypeFloat64, value)
	}
	if value, ok := whu.mutation.AddedBudget(); ok {
		_spec.AddField(workhistory.FieldBudget, field.TypeFloat64, value)
	}
	if value, ok := whu.mutation.TotalProposals(); ok {
		_spec.SetField(workhistory.FieldTotalProposals, field.TypeInt, value)
	}
	if value, ok := whu.mutation.AddedTotalProposals(); ok {
		_spec.AddField(workhistory.FieldTotalProposals, field.TypeInt, value)
	}
	if value, ok := whu.mutation.NumberOfInterviews(); ok {
		_spec.SetField(workhistory.FieldNumberOfInterviews, field.TypeInt, value)
	}
	if value, ok := whu.mutation.AddedNumberOfInterviews(); ok {
		_spec.AddField(workhistory.FieldNumberOfInterviews, field.TypeInt, value)
	}
	if value, ok := whu.mutation.Skills(); ok {
		_spec.SetField(workhistory.FieldSkills, field.TypeJSON, value)
	}
	if value, ok := whu.mutation.AppendedSkills(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, workhistory.FieldSkills, value)
		})
	}
	if value, ok := whu.mutation.ClientRating(); ok {
		_spec.SetField(workhistory.FieldClientRating, field.TypeFloat64, value)
	}
	if value, ok := whu.mutation.AddedClientRating(); ok {
		_spec.AddField(workhistory.FieldClientRating, field.TypeFloat64, value)
	}
	if value, ok := whu.mutation.ClientReviewCount(); ok {
		_spec.SetField(workhistory.FieldClientReviewCount, field.TypeInt, value)
	}
	if value, ok := whu.mutation.AddedClientReviewCount(); ok {
		_spec.AddField(workhistory.FieldClientReviewCount, field.TypeInt, value)
	}
	if value, ok := whu.mutation.ClientCountry(); ok {
		_spec.SetField(workhistory.FieldClientCountry, field.TypeString, value)
	}
	if value, ok := whu.mutation.ClientTotalJobsPosted(); ok {
		_spec.SetField(workhistory.FieldClientTotalJobsPosted, field.TypeInt, value)
	}
	if value, ok := whu.mutation.AddedClientTotalJobsPosted(); ok {
		_spec.AddField(workhistory.FieldClientTotalJobsPosted, field.TypeInt, value)
	}
	if value, ok := whu.mutation.ClientTotalSpend(); ok {
		_spec.SetField(workhistory.FieldClientTotalSpend, field.TypeFloat64, value)
	}
	if value, ok := whu.mutation.AddedClientTotalSpend(); ok {
		_spec.AddField(workhistory.FieldClientTotalSpend, field.TypeFloat64, value)
	}
	if value, ok := whu.mutation.ClientTotalHires(); ok {
		_spec.SetField(workhistory.FieldClientTotalHires, field.TypeInt, value)
	}
	if value, ok := whu.mutation.AddedClientTotalHires(); ok {
		_spec.AddField(workhistory.FieldClientTotalHires, field.TypeInt, value)
	}
	if whu.mutation.ClientTotalHiresCleared() {
		_spec.ClearField(workhistory.FieldClientTotalHires, field.TypeInt)
	}
	if value, ok := whu.mutation.ClientTotalPaidHours(); ok {
		_spec.SetField(workhistory.FieldClientTotalPaidHours, field.TypeInt, value)
	}
	if value, ok := whu.mutation.AddedClientTotalPaidHours(); ok {
		_spec.AddField(workhistory.FieldClientTotalPaidHours, field.TypeInt, value)
	}
	if whu.mutation.ClientTotalPaidHoursCleared() {
		_spec.ClearField(workhistory.FieldClientTotalPaidHours, field.TypeInt)
	}
	if value, ok := whu.mutation.ClientAverageHourlyRatePaid(); ok {
		_spec.SetField(workhistory.FieldClientAverageHourlyRatePaid, field.TypeFloat64, value)
	}
	if value, ok := whu.mutation.AddedClientAverageHourlyRatePaid(); ok {
		_spec.AddField(workhistory.FieldClientAverageHourlyRatePaid, field.TypeFloat64, value)
	}
	if whu.mutation.ClientAverageHourlyRatePaidCleared() {
		_spec.ClearField(workhistory.FieldClientAverageHourlyRatePaid, field.TypeFloat64)
	}
	if value, ok := whu.mutation.ClientCompanyCategory(); ok {
		_spec.SetField(workhistory.FieldClientCompanyCategory, field.TypeString, value)
	}
	if whu.mutation.ClientCompanyCategoryCleared() {
		_spec.ClearField(workhistory.FieldClientCompanyCategory, field.TypeString)
	}
	if value, ok := whu.mutation.ClientCompanySize(); ok {
		_spec.SetField(workhistory.FieldClientCompanySize, field.TypeString, value)
	}
	if whu.mutation.ClientCompanySizeCleared() {
		_spec.ClearField(workhistory.FieldClientCompanySize, field.TypeString)
	}
	if whu.mutation.UpworkFreelancerProposalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workhistory.UpworkFreelancerProposalTable,
			Columns: []string{workhistory.UpworkFreelancerProposalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(freelancer.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := whu.mutation.UpworkFreelancerProposalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workhistory.UpworkFreelancerProposalTable,
			Columns: []string{workhistory.UpworkFreelancerProposalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(freelancer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, whu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	whu.mutation.done = true
	return n, nil
}

// WorkHistoryUpdateOne is the builder for updating a single WorkHistory entity.
type WorkHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkHistoryMutation
}

// SetTitle sets the "title" field.
func (whuo *WorkHistoryUpdateOne) SetTitle(s string) *WorkHistoryUpdateOne {
	whuo.mutation.SetTitle(s)
	return whuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (whuo *WorkHistoryUpdateOne) SetNillableTitle(s *string) *WorkHistoryUpdateOne {
	if s != nil {
		whuo.SetTitle(*s)
	}
	return whuo
}

// SetClientFeedback sets the "client_feedback" field.
func (whuo *WorkHistoryUpdateOne) SetClientFeedback(s string) *WorkHistoryUpdateOne {
	whuo.mutation.SetClientFeedback(s)
	return whuo
}

// SetNillableClientFeedback sets the "client_feedback" field if the given value is not nil.
func (whuo *WorkHistoryUpdateOne) SetNillableClientFeedback(s *string) *WorkHistoryUpdateOne {
	if s != nil {
		whuo.SetClientFeedback(*s)
	}
	return whuo
}

// SetOverallRating sets the "overall_rating" field.
func (whuo *WorkHistoryUpdateOne) SetOverallRating(f float64) *WorkHistoryUpdateOne {
	whuo.mutation.ResetOverallRating()
	whuo.mutation.SetOverallRating(f)
	return whuo
}

// SetNillableOverallRating sets the "overall_rating" field if the given value is not nil.
func (whuo *WorkHistoryUpdateOne) SetNillableOverallRating(f *float64) *WorkHistoryUpdateOne {
	if f != nil {
		whuo.SetOverallRating(*f)
	}
	return whuo
}

// AddOverallRating adds f to the "overall_rating" field.
func (whuo *WorkHistoryUpdateOne) AddOverallRating(f float64) *WorkHistoryUpdateOne {
	whuo.mutation.AddOverallRating(f)
	return whuo
}

// SetIsHourly sets the "is_hourly" field.
func (whuo *WorkHistoryUpdateOne) SetIsHourly(b bool) *WorkHistoryUpdateOne {
	whuo.mutation.SetIsHourly(b)
	return whuo
}

// SetNillableIsHourly sets the "is_hourly" field if the given value is not nil.
func (whuo *WorkHistoryUpdateOne) SetNillableIsHourly(b *bool) *WorkHistoryUpdateOne {
	if b != nil {
		whuo.SetIsHourly(*b)
	}
	return whuo
}

// SetFreelancerEarnings sets the "freelancer_earnings" field.
func (whuo *WorkHistoryUpdateOne) SetFreelancerEarnings(f float64) *WorkHistoryUpdateOne {
	whuo.mutation.ResetFreelancerEarnings()
	whuo.mutation.SetFreelancerEarnings(f)
	return whuo
}

// SetNillableFreelancerEarnings sets the "freelancer_earnings" field if the given value is not nil.
func (whuo *WorkHistoryUpdateOne) SetNillableFreelancerEarnings(f *float64) *WorkHistoryUpdateOne {
	if f != nil {
		whuo.SetFreelancerEarnings(*f)
	}
	return whuo
}

// AddFreelancerEarnings adds f to the "freelancer_earnings" field.
func (whuo *WorkHistoryUpdateOne) AddFreelancerEarnings(f float64) *WorkHistoryUpdateOne {
	whuo.mutation.AddFreelancerEarnings(f)
	return whuo
}

// SetStartDate sets the "start_date" field.
func (whuo *WorkHistoryUpdateOne) SetStartDate(t time.Time) *WorkHistoryUpdateOne {
	whuo.mutation.SetStartDate(t)
	return whuo
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (whuo *WorkHistoryUpdateOne) SetNillableStartDate(t *time.Time) *WorkHistoryUpdateOne {
	if t != nil {
		whuo.SetStartDate(*t)
	}
	return whuo
}

// SetEndDate sets the "end_date" field.
func (whuo *WorkHistoryUpdateOne) SetEndDate(t time.Time) *WorkHistoryUpdateOne {
	whuo.mutation.SetEndDate(t)
	return whuo
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (whuo *WorkHistoryUpdateOne) SetNillableEndDate(t *time.Time) *WorkHistoryUpdateOne {
	if t != nil {
		whuo.SetEndDate(*t)
	}
	return whuo
}

// ClearEndDate clears the value of the "end_date" field.
func (whuo *WorkHistoryUpdateOne) ClearEndDate() *WorkHistoryUpdateOne {
	whuo.mutation.ClearEndDate()
	return whuo
}

// SetDescription sets the "description" field.
func (whuo *WorkHistoryUpdateOne) SetDescription(s string) *WorkHistoryUpdateOne {
	whuo.mutation.SetDescription(s)
	return whuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (whuo *WorkHistoryUpdateOne) SetNillableDescription(s *string) *WorkHistoryUpdateOne {
	if s != nil {
		whuo.SetDescription(*s)
	}
	return whuo
}

// SetBudget sets the "budget" field.
func (whuo *WorkHistoryUpdateOne) SetBudget(f float64) *WorkHistoryUpdateOne {
	whuo.mutation.ResetBudget()
	whuo.mutation.SetBudget(f)
	return whuo
}

// SetNillableBudget sets the "budget" field if the given value is not nil.
func (whuo *WorkHistoryUpdateOne) SetNillableBudget(f *float64) *WorkHistoryUpdateOne {
	if f != nil {
		whuo.SetBudget(*f)
	}
	return whuo
}

// AddBudget adds f to the "budget" field.
func (whuo *WorkHistoryUpdateOne) AddBudget(f float64) *WorkHistoryUpdateOne {
	whuo.mutation.AddBudget(f)
	return whuo
}

// SetTotalProposals sets the "total_proposals" field.
func (whuo *WorkHistoryUpdateOne) SetTotalProposals(i int) *WorkHistoryUpdateOne {
	whuo.mutation.ResetTotalProposals()
	whuo.mutation.SetTotalProposals(i)
	return whuo
}

// SetNillableTotalProposals sets the "total_proposals" field if the given value is not nil.
func (whuo *WorkHistoryUpdateOne) SetNillableTotalProposals(i *int) *WorkHistoryUpdateOne {
	if i != nil {
		whuo.SetTotalProposals(*i)
	}
	return whuo
}

// AddTotalProposals adds i to the "total_proposals" field.
func (whuo *WorkHistoryUpdateOne) AddTotalProposals(i int) *WorkHistoryUpdateOne {
	whuo.mutation.AddTotalProposals(i)
	return whuo
}

// SetNumberOfInterviews sets the "number_of_interviews" field.
func (whuo *WorkHistoryUpdateOne) SetNumberOfInterviews(i int) *WorkHistoryUpdateOne {
	whuo.mutation.ResetNumberOfInterviews()
	whuo.mutation.SetNumberOfInterviews(i)
	return whuo
}

// SetNillableNumberOfInterviews sets the "number_of_interviews" field if the given value is not nil.
func (whuo *WorkHistoryUpdateOne) SetNillableNumberOfInterviews(i *int) *WorkHistoryUpdateOne {
	if i != nil {
		whuo.SetNumberOfInterviews(*i)
	}
	return whuo
}

// AddNumberOfInterviews adds i to the "number_of_interviews" field.
func (whuo *WorkHistoryUpdateOne) AddNumberOfInterviews(i int) *WorkHistoryUpdateOne {
	whuo.mutation.AddNumberOfInterviews(i)
	return whuo
}

// SetSkills sets the "skills" field.
func (whuo *WorkHistoryUpdateOne) SetSkills(s []string) *WorkHistoryUpdateOne {
	whuo.mutation.SetSkills(s)
	return whuo
}

// AppendSkills appends s to the "skills" field.
func (whuo *WorkHistoryUpdateOne) AppendSkills(s []string) *WorkHistoryUpdateOne {
	whuo.mutation.AppendSkills(s)
	return whuo
}

// SetClientRating sets the "client_rating" field.
func (whuo *WorkHistoryUpdateOne) SetClientRating(f float64) *WorkHistoryUpdateOne {
	whuo.mutation.ResetClientRating()
	whuo.mutation.SetClientRating(f)
	return whuo
}

// SetNillableClientRating sets the "client_rating" field if the given value is not nil.
func (whuo *WorkHistoryUpdateOne) SetNillableClientRating(f *float64) *WorkHistoryUpdateOne {
	if f != nil {
		whuo.SetClientRating(*f)
	}
	return whuo
}

// AddClientRating adds f to the "client_rating" field.
func (whuo *WorkHistoryUpdateOne) AddClientRating(f float64) *WorkHistoryUpdateOne {
	whuo.mutation.AddClientRating(f)
	return whuo
}

// SetClientReviewCount sets the "client_review_count" field.
func (whuo *WorkHistoryUpdateOne) SetClientReviewCount(i int) *WorkHistoryUpdateOne {
	whuo.mutation.ResetClientReviewCount()
	whuo.mutation.SetClientReviewCount(i)
	return whuo
}

// SetNillableClientReviewCount sets the "client_review_count" field if the given value is not nil.
func (whuo *WorkHistoryUpdateOne) SetNillableClientReviewCount(i *int) *WorkHistoryUpdateOne {
	if i != nil {
		whuo.SetClientReviewCount(*i)
	}
	return whuo
}

// AddClientReviewCount adds i to the "client_review_count" field.
func (whuo *WorkHistoryUpdateOne) AddClientReviewCount(i int) *WorkHistoryUpdateOne {
	whuo.mutation.AddClientReviewCount(i)
	return whuo
}

// SetClientCountry sets the "client_country" field.
func (whuo *WorkHistoryUpdateOne) SetClientCountry(s string) *WorkHistoryUpdateOne {
	whuo.mutation.SetClientCountry(s)
	return whuo
}

// SetNillableClientCountry sets the "client_country" field if the given value is not nil.
func (whuo *WorkHistoryUpdateOne) SetNillableClientCountry(s *string) *WorkHistoryUpdateOne {
	if s != nil {
		whuo.SetClientCountry(*s)
	}
	return whuo
}

// SetClientTotalJobsPosted sets the "client_total_jobs_posted" field.
func (whuo *WorkHistoryUpdateOne) SetClientTotalJobsPosted(i int) *WorkHistoryUpdateOne {
	whuo.mutation.ResetClientTotalJobsPosted()
	whuo.mutation.SetClientTotalJobsPosted(i)
	return whuo
}

// SetNillableClientTotalJobsPosted sets the "client_total_jobs_posted" field if the given value is not nil.
func (whuo *WorkHistoryUpdateOne) SetNillableClientTotalJobsPosted(i *int) *WorkHistoryUpdateOne {
	if i != nil {
		whuo.SetClientTotalJobsPosted(*i)
	}
	return whuo
}

// AddClientTotalJobsPosted adds i to the "client_total_jobs_posted" field.
func (whuo *WorkHistoryUpdateOne) AddClientTotalJobsPosted(i int) *WorkHistoryUpdateOne {
	whuo.mutation.AddClientTotalJobsPosted(i)
	return whuo
}

// SetClientTotalSpend sets the "client_total_spend" field.
func (whuo *WorkHistoryUpdateOne) SetClientTotalSpend(f float64) *WorkHistoryUpdateOne {
	whuo.mutation.ResetClientTotalSpend()
	whuo.mutation.SetClientTotalSpend(f)
	return whuo
}

// SetNillableClientTotalSpend sets the "client_total_spend" field if the given value is not nil.
func (whuo *WorkHistoryUpdateOne) SetNillableClientTotalSpend(f *float64) *WorkHistoryUpdateOne {
	if f != nil {
		whuo.SetClientTotalSpend(*f)
	}
	return whuo
}

// AddClientTotalSpend adds f to the "client_total_spend" field.
func (whuo *WorkHistoryUpdateOne) AddClientTotalSpend(f float64) *WorkHistoryUpdateOne {
	whuo.mutation.AddClientTotalSpend(f)
	return whuo
}

// SetClientTotalHires sets the "client_total_hires" field.
func (whuo *WorkHistoryUpdateOne) SetClientTotalHires(i int) *WorkHistoryUpdateOne {
	whuo.mutation.ResetClientTotalHires()
	whuo.mutation.SetClientTotalHires(i)
	return whuo
}

// SetNillableClientTotalHires sets the "client_total_hires" field if the given value is not nil.
func (whuo *WorkHistoryUpdateOne) SetNillableClientTotalHires(i *int) *WorkHistoryUpdateOne {
	if i != nil {
		whuo.SetClientTotalHires(*i)
	}
	return whuo
}

// AddClientTotalHires adds i to the "client_total_hires" field.
func (whuo *WorkHistoryUpdateOne) AddClientTotalHires(i int) *WorkHistoryUpdateOne {
	whuo.mutation.AddClientTotalHires(i)
	return whuo
}

// ClearClientTotalHires clears the value of the "client_total_hires" field.
func (whuo *WorkHistoryUpdateOne) ClearClientTotalHires() *WorkHistoryUpdateOne {
	whuo.mutation.ClearClientTotalHires()
	return whuo
}

// SetClientTotalPaidHours sets the "client_total_paid_hours" field.
func (whuo *WorkHistoryUpdateOne) SetClientTotalPaidHours(i int) *WorkHistoryUpdateOne {
	whuo.mutation.ResetClientTotalPaidHours()
	whuo.mutation.SetClientTotalPaidHours(i)
	return whuo
}

// SetNillableClientTotalPaidHours sets the "client_total_paid_hours" field if the given value is not nil.
func (whuo *WorkHistoryUpdateOne) SetNillableClientTotalPaidHours(i *int) *WorkHistoryUpdateOne {
	if i != nil {
		whuo.SetClientTotalPaidHours(*i)
	}
	return whuo
}

// AddClientTotalPaidHours adds i to the "client_total_paid_hours" field.
func (whuo *WorkHistoryUpdateOne) AddClientTotalPaidHours(i int) *WorkHistoryUpdateOne {
	whuo.mutation.AddClientTotalPaidHours(i)
	return whuo
}

// ClearClientTotalPaidHours clears the value of the "client_total_paid_hours" field.
func (whuo *WorkHistoryUpdateOne) ClearClientTotalPaidHours() *WorkHistoryUpdateOne {
	whuo.mutation.ClearClientTotalPaidHours()
	return whuo
}

// SetClientAverageHourlyRatePaid sets the "client_average_hourly_rate_paid" field.
func (whuo *WorkHistoryUpdateOne) SetClientAverageHourlyRatePaid(f float64) *WorkHistoryUpdateOne {
	whuo.mutation.ResetClientAverageHourlyRatePaid()
	whuo.mutation.SetClientAverageHourlyRatePaid(f)
	return whuo
}

// SetNillableClientAverageHourlyRatePaid sets the "client_average_hourly_rate_paid" field if the given value is not nil.
func (whuo *WorkHistoryUpdateOne) SetNillableClientAverageHourlyRatePaid(f *float64) *WorkHistoryUpdateOne {
	if f != nil {
		whuo.SetClientAverageHourlyRatePaid(*f)
	}
	return whuo
}

// AddClientAverageHourlyRatePaid adds f to the "client_average_hourly_rate_paid" field.
func (whuo *WorkHistoryUpdateOne) AddClientAverageHourlyRatePaid(f float64) *WorkHistoryUpdateOne {
	whuo.mutation.AddClientAverageHourlyRatePaid(f)
	return whuo
}

// ClearClientAverageHourlyRatePaid clears the value of the "client_average_hourly_rate_paid" field.
func (whuo *WorkHistoryUpdateOne) ClearClientAverageHourlyRatePaid() *WorkHistoryUpdateOne {
	whuo.mutation.ClearClientAverageHourlyRatePaid()
	return whuo
}

// SetClientCompanyCategory sets the "client_company_category" field.
func (whuo *WorkHistoryUpdateOne) SetClientCompanyCategory(s string) *WorkHistoryUpdateOne {
	whuo.mutation.SetClientCompanyCategory(s)
	return whuo
}

// SetNillableClientCompanyCategory sets the "client_company_category" field if the given value is not nil.
func (whuo *WorkHistoryUpdateOne) SetNillableClientCompanyCategory(s *string) *WorkHistoryUpdateOne {
	if s != nil {
		whuo.SetClientCompanyCategory(*s)
	}
	return whuo
}

// ClearClientCompanyCategory clears the value of the "client_company_category" field.
func (whuo *WorkHistoryUpdateOne) ClearClientCompanyCategory() *WorkHistoryUpdateOne {
	whuo.mutation.ClearClientCompanyCategory()
	return whuo
}

// SetClientCompanySize sets the "client_company_size" field.
func (whuo *WorkHistoryUpdateOne) SetClientCompanySize(s string) *WorkHistoryUpdateOne {
	whuo.mutation.SetClientCompanySize(s)
	return whuo
}

// SetNillableClientCompanySize sets the "client_company_size" field if the given value is not nil.
func (whuo *WorkHistoryUpdateOne) SetNillableClientCompanySize(s *string) *WorkHistoryUpdateOne {
	if s != nil {
		whuo.SetClientCompanySize(*s)
	}
	return whuo
}

// ClearClientCompanySize clears the value of the "client_company_size" field.
func (whuo *WorkHistoryUpdateOne) ClearClientCompanySize() *WorkHistoryUpdateOne {
	whuo.mutation.ClearClientCompanySize()
	return whuo
}

// SetUpworkFreelancerProposalID sets the "upwork_Freelancer_Proposal" edge to the Freelancer entity by ID.
func (whuo *WorkHistoryUpdateOne) SetUpworkFreelancerProposalID(id string) *WorkHistoryUpdateOne {
	whuo.mutation.SetUpworkFreelancerProposalID(id)
	return whuo
}

// SetUpworkFreelancerProposal sets the "upwork_Freelancer_Proposal" edge to the Freelancer entity.
func (whuo *WorkHistoryUpdateOne) SetUpworkFreelancerProposal(f *Freelancer) *WorkHistoryUpdateOne {
	return whuo.SetUpworkFreelancerProposalID(f.ID)
}

// Mutation returns the WorkHistoryMutation object of the builder.
func (whuo *WorkHistoryUpdateOne) Mutation() *WorkHistoryMutation {
	return whuo.mutation
}

// ClearUpworkFreelancerProposal clears the "upwork_Freelancer_Proposal" edge to the Freelancer entity.
func (whuo *WorkHistoryUpdateOne) ClearUpworkFreelancerProposal() *WorkHistoryUpdateOne {
	whuo.mutation.ClearUpworkFreelancerProposal()
	return whuo
}

// Where appends a list predicates to the WorkHistoryUpdate builder.
func (whuo *WorkHistoryUpdateOne) Where(ps ...predicate.WorkHistory) *WorkHistoryUpdateOne {
	whuo.mutation.Where(ps...)
	return whuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (whuo *WorkHistoryUpdateOne) Select(field string, fields ...string) *WorkHistoryUpdateOne {
	whuo.fields = append([]string{field}, fields...)
	return whuo
}

// Save executes the query and returns the updated WorkHistory entity.
func (whuo *WorkHistoryUpdateOne) Save(ctx context.Context) (*WorkHistory, error) {
	return withHooks(ctx, whuo.sqlSave, whuo.mutation, whuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (whuo *WorkHistoryUpdateOne) SaveX(ctx context.Context) *WorkHistory {
	node, err := whuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (whuo *WorkHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := whuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (whuo *WorkHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := whuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (whuo *WorkHistoryUpdateOne) check() error {
	if _, ok := whuo.mutation.UpworkFreelancerProposalID(); whuo.mutation.UpworkFreelancerProposalCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "WorkHistory.upwork_Freelancer_Proposal"`)
	}
	return nil
}

func (whuo *WorkHistoryUpdateOne) sqlSave(ctx context.Context) (_node *WorkHistory, err error) {
	if err := whuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(workhistory.Table, workhistory.Columns, sqlgraph.NewFieldSpec(workhistory.FieldID, field.TypeInt))
	id, ok := whuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WorkHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := whuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workhistory.FieldID)
		for _, f := range fields {
			if !workhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := whuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := whuo.mutation.Title(); ok {
		_spec.SetField(workhistory.FieldTitle, field.TypeString, value)
	}
	if value, ok := whuo.mutation.ClientFeedback(); ok {
		_spec.SetField(workhistory.FieldClientFeedback, field.TypeString, value)
	}
	if value, ok := whuo.mutation.OverallRating(); ok {
		_spec.SetField(workhistory.FieldOverallRating, field.TypeFloat64, value)
	}
	if value, ok := whuo.mutation.AddedOverallRating(); ok {
		_spec.AddField(workhistory.FieldOverallRating, field.TypeFloat64, value)
	}
	if value, ok := whuo.mutation.IsHourly(); ok {
		_spec.SetField(workhistory.FieldIsHourly, field.TypeBool, value)
	}
	if value, ok := whuo.mutation.FreelancerEarnings(); ok {
		_spec.SetField(workhistory.FieldFreelancerEarnings, field.TypeFloat64, value)
	}
	if value, ok := whuo.mutation.AddedFreelancerEarnings(); ok {
		_spec.AddField(workhistory.FieldFreelancerEarnings, field.TypeFloat64, value)
	}
	if value, ok := whuo.mutation.StartDate(); ok {
		_spec.SetField(workhistory.FieldStartDate, field.TypeTime, value)
	}
	if value, ok := whuo.mutation.EndDate(); ok {
		_spec.SetField(workhistory.FieldEndDate, field.TypeTime, value)
	}
	if whuo.mutation.EndDateCleared() {
		_spec.ClearField(workhistory.FieldEndDate, field.TypeTime)
	}
	if value, ok := whuo.mutation.Description(); ok {
		_spec.SetField(workhistory.FieldDescription, field.TypeString, value)
	}
	if value, ok := whuo.mutation.Budget(); ok {
		_spec.SetField(workhistory.FieldBudget, field.TypeFloat64, value)
	}
	if value, ok := whuo.mutation.AddedBudget(); ok {
		_spec.AddField(workhistory.FieldBudget, field.TypeFloat64, value)
	}
	if value, ok := whuo.mutation.TotalProposals(); ok {
		_spec.SetField(workhistory.FieldTotalProposals, field.TypeInt, value)
	}
	if value, ok := whuo.mutation.AddedTotalProposals(); ok {
		_spec.AddField(workhistory.FieldTotalProposals, field.TypeInt, value)
	}
	if value, ok := whuo.mutation.NumberOfInterviews(); ok {
		_spec.SetField(workhistory.FieldNumberOfInterviews, field.TypeInt, value)
	}
	if value, ok := whuo.mutation.AddedNumberOfInterviews(); ok {
		_spec.AddField(workhistory.FieldNumberOfInterviews, field.TypeInt, value)
	}
	if value, ok := whuo.mutation.Skills(); ok {
		_spec.SetField(workhistory.FieldSkills, field.TypeJSON, value)
	}
	if value, ok := whuo.mutation.AppendedSkills(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, workhistory.FieldSkills, value)
		})
	}
	if value, ok := whuo.mutation.ClientRating(); ok {
		_spec.SetField(workhistory.FieldClientRating, field.TypeFloat64, value)
	}
	if value, ok := whuo.mutation.AddedClientRating(); ok {
		_spec.AddField(workhistory.FieldClientRating, field.TypeFloat64, value)
	}
	if value, ok := whuo.mutation.ClientReviewCount(); ok {
		_spec.SetField(workhistory.FieldClientReviewCount, field.TypeInt, value)
	}
	if value, ok := whuo.mutation.AddedClientReviewCount(); ok {
		_spec.AddField(workhistory.FieldClientReviewCount, field.TypeInt, value)
	}
	if value, ok := whuo.mutation.ClientCountry(); ok {
		_spec.SetField(workhistory.FieldClientCountry, field.TypeString, value)
	}
	if value, ok := whuo.mutation.ClientTotalJobsPosted(); ok {
		_spec.SetField(workhistory.FieldClientTotalJobsPosted, field.TypeInt, value)
	}
	if value, ok := whuo.mutation.AddedClientTotalJobsPosted(); ok {
		_spec.AddField(workhistory.FieldClientTotalJobsPosted, field.TypeInt, value)
	}
	if value, ok := whuo.mutation.ClientTotalSpend(); ok {
		_spec.SetField(workhistory.FieldClientTotalSpend, field.TypeFloat64, value)
	}
	if value, ok := whuo.mutation.AddedClientTotalSpend(); ok {
		_spec.AddField(workhistory.FieldClientTotalSpend, field.TypeFloat64, value)
	}
	if value, ok := whuo.mutation.ClientTotalHires(); ok {
		_spec.SetField(workhistory.FieldClientTotalHires, field.TypeInt, value)
	}
	if value, ok := whuo.mutation.AddedClientTotalHires(); ok {
		_spec.AddField(workhistory.FieldClientTotalHires, field.TypeInt, value)
	}
	if whuo.mutation.ClientTotalHiresCleared() {
		_spec.ClearField(workhistory.FieldClientTotalHires, field.TypeInt)
	}
	if value, ok := whuo.mutation.ClientTotalPaidHours(); ok {
		_spec.SetField(workhistory.FieldClientTotalPaidHours, field.TypeInt, value)
	}
	if value, ok := whuo.mutation.AddedClientTotalPaidHours(); ok {
		_spec.AddField(workhistory.FieldClientTotalPaidHours, field.TypeInt, value)
	}
	if whuo.mutation.ClientTotalPaidHoursCleared() {
		_spec.ClearField(workhistory.FieldClientTotalPaidHours, field.TypeInt)
	}
	if value, ok := whuo.mutation.ClientAverageHourlyRatePaid(); ok {
		_spec.SetField(workhistory.FieldClientAverageHourlyRatePaid, field.TypeFloat64, value)
	}
	if value, ok := whuo.mutation.AddedClientAverageHourlyRatePaid(); ok {
		_spec.AddField(workhistory.FieldClientAverageHourlyRatePaid, field.TypeFloat64, value)
	}
	if whuo.mutation.ClientAverageHourlyRatePaidCleared() {
		_spec.ClearField(workhistory.FieldClientAverageHourlyRatePaid, field.TypeFloat64)
	}
	if value, ok := whuo.mutation.ClientCompanyCategory(); ok {
		_spec.SetField(workhistory.FieldClientCompanyCategory, field.TypeString, value)
	}
	if whuo.mutation.ClientCompanyCategoryCleared() {
		_spec.ClearField(workhistory.FieldClientCompanyCategory, field.TypeString)
	}
	if value, ok := whuo.mutation.ClientCompanySize(); ok {
		_spec.SetField(workhistory.FieldClientCompanySize, field.TypeString, value)
	}
	if whuo.mutation.ClientCompanySizeCleared() {
		_spec.ClearField(workhistory.FieldClientCompanySize, field.TypeString)
	}
	if whuo.mutation.UpworkFreelancerProposalCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workhistory.UpworkFreelancerProposalTable,
			Columns: []string{workhistory.UpworkFreelancerProposalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(freelancer.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := whuo.mutation.UpworkFreelancerProposalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workhistory.UpworkFreelancerProposalTable,
			Columns: []string{workhistory.UpworkFreelancerProposalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(freelancer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WorkHistory{config: whuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, whuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	whuo.mutation.done = true
	return _node, nil
}
