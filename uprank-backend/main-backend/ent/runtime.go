// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/google/uuid"
	"github.com/notzree/uprank-backend/main-backend/ent/freelancer"
	"github.com/notzree/uprank-backend/main-backend/ent/job"
	"github.com/notzree/uprank-backend/main-backend/ent/schema"
	"github.com/notzree/uprank-backend/main-backend/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	freelancerFields := schema.Freelancer{}.Fields()
	_ = freelancerFields
	// freelancerDescUprankScore is the schema descriptor for uprank_score field.
	freelancerDescUprankScore := freelancerFields[35].Descriptor()
	// freelancer.DefaultUprankScore holds the default value on creation for the uprank_score field.
	freelancer.DefaultUprankScore = freelancerDescUprankScore.Default.(int)
	// freelancerDescUprankUpdatedAt is the schema descriptor for uprank_updated_at field.
	freelancerDescUprankUpdatedAt := freelancerFields[36].Descriptor()
	// freelancer.DefaultUprankUpdatedAt holds the default value on creation for the uprank_updated_at field.
	freelancer.DefaultUprankUpdatedAt = freelancerDescUprankUpdatedAt.Default.(func() time.Time)
	// freelancer.UpdateDefaultUprankUpdatedAt holds the default value on update for the uprank_updated_at field.
	freelancer.UpdateDefaultUprankUpdatedAt = freelancerDescUprankUpdatedAt.UpdateDefault.(func() time.Time)
	// freelancerDescUprankReccomended is the schema descriptor for uprank_reccomended field.
	freelancerDescUprankReccomended := freelancerFields[37].Descriptor()
	// freelancer.DefaultUprankReccomended holds the default value on creation for the uprank_reccomended field.
	freelancer.DefaultUprankReccomended = freelancerDescUprankReccomended.Default.(bool)
	// freelancerDescUprankNotEnoughData is the schema descriptor for uprank_not_enough_data field.
	freelancerDescUprankNotEnoughData := freelancerFields[39].Descriptor()
	// freelancer.DefaultUprankNotEnoughData holds the default value on creation for the uprank_not_enough_data field.
	freelancer.DefaultUprankNotEnoughData = freelancerDescUprankNotEnoughData.Default.(bool)
	// freelancerDescID is the schema descriptor for id field.
	freelancerDescID := freelancerFields[0].Descriptor()
	// freelancer.DefaultID holds the default value on creation for the id field.
	freelancer.DefaultID = freelancerDescID.Default.(func() uuid.UUID)
	jobFields := schema.Job{}.Fields()
	_ = jobFields
	// jobDescTitle is the schema descriptor for title field.
	jobDescTitle := jobFields[1].Descriptor()
	// job.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	job.TitleValidator = jobDescTitle.Validators[0].(func(string) error)
	// jobDescCreatedAt is the schema descriptor for created_at field.
	jobDescCreatedAt := jobFields[2].Descriptor()
	// job.DefaultCreatedAt holds the default value on creation for the created_at field.
	job.DefaultCreatedAt = jobDescCreatedAt.Default.(func() time.Time)
	// jobDescDescription is the schema descriptor for description field.
	jobDescDescription := jobFields[4].Descriptor()
	// job.DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	job.DescriptionValidator = jobDescDescription.Validators[0].(func(string) error)
	// jobDescID is the schema descriptor for id field.
	jobDescID := jobFields[0].Descriptor()
	// job.IDValidator is a validator for the "id" field. It is called by the builders before save.
	job.IDValidator = jobDescID.Validators[0].(func(string) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescFirstName is the schema descriptor for first_name field.
	userDescFirstName := userFields[1].Descriptor()
	// user.DefaultFirstName holds the default value on creation for the first_name field.
	user.DefaultFirstName = userDescFirstName.Default.(string)
	// user.FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	user.FirstNameValidator = userDescFirstName.Validators[0].(func(string) error)
	// userDescCompanyName is the schema descriptor for company_name field.
	userDescCompanyName := userFields[2].Descriptor()
	// user.DefaultCompanyName holds the default value on creation for the company_name field.
	user.DefaultCompanyName = userDescCompanyName.Default.(string)
	// user.CompanyNameValidator is a validator for the "company_name" field. It is called by the builders before save.
	user.CompanyNameValidator = userDescCompanyName.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[3].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userFields[4].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userFields[5].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescLastLogin is the schema descriptor for last_login field.
	userDescLastLogin := userFields[6].Descriptor()
	// user.DefaultLastLogin holds the default value on creation for the last_login field.
	user.DefaultLastLogin = userDescLastLogin.Default.(func() time.Time)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.IDValidator is a validator for the "id" field. It is called by the builders before save.
	user.IDValidator = userDescID.Validators[0].(func(string) error)
}
