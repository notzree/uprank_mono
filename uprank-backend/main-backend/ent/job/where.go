// Code generated by ent, DO NOT EDIT.

package job

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/notzree/uprank-backend/main-backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldTitle, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCreatedAt, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldLocation, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldDescription, v))
}

// ExperienceLevel applies equality check predicate on the "experience_level" field. It's identical to ExperienceLevelEQ.
func ExperienceLevel(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldExperienceLevel, v))
}

// Hourly applies equality check predicate on the "hourly" field. It's identical to HourlyEQ.
func Hourly(v bool) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldHourly, v))
}

// Fixed applies equality check predicate on the "fixed" field. It's identical to FixedEQ.
func Fixed(v bool) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldFixed, v))
}

// FixedRate applies equality check predicate on the "fixed_rate" field. It's identical to FixedRateEQ.
func FixedRate(v float64) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldFixedRate, v))
}

// AverageUprankScore applies equality check predicate on the "average_uprank_score" field. It's identical to AverageUprankScoreEQ.
func AverageUprankScore(v float64) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldAverageUprankScore, v))
}

// MaxUprankScore applies equality check predicate on the "max_uprank_score" field. It's identical to MaxUprankScoreEQ.
func MaxUprankScore(v float64) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldMaxUprankScore, v))
}

// MinUprankScore applies equality check predicate on the "min_uprank_score" field. It's identical to MinUprankScoreEQ.
func MinUprankScore(v float64) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldMinUprankScore, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldTitle, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldCreatedAt, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationIsNil applies the IsNil predicate on the "location" field.
func LocationIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldLocation))
}

// LocationNotNil applies the NotNil predicate on the "location" field.
func LocationNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldLocation))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldLocation, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldDescription, v))
}

// SkillsIsNil applies the IsNil predicate on the "skills" field.
func SkillsIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldSkills))
}

// SkillsNotNil applies the NotNil predicate on the "skills" field.
func SkillsNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldSkills))
}

// ExperienceLevelEQ applies the EQ predicate on the "experience_level" field.
func ExperienceLevelEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldExperienceLevel, v))
}

// ExperienceLevelNEQ applies the NEQ predicate on the "experience_level" field.
func ExperienceLevelNEQ(v string) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldExperienceLevel, v))
}

// ExperienceLevelIn applies the In predicate on the "experience_level" field.
func ExperienceLevelIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldExperienceLevel, vs...))
}

// ExperienceLevelNotIn applies the NotIn predicate on the "experience_level" field.
func ExperienceLevelNotIn(vs ...string) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldExperienceLevel, vs...))
}

// ExperienceLevelGT applies the GT predicate on the "experience_level" field.
func ExperienceLevelGT(v string) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldExperienceLevel, v))
}

// ExperienceLevelGTE applies the GTE predicate on the "experience_level" field.
func ExperienceLevelGTE(v string) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldExperienceLevel, v))
}

// ExperienceLevelLT applies the LT predicate on the "experience_level" field.
func ExperienceLevelLT(v string) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldExperienceLevel, v))
}

// ExperienceLevelLTE applies the LTE predicate on the "experience_level" field.
func ExperienceLevelLTE(v string) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldExperienceLevel, v))
}

// ExperienceLevelContains applies the Contains predicate on the "experience_level" field.
func ExperienceLevelContains(v string) predicate.Job {
	return predicate.Job(sql.FieldContains(FieldExperienceLevel, v))
}

// ExperienceLevelHasPrefix applies the HasPrefix predicate on the "experience_level" field.
func ExperienceLevelHasPrefix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasPrefix(FieldExperienceLevel, v))
}

// ExperienceLevelHasSuffix applies the HasSuffix predicate on the "experience_level" field.
func ExperienceLevelHasSuffix(v string) predicate.Job {
	return predicate.Job(sql.FieldHasSuffix(FieldExperienceLevel, v))
}

// ExperienceLevelIsNil applies the IsNil predicate on the "experience_level" field.
func ExperienceLevelIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldExperienceLevel))
}

// ExperienceLevelNotNil applies the NotNil predicate on the "experience_level" field.
func ExperienceLevelNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldExperienceLevel))
}

// ExperienceLevelEqualFold applies the EqualFold predicate on the "experience_level" field.
func ExperienceLevelEqualFold(v string) predicate.Job {
	return predicate.Job(sql.FieldEqualFold(FieldExperienceLevel, v))
}

// ExperienceLevelContainsFold applies the ContainsFold predicate on the "experience_level" field.
func ExperienceLevelContainsFold(v string) predicate.Job {
	return predicate.Job(sql.FieldContainsFold(FieldExperienceLevel, v))
}

// HourlyEQ applies the EQ predicate on the "hourly" field.
func HourlyEQ(v bool) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldHourly, v))
}

// HourlyNEQ applies the NEQ predicate on the "hourly" field.
func HourlyNEQ(v bool) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldHourly, v))
}

// FixedEQ applies the EQ predicate on the "fixed" field.
func FixedEQ(v bool) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldFixed, v))
}

// FixedNEQ applies the NEQ predicate on the "fixed" field.
func FixedNEQ(v bool) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldFixed, v))
}

// HourlyRateIsNil applies the IsNil predicate on the "hourly_rate" field.
func HourlyRateIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldHourlyRate))
}

// HourlyRateNotNil applies the NotNil predicate on the "hourly_rate" field.
func HourlyRateNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldHourlyRate))
}

// FixedRateEQ applies the EQ predicate on the "fixed_rate" field.
func FixedRateEQ(v float64) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldFixedRate, v))
}

// FixedRateNEQ applies the NEQ predicate on the "fixed_rate" field.
func FixedRateNEQ(v float64) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldFixedRate, v))
}

// FixedRateIn applies the In predicate on the "fixed_rate" field.
func FixedRateIn(vs ...float64) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldFixedRate, vs...))
}

// FixedRateNotIn applies the NotIn predicate on the "fixed_rate" field.
func FixedRateNotIn(vs ...float64) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldFixedRate, vs...))
}

// FixedRateGT applies the GT predicate on the "fixed_rate" field.
func FixedRateGT(v float64) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldFixedRate, v))
}

// FixedRateGTE applies the GTE predicate on the "fixed_rate" field.
func FixedRateGTE(v float64) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldFixedRate, v))
}

// FixedRateLT applies the LT predicate on the "fixed_rate" field.
func FixedRateLT(v float64) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldFixedRate, v))
}

// FixedRateLTE applies the LTE predicate on the "fixed_rate" field.
func FixedRateLTE(v float64) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldFixedRate, v))
}

// FixedRateIsNil applies the IsNil predicate on the "fixed_rate" field.
func FixedRateIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldFixedRate))
}

// FixedRateNotNil applies the NotNil predicate on the "fixed_rate" field.
func FixedRateNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldFixedRate))
}

// AverageUprankScoreEQ applies the EQ predicate on the "average_uprank_score" field.
func AverageUprankScoreEQ(v float64) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldAverageUprankScore, v))
}

// AverageUprankScoreNEQ applies the NEQ predicate on the "average_uprank_score" field.
func AverageUprankScoreNEQ(v float64) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldAverageUprankScore, v))
}

// AverageUprankScoreIn applies the In predicate on the "average_uprank_score" field.
func AverageUprankScoreIn(vs ...float64) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldAverageUprankScore, vs...))
}

// AverageUprankScoreNotIn applies the NotIn predicate on the "average_uprank_score" field.
func AverageUprankScoreNotIn(vs ...float64) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldAverageUprankScore, vs...))
}

// AverageUprankScoreGT applies the GT predicate on the "average_uprank_score" field.
func AverageUprankScoreGT(v float64) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldAverageUprankScore, v))
}

// AverageUprankScoreGTE applies the GTE predicate on the "average_uprank_score" field.
func AverageUprankScoreGTE(v float64) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldAverageUprankScore, v))
}

// AverageUprankScoreLT applies the LT predicate on the "average_uprank_score" field.
func AverageUprankScoreLT(v float64) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldAverageUprankScore, v))
}

// AverageUprankScoreLTE applies the LTE predicate on the "average_uprank_score" field.
func AverageUprankScoreLTE(v float64) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldAverageUprankScore, v))
}

// AverageUprankScoreIsNil applies the IsNil predicate on the "average_uprank_score" field.
func AverageUprankScoreIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldAverageUprankScore))
}

// AverageUprankScoreNotNil applies the NotNil predicate on the "average_uprank_score" field.
func AverageUprankScoreNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldAverageUprankScore))
}

// MaxUprankScoreEQ applies the EQ predicate on the "max_uprank_score" field.
func MaxUprankScoreEQ(v float64) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldMaxUprankScore, v))
}

// MaxUprankScoreNEQ applies the NEQ predicate on the "max_uprank_score" field.
func MaxUprankScoreNEQ(v float64) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldMaxUprankScore, v))
}

// MaxUprankScoreIn applies the In predicate on the "max_uprank_score" field.
func MaxUprankScoreIn(vs ...float64) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldMaxUprankScore, vs...))
}

// MaxUprankScoreNotIn applies the NotIn predicate on the "max_uprank_score" field.
func MaxUprankScoreNotIn(vs ...float64) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldMaxUprankScore, vs...))
}

// MaxUprankScoreGT applies the GT predicate on the "max_uprank_score" field.
func MaxUprankScoreGT(v float64) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldMaxUprankScore, v))
}

// MaxUprankScoreGTE applies the GTE predicate on the "max_uprank_score" field.
func MaxUprankScoreGTE(v float64) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldMaxUprankScore, v))
}

// MaxUprankScoreLT applies the LT predicate on the "max_uprank_score" field.
func MaxUprankScoreLT(v float64) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldMaxUprankScore, v))
}

// MaxUprankScoreLTE applies the LTE predicate on the "max_uprank_score" field.
func MaxUprankScoreLTE(v float64) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldMaxUprankScore, v))
}

// MaxUprankScoreIsNil applies the IsNil predicate on the "max_uprank_score" field.
func MaxUprankScoreIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldMaxUprankScore))
}

// MaxUprankScoreNotNil applies the NotNil predicate on the "max_uprank_score" field.
func MaxUprankScoreNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldMaxUprankScore))
}

// MinUprankScoreEQ applies the EQ predicate on the "min_uprank_score" field.
func MinUprankScoreEQ(v float64) predicate.Job {
	return predicate.Job(sql.FieldEQ(FieldMinUprankScore, v))
}

// MinUprankScoreNEQ applies the NEQ predicate on the "min_uprank_score" field.
func MinUprankScoreNEQ(v float64) predicate.Job {
	return predicate.Job(sql.FieldNEQ(FieldMinUprankScore, v))
}

// MinUprankScoreIn applies the In predicate on the "min_uprank_score" field.
func MinUprankScoreIn(vs ...float64) predicate.Job {
	return predicate.Job(sql.FieldIn(FieldMinUprankScore, vs...))
}

// MinUprankScoreNotIn applies the NotIn predicate on the "min_uprank_score" field.
func MinUprankScoreNotIn(vs ...float64) predicate.Job {
	return predicate.Job(sql.FieldNotIn(FieldMinUprankScore, vs...))
}

// MinUprankScoreGT applies the GT predicate on the "min_uprank_score" field.
func MinUprankScoreGT(v float64) predicate.Job {
	return predicate.Job(sql.FieldGT(FieldMinUprankScore, v))
}

// MinUprankScoreGTE applies the GTE predicate on the "min_uprank_score" field.
func MinUprankScoreGTE(v float64) predicate.Job {
	return predicate.Job(sql.FieldGTE(FieldMinUprankScore, v))
}

// MinUprankScoreLT applies the LT predicate on the "min_uprank_score" field.
func MinUprankScoreLT(v float64) predicate.Job {
	return predicate.Job(sql.FieldLT(FieldMinUprankScore, v))
}

// MinUprankScoreLTE applies the LTE predicate on the "min_uprank_score" field.
func MinUprankScoreLTE(v float64) predicate.Job {
	return predicate.Job(sql.FieldLTE(FieldMinUprankScore, v))
}

// MinUprankScoreIsNil applies the IsNil predicate on the "min_uprank_score" field.
func MinUprankScoreIsNil() predicate.Job {
	return predicate.Job(sql.FieldIsNull(FieldMinUprankScore))
}

// MinUprankScoreNotNil applies the NotNil predicate on the "min_uprank_score" field.
func MinUprankScoreNotNil() predicate.Job {
	return predicate.Job(sql.FieldNotNull(FieldMinUprankScore))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasFreelancers applies the HasEdge predicate on the "freelancers" edge.
func HasFreelancers() predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, FreelancersTable, FreelancersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFreelancersWith applies the HasEdge predicate on the "freelancers" edge with a given conditions (other predicates).
func HasFreelancersWith(preds ...predicate.Freelancer) predicate.Job {
	return predicate.Job(func(s *sql.Selector) {
		step := newFreelancersStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Job) predicate.Job {
	return predicate.Job(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Job) predicate.Job {
	return predicate.Job(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Job) predicate.Job {
	return predicate.Job(sql.NotPredicates(p))
}
