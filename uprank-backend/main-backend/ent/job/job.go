// Code generated by ent, DO NOT EDIT.

package job

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the job type in the database.
	Label = "job"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldSkills holds the string denoting the skills field in the database.
	FieldSkills = "skills"
	// FieldExperienceLevel holds the string denoting the experience_level field in the database.
	FieldExperienceLevel = "experience_level"
	// FieldHourly holds the string denoting the hourly field in the database.
	FieldHourly = "hourly"
	// FieldFixed holds the string denoting the fixed field in the database.
	FieldFixed = "fixed"
	// FieldHourlyRate holds the string denoting the hourly_rate field in the database.
	FieldHourlyRate = "hourly_rate"
	// FieldFixedRate holds the string denoting the fixed_rate field in the database.
	FieldFixedRate = "fixed_rate"
	// FieldAverageUprankScore holds the string denoting the average_uprank_score field in the database.
	FieldAverageUprankScore = "average_uprank_score"
	// FieldMaxUprankScore holds the string denoting the max_uprank_score field in the database.
	FieldMaxUprankScore = "max_uprank_score"
	// FieldMinUprankScore holds the string denoting the min_uprank_score field in the database.
	FieldMinUprankScore = "min_uprank_score"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeFreelancers holds the string denoting the freelancers edge name in mutations.
	EdgeFreelancers = "freelancers"
	// Table holds the table name of the job in the database.
	Table = "jobs"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "jobs"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_jobs"
	// FreelancersTable is the table that holds the freelancers relation/edge.
	FreelancersTable = "freelancers"
	// FreelancersInverseTable is the table name for the Freelancer entity.
	// It exists in this package in order to avoid circular dependency with the "freelancer" package.
	FreelancersInverseTable = "freelancers"
	// FreelancersColumn is the table column denoting the freelancers relation/edge.
	FreelancersColumn = "job_freelancers"
)

// Columns holds all SQL columns for job fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldCreatedAt,
	FieldLocation,
	FieldDescription,
	FieldSkills,
	FieldExperienceLevel,
	FieldHourly,
	FieldFixed,
	FieldHourlyRate,
	FieldFixedRate,
	FieldAverageUprankScore,
	FieldMaxUprankScore,
	FieldMinUprankScore,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "jobs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_jobs",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the Job queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByExperienceLevel orders the results by the experience_level field.
func ByExperienceLevel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExperienceLevel, opts...).ToFunc()
}

// ByHourly orders the results by the hourly field.
func ByHourly(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHourly, opts...).ToFunc()
}

// ByFixed orders the results by the fixed field.
func ByFixed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFixed, opts...).ToFunc()
}

// ByFixedRate orders the results by the fixed_rate field.
func ByFixedRate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFixedRate, opts...).ToFunc()
}

// ByAverageUprankScore orders the results by the average_uprank_score field.
func ByAverageUprankScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAverageUprankScore, opts...).ToFunc()
}

// ByMaxUprankScore orders the results by the max_uprank_score field.
func ByMaxUprankScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMaxUprankScore, opts...).ToFunc()
}

// ByMinUprankScore orders the results by the min_uprank_score field.
func ByMinUprankScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMinUprankScore, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByFreelancersCount orders the results by freelancers count.
func ByFreelancersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFreelancersStep(), opts...)
	}
}

// ByFreelancers orders the results by freelancers terms.
func ByFreelancers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFreelancersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newFreelancersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FreelancersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FreelancersTable, FreelancersColumn),
	)
}
