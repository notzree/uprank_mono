// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/notzree/uprank-backend/main-backend/ent/job"
	"github.com/notzree/uprank-backend/main-backend/ent/upworkfreelancer"
	"github.com/notzree/uprank-backend/main-backend/ent/upworkjob"
	"github.com/notzree/uprank-backend/main-backend/ent/user"
)

// UpworkJobCreate is the builder for creating a UpworkJob entity.
type UpworkJobCreate struct {
	config
	mutation *UpworkJobMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTitle sets the "title" field.
func (ujc *UpworkJobCreate) SetTitle(s string) *UpworkJobCreate {
	ujc.mutation.SetTitle(s)
	return ujc
}

// SetCreatedAt sets the "created_at" field.
func (ujc *UpworkJobCreate) SetCreatedAt(t time.Time) *UpworkJobCreate {
	ujc.mutation.SetCreatedAt(t)
	return ujc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ujc *UpworkJobCreate) SetNillableCreatedAt(t *time.Time) *UpworkJobCreate {
	if t != nil {
		ujc.SetCreatedAt(*t)
	}
	return ujc
}

// SetLocation sets the "location" field.
func (ujc *UpworkJobCreate) SetLocation(s string) *UpworkJobCreate {
	ujc.mutation.SetLocation(s)
	return ujc
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (ujc *UpworkJobCreate) SetNillableLocation(s *string) *UpworkJobCreate {
	if s != nil {
		ujc.SetLocation(*s)
	}
	return ujc
}

// SetDescription sets the "description" field.
func (ujc *UpworkJobCreate) SetDescription(s string) *UpworkJobCreate {
	ujc.mutation.SetDescription(s)
	return ujc
}

// SetSkills sets the "skills" field.
func (ujc *UpworkJobCreate) SetSkills(s []string) *UpworkJobCreate {
	ujc.mutation.SetSkills(s)
	return ujc
}

// SetExperienceLevel sets the "experience_level" field.
func (ujc *UpworkJobCreate) SetExperienceLevel(s string) *UpworkJobCreate {
	ujc.mutation.SetExperienceLevel(s)
	return ujc
}

// SetNillableExperienceLevel sets the "experience_level" field if the given value is not nil.
func (ujc *UpworkJobCreate) SetNillableExperienceLevel(s *string) *UpworkJobCreate {
	if s != nil {
		ujc.SetExperienceLevel(*s)
	}
	return ujc
}

// SetHourly sets the "hourly" field.
func (ujc *UpworkJobCreate) SetHourly(b bool) *UpworkJobCreate {
	ujc.mutation.SetHourly(b)
	return ujc
}

// SetFixed sets the "fixed" field.
func (ujc *UpworkJobCreate) SetFixed(b bool) *UpworkJobCreate {
	ujc.mutation.SetFixed(b)
	return ujc
}

// SetHourlyRate sets the "hourly_rate" field.
func (ujc *UpworkJobCreate) SetHourlyRate(f []float32) *UpworkJobCreate {
	ujc.mutation.SetHourlyRate(f)
	return ujc
}

// SetFixedRate sets the "fixed_rate" field.
func (ujc *UpworkJobCreate) SetFixedRate(f float64) *UpworkJobCreate {
	ujc.mutation.SetFixedRate(f)
	return ujc
}

// SetNillableFixedRate sets the "fixed_rate" field if the given value is not nil.
func (ujc *UpworkJobCreate) SetNillableFixedRate(f *float64) *UpworkJobCreate {
	if f != nil {
		ujc.SetFixedRate(*f)
	}
	return ujc
}

// SetAverageUprankScore sets the "average_uprank_score" field.
func (ujc *UpworkJobCreate) SetAverageUprankScore(f float64) *UpworkJobCreate {
	ujc.mutation.SetAverageUprankScore(f)
	return ujc
}

// SetNillableAverageUprankScore sets the "average_uprank_score" field if the given value is not nil.
func (ujc *UpworkJobCreate) SetNillableAverageUprankScore(f *float64) *UpworkJobCreate {
	if f != nil {
		ujc.SetAverageUprankScore(*f)
	}
	return ujc
}

// SetMaxUprankScore sets the "max_uprank_score" field.
func (ujc *UpworkJobCreate) SetMaxUprankScore(f float64) *UpworkJobCreate {
	ujc.mutation.SetMaxUprankScore(f)
	return ujc
}

// SetNillableMaxUprankScore sets the "max_uprank_score" field if the given value is not nil.
func (ujc *UpworkJobCreate) SetNillableMaxUprankScore(f *float64) *UpworkJobCreate {
	if f != nil {
		ujc.SetMaxUprankScore(*f)
	}
	return ujc
}

// SetMinUprankScore sets the "min_uprank_score" field.
func (ujc *UpworkJobCreate) SetMinUprankScore(f float64) *UpworkJobCreate {
	ujc.mutation.SetMinUprankScore(f)
	return ujc
}

// SetNillableMinUprankScore sets the "min_uprank_score" field if the given value is not nil.
func (ujc *UpworkJobCreate) SetNillableMinUprankScore(f *float64) *UpworkJobCreate {
	if f != nil {
		ujc.SetMinUprankScore(*f)
	}
	return ujc
}

// SetID sets the "id" field.
func (ujc *UpworkJobCreate) SetID(s string) *UpworkJobCreate {
	ujc.mutation.SetID(s)
	return ujc
}

// AddUpworkfreelancerIDs adds the "upworkfreelancer" edge to the UpworkFreelancer entity by IDs.
func (ujc *UpworkJobCreate) AddUpworkfreelancerIDs(ids ...string) *UpworkJobCreate {
	ujc.mutation.AddUpworkfreelancerIDs(ids...)
	return ujc
}

// AddUpworkfreelancer adds the "upworkfreelancer" edges to the UpworkFreelancer entity.
func (ujc *UpworkJobCreate) AddUpworkfreelancer(u ...*UpworkFreelancer) *UpworkJobCreate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ujc.AddUpworkfreelancerIDs(ids...)
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (ujc *UpworkJobCreate) SetJobID(id uuid.UUID) *UpworkJobCreate {
	ujc.mutation.SetJobID(id)
	return ujc
}

// SetJob sets the "job" edge to the Job entity.
func (ujc *UpworkJobCreate) SetJob(j *Job) *UpworkJobCreate {
	return ujc.SetJobID(j.ID)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (ujc *UpworkJobCreate) AddUserIDs(ids ...string) *UpworkJobCreate {
	ujc.mutation.AddUserIDs(ids...)
	return ujc
}

// AddUser adds the "user" edges to the User entity.
func (ujc *UpworkJobCreate) AddUser(u ...*User) *UpworkJobCreate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ujc.AddUserIDs(ids...)
}

// Mutation returns the UpworkJobMutation object of the builder.
func (ujc *UpworkJobCreate) Mutation() *UpworkJobMutation {
	return ujc.mutation
}

// Save creates the UpworkJob in the database.
func (ujc *UpworkJobCreate) Save(ctx context.Context) (*UpworkJob, error) {
	ujc.defaults()
	return withHooks(ctx, ujc.sqlSave, ujc.mutation, ujc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ujc *UpworkJobCreate) SaveX(ctx context.Context) *UpworkJob {
	v, err := ujc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ujc *UpworkJobCreate) Exec(ctx context.Context) error {
	_, err := ujc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ujc *UpworkJobCreate) ExecX(ctx context.Context) {
	if err := ujc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ujc *UpworkJobCreate) defaults() {
	if _, ok := ujc.mutation.CreatedAt(); !ok {
		v := upworkjob.DefaultCreatedAt()
		ujc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ujc *UpworkJobCreate) check() error {
	if _, ok := ujc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "UpworkJob.title"`)}
	}
	if v, ok := ujc.mutation.Title(); ok {
		if err := upworkjob.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "UpworkJob.title": %w`, err)}
		}
	}
	if _, ok := ujc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UpworkJob.created_at"`)}
	}
	if _, ok := ujc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "UpworkJob.description"`)}
	}
	if v, ok := ujc.mutation.Description(); ok {
		if err := upworkjob.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "UpworkJob.description": %w`, err)}
		}
	}
	if _, ok := ujc.mutation.Hourly(); !ok {
		return &ValidationError{Name: "hourly", err: errors.New(`ent: missing required field "UpworkJob.hourly"`)}
	}
	if _, ok := ujc.mutation.Fixed(); !ok {
		return &ValidationError{Name: "fixed", err: errors.New(`ent: missing required field "UpworkJob.fixed"`)}
	}
	if v, ok := ujc.mutation.ID(); ok {
		if err := upworkjob.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "UpworkJob.id": %w`, err)}
		}
	}
	if _, ok := ujc.mutation.JobID(); !ok {
		return &ValidationError{Name: "job", err: errors.New(`ent: missing required edge "UpworkJob.job"`)}
	}
	return nil
}

func (ujc *UpworkJobCreate) sqlSave(ctx context.Context) (*UpworkJob, error) {
	if err := ujc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ujc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ujc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected UpworkJob.ID type: %T", _spec.ID.Value)
		}
	}
	ujc.mutation.id = &_node.ID
	ujc.mutation.done = true
	return _node, nil
}

func (ujc *UpworkJobCreate) createSpec() (*UpworkJob, *sqlgraph.CreateSpec) {
	var (
		_node = &UpworkJob{config: ujc.config}
		_spec = sqlgraph.NewCreateSpec(upworkjob.Table, sqlgraph.NewFieldSpec(upworkjob.FieldID, field.TypeString))
	)
	_spec.OnConflict = ujc.conflict
	if id, ok := ujc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ujc.mutation.Title(); ok {
		_spec.SetField(upworkjob.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ujc.mutation.CreatedAt(); ok {
		_spec.SetField(upworkjob.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ujc.mutation.Location(); ok {
		_spec.SetField(upworkjob.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := ujc.mutation.Description(); ok {
		_spec.SetField(upworkjob.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ujc.mutation.Skills(); ok {
		_spec.SetField(upworkjob.FieldSkills, field.TypeJSON, value)
		_node.Skills = value
	}
	if value, ok := ujc.mutation.ExperienceLevel(); ok {
		_spec.SetField(upworkjob.FieldExperienceLevel, field.TypeString, value)
		_node.ExperienceLevel = value
	}
	if value, ok := ujc.mutation.Hourly(); ok {
		_spec.SetField(upworkjob.FieldHourly, field.TypeBool, value)
		_node.Hourly = value
	}
	if value, ok := ujc.mutation.Fixed(); ok {
		_spec.SetField(upworkjob.FieldFixed, field.TypeBool, value)
		_node.Fixed = value
	}
	if value, ok := ujc.mutation.HourlyRate(); ok {
		_spec.SetField(upworkjob.FieldHourlyRate, field.TypeJSON, value)
		_node.HourlyRate = value
	}
	if value, ok := ujc.mutation.FixedRate(); ok {
		_spec.SetField(upworkjob.FieldFixedRate, field.TypeFloat64, value)
		_node.FixedRate = value
	}
	if value, ok := ujc.mutation.AverageUprankScore(); ok {
		_spec.SetField(upworkjob.FieldAverageUprankScore, field.TypeFloat64, value)
		_node.AverageUprankScore = value
	}
	if value, ok := ujc.mutation.MaxUprankScore(); ok {
		_spec.SetField(upworkjob.FieldMaxUprankScore, field.TypeFloat64, value)
		_node.MaxUprankScore = value
	}
	if value, ok := ujc.mutation.MinUprankScore(); ok {
		_spec.SetField(upworkjob.FieldMinUprankScore, field.TypeFloat64, value)
		_node.MinUprankScore = value
	}
	if nodes := ujc.mutation.UpworkfreelancerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   upworkjob.UpworkfreelancerTable,
			Columns: upworkjob.UpworkfreelancerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upworkfreelancer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ujc.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   upworkjob.JobTable,
			Columns: []string{upworkjob.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.job_upworkjob = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ujc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   upworkjob.UserTable,
			Columns: upworkjob.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UpworkJob.Create().
//		SetTitle(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UpworkJobUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (ujc *UpworkJobCreate) OnConflict(opts ...sql.ConflictOption) *UpworkJobUpsertOne {
	ujc.conflict = opts
	return &UpworkJobUpsertOne{
		create: ujc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UpworkJob.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ujc *UpworkJobCreate) OnConflictColumns(columns ...string) *UpworkJobUpsertOne {
	ujc.conflict = append(ujc.conflict, sql.ConflictColumns(columns...))
	return &UpworkJobUpsertOne{
		create: ujc,
	}
}

type (
	// UpworkJobUpsertOne is the builder for "upsert"-ing
	//  one UpworkJob node.
	UpworkJobUpsertOne struct {
		create *UpworkJobCreate
	}

	// UpworkJobUpsert is the "OnConflict" setter.
	UpworkJobUpsert struct {
		*sql.UpdateSet
	}
)

// SetTitle sets the "title" field.
func (u *UpworkJobUpsert) SetTitle(v string) *UpworkJobUpsert {
	u.Set(upworkjob.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *UpworkJobUpsert) UpdateTitle() *UpworkJobUpsert {
	u.SetExcluded(upworkjob.FieldTitle)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *UpworkJobUpsert) SetCreatedAt(v time.Time) *UpworkJobUpsert {
	u.Set(upworkjob.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UpworkJobUpsert) UpdateCreatedAt() *UpworkJobUpsert {
	u.SetExcluded(upworkjob.FieldCreatedAt)
	return u
}

// SetLocation sets the "location" field.
func (u *UpworkJobUpsert) SetLocation(v string) *UpworkJobUpsert {
	u.Set(upworkjob.FieldLocation, v)
	return u
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *UpworkJobUpsert) UpdateLocation() *UpworkJobUpsert {
	u.SetExcluded(upworkjob.FieldLocation)
	return u
}

// ClearLocation clears the value of the "location" field.
func (u *UpworkJobUpsert) ClearLocation() *UpworkJobUpsert {
	u.SetNull(upworkjob.FieldLocation)
	return u
}

// SetDescription sets the "description" field.
func (u *UpworkJobUpsert) SetDescription(v string) *UpworkJobUpsert {
	u.Set(upworkjob.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *UpworkJobUpsert) UpdateDescription() *UpworkJobUpsert {
	u.SetExcluded(upworkjob.FieldDescription)
	return u
}

// SetSkills sets the "skills" field.
func (u *UpworkJobUpsert) SetSkills(v []string) *UpworkJobUpsert {
	u.Set(upworkjob.FieldSkills, v)
	return u
}

// UpdateSkills sets the "skills" field to the value that was provided on create.
func (u *UpworkJobUpsert) UpdateSkills() *UpworkJobUpsert {
	u.SetExcluded(upworkjob.FieldSkills)
	return u
}

// ClearSkills clears the value of the "skills" field.
func (u *UpworkJobUpsert) ClearSkills() *UpworkJobUpsert {
	u.SetNull(upworkjob.FieldSkills)
	return u
}

// SetExperienceLevel sets the "experience_level" field.
func (u *UpworkJobUpsert) SetExperienceLevel(v string) *UpworkJobUpsert {
	u.Set(upworkjob.FieldExperienceLevel, v)
	return u
}

// UpdateExperienceLevel sets the "experience_level" field to the value that was provided on create.
func (u *UpworkJobUpsert) UpdateExperienceLevel() *UpworkJobUpsert {
	u.SetExcluded(upworkjob.FieldExperienceLevel)
	return u
}

// ClearExperienceLevel clears the value of the "experience_level" field.
func (u *UpworkJobUpsert) ClearExperienceLevel() *UpworkJobUpsert {
	u.SetNull(upworkjob.FieldExperienceLevel)
	return u
}

// SetHourly sets the "hourly" field.
func (u *UpworkJobUpsert) SetHourly(v bool) *UpworkJobUpsert {
	u.Set(upworkjob.FieldHourly, v)
	return u
}

// UpdateHourly sets the "hourly" field to the value that was provided on create.
func (u *UpworkJobUpsert) UpdateHourly() *UpworkJobUpsert {
	u.SetExcluded(upworkjob.FieldHourly)
	return u
}

// SetFixed sets the "fixed" field.
func (u *UpworkJobUpsert) SetFixed(v bool) *UpworkJobUpsert {
	u.Set(upworkjob.FieldFixed, v)
	return u
}

// UpdateFixed sets the "fixed" field to the value that was provided on create.
func (u *UpworkJobUpsert) UpdateFixed() *UpworkJobUpsert {
	u.SetExcluded(upworkjob.FieldFixed)
	return u
}

// SetHourlyRate sets the "hourly_rate" field.
func (u *UpworkJobUpsert) SetHourlyRate(v []float32) *UpworkJobUpsert {
	u.Set(upworkjob.FieldHourlyRate, v)
	return u
}

// UpdateHourlyRate sets the "hourly_rate" field to the value that was provided on create.
func (u *UpworkJobUpsert) UpdateHourlyRate() *UpworkJobUpsert {
	u.SetExcluded(upworkjob.FieldHourlyRate)
	return u
}

// ClearHourlyRate clears the value of the "hourly_rate" field.
func (u *UpworkJobUpsert) ClearHourlyRate() *UpworkJobUpsert {
	u.SetNull(upworkjob.FieldHourlyRate)
	return u
}

// SetFixedRate sets the "fixed_rate" field.
func (u *UpworkJobUpsert) SetFixedRate(v float64) *UpworkJobUpsert {
	u.Set(upworkjob.FieldFixedRate, v)
	return u
}

// UpdateFixedRate sets the "fixed_rate" field to the value that was provided on create.
func (u *UpworkJobUpsert) UpdateFixedRate() *UpworkJobUpsert {
	u.SetExcluded(upworkjob.FieldFixedRate)
	return u
}

// AddFixedRate adds v to the "fixed_rate" field.
func (u *UpworkJobUpsert) AddFixedRate(v float64) *UpworkJobUpsert {
	u.Add(upworkjob.FieldFixedRate, v)
	return u
}

// ClearFixedRate clears the value of the "fixed_rate" field.
func (u *UpworkJobUpsert) ClearFixedRate() *UpworkJobUpsert {
	u.SetNull(upworkjob.FieldFixedRate)
	return u
}

// SetAverageUprankScore sets the "average_uprank_score" field.
func (u *UpworkJobUpsert) SetAverageUprankScore(v float64) *UpworkJobUpsert {
	u.Set(upworkjob.FieldAverageUprankScore, v)
	return u
}

// UpdateAverageUprankScore sets the "average_uprank_score" field to the value that was provided on create.
func (u *UpworkJobUpsert) UpdateAverageUprankScore() *UpworkJobUpsert {
	u.SetExcluded(upworkjob.FieldAverageUprankScore)
	return u
}

// AddAverageUprankScore adds v to the "average_uprank_score" field.
func (u *UpworkJobUpsert) AddAverageUprankScore(v float64) *UpworkJobUpsert {
	u.Add(upworkjob.FieldAverageUprankScore, v)
	return u
}

// ClearAverageUprankScore clears the value of the "average_uprank_score" field.
func (u *UpworkJobUpsert) ClearAverageUprankScore() *UpworkJobUpsert {
	u.SetNull(upworkjob.FieldAverageUprankScore)
	return u
}

// SetMaxUprankScore sets the "max_uprank_score" field.
func (u *UpworkJobUpsert) SetMaxUprankScore(v float64) *UpworkJobUpsert {
	u.Set(upworkjob.FieldMaxUprankScore, v)
	return u
}

// UpdateMaxUprankScore sets the "max_uprank_score" field to the value that was provided on create.
func (u *UpworkJobUpsert) UpdateMaxUprankScore() *UpworkJobUpsert {
	u.SetExcluded(upworkjob.FieldMaxUprankScore)
	return u
}

// AddMaxUprankScore adds v to the "max_uprank_score" field.
func (u *UpworkJobUpsert) AddMaxUprankScore(v float64) *UpworkJobUpsert {
	u.Add(upworkjob.FieldMaxUprankScore, v)
	return u
}

// ClearMaxUprankScore clears the value of the "max_uprank_score" field.
func (u *UpworkJobUpsert) ClearMaxUprankScore() *UpworkJobUpsert {
	u.SetNull(upworkjob.FieldMaxUprankScore)
	return u
}

// SetMinUprankScore sets the "min_uprank_score" field.
func (u *UpworkJobUpsert) SetMinUprankScore(v float64) *UpworkJobUpsert {
	u.Set(upworkjob.FieldMinUprankScore, v)
	return u
}

// UpdateMinUprankScore sets the "min_uprank_score" field to the value that was provided on create.
func (u *UpworkJobUpsert) UpdateMinUprankScore() *UpworkJobUpsert {
	u.SetExcluded(upworkjob.FieldMinUprankScore)
	return u
}

// AddMinUprankScore adds v to the "min_uprank_score" field.
func (u *UpworkJobUpsert) AddMinUprankScore(v float64) *UpworkJobUpsert {
	u.Add(upworkjob.FieldMinUprankScore, v)
	return u
}

// ClearMinUprankScore clears the value of the "min_uprank_score" field.
func (u *UpworkJobUpsert) ClearMinUprankScore() *UpworkJobUpsert {
	u.SetNull(upworkjob.FieldMinUprankScore)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UpworkJob.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(upworkjob.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UpworkJobUpsertOne) UpdateNewValues() *UpworkJobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(upworkjob.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UpworkJob.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UpworkJobUpsertOne) Ignore() *UpworkJobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UpworkJobUpsertOne) DoNothing() *UpworkJobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UpworkJobCreate.OnConflict
// documentation for more info.
func (u *UpworkJobUpsertOne) Update(set func(*UpworkJobUpsert)) *UpworkJobUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UpworkJobUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *UpworkJobUpsertOne) SetTitle(v string) *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *UpworkJobUpsertOne) UpdateTitle() *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.UpdateTitle()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *UpworkJobUpsertOne) SetCreatedAt(v time.Time) *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UpworkJobUpsertOne) UpdateCreatedAt() *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetLocation sets the "location" field.
func (u *UpworkJobUpsertOne) SetLocation(v string) *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *UpworkJobUpsertOne) UpdateLocation() *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.UpdateLocation()
	})
}

// ClearLocation clears the value of the "location" field.
func (u *UpworkJobUpsertOne) ClearLocation() *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.ClearLocation()
	})
}

// SetDescription sets the "description" field.
func (u *UpworkJobUpsertOne) SetDescription(v string) *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *UpworkJobUpsertOne) UpdateDescription() *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.UpdateDescription()
	})
}

// SetSkills sets the "skills" field.
func (u *UpworkJobUpsertOne) SetSkills(v []string) *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.SetSkills(v)
	})
}

// UpdateSkills sets the "skills" field to the value that was provided on create.
func (u *UpworkJobUpsertOne) UpdateSkills() *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.UpdateSkills()
	})
}

// ClearSkills clears the value of the "skills" field.
func (u *UpworkJobUpsertOne) ClearSkills() *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.ClearSkills()
	})
}

// SetExperienceLevel sets the "experience_level" field.
func (u *UpworkJobUpsertOne) SetExperienceLevel(v string) *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.SetExperienceLevel(v)
	})
}

// UpdateExperienceLevel sets the "experience_level" field to the value that was provided on create.
func (u *UpworkJobUpsertOne) UpdateExperienceLevel() *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.UpdateExperienceLevel()
	})
}

// ClearExperienceLevel clears the value of the "experience_level" field.
func (u *UpworkJobUpsertOne) ClearExperienceLevel() *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.ClearExperienceLevel()
	})
}

// SetHourly sets the "hourly" field.
func (u *UpworkJobUpsertOne) SetHourly(v bool) *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.SetHourly(v)
	})
}

// UpdateHourly sets the "hourly" field to the value that was provided on create.
func (u *UpworkJobUpsertOne) UpdateHourly() *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.UpdateHourly()
	})
}

// SetFixed sets the "fixed" field.
func (u *UpworkJobUpsertOne) SetFixed(v bool) *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.SetFixed(v)
	})
}

// UpdateFixed sets the "fixed" field to the value that was provided on create.
func (u *UpworkJobUpsertOne) UpdateFixed() *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.UpdateFixed()
	})
}

// SetHourlyRate sets the "hourly_rate" field.
func (u *UpworkJobUpsertOne) SetHourlyRate(v []float32) *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.SetHourlyRate(v)
	})
}

// UpdateHourlyRate sets the "hourly_rate" field to the value that was provided on create.
func (u *UpworkJobUpsertOne) UpdateHourlyRate() *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.UpdateHourlyRate()
	})
}

// ClearHourlyRate clears the value of the "hourly_rate" field.
func (u *UpworkJobUpsertOne) ClearHourlyRate() *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.ClearHourlyRate()
	})
}

// SetFixedRate sets the "fixed_rate" field.
func (u *UpworkJobUpsertOne) SetFixedRate(v float64) *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.SetFixedRate(v)
	})
}

// AddFixedRate adds v to the "fixed_rate" field.
func (u *UpworkJobUpsertOne) AddFixedRate(v float64) *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.AddFixedRate(v)
	})
}

// UpdateFixedRate sets the "fixed_rate" field to the value that was provided on create.
func (u *UpworkJobUpsertOne) UpdateFixedRate() *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.UpdateFixedRate()
	})
}

// ClearFixedRate clears the value of the "fixed_rate" field.
func (u *UpworkJobUpsertOne) ClearFixedRate() *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.ClearFixedRate()
	})
}

// SetAverageUprankScore sets the "average_uprank_score" field.
func (u *UpworkJobUpsertOne) SetAverageUprankScore(v float64) *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.SetAverageUprankScore(v)
	})
}

// AddAverageUprankScore adds v to the "average_uprank_score" field.
func (u *UpworkJobUpsertOne) AddAverageUprankScore(v float64) *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.AddAverageUprankScore(v)
	})
}

// UpdateAverageUprankScore sets the "average_uprank_score" field to the value that was provided on create.
func (u *UpworkJobUpsertOne) UpdateAverageUprankScore() *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.UpdateAverageUprankScore()
	})
}

// ClearAverageUprankScore clears the value of the "average_uprank_score" field.
func (u *UpworkJobUpsertOne) ClearAverageUprankScore() *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.ClearAverageUprankScore()
	})
}

// SetMaxUprankScore sets the "max_uprank_score" field.
func (u *UpworkJobUpsertOne) SetMaxUprankScore(v float64) *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.SetMaxUprankScore(v)
	})
}

// AddMaxUprankScore adds v to the "max_uprank_score" field.
func (u *UpworkJobUpsertOne) AddMaxUprankScore(v float64) *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.AddMaxUprankScore(v)
	})
}

// UpdateMaxUprankScore sets the "max_uprank_score" field to the value that was provided on create.
func (u *UpworkJobUpsertOne) UpdateMaxUprankScore() *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.UpdateMaxUprankScore()
	})
}

// ClearMaxUprankScore clears the value of the "max_uprank_score" field.
func (u *UpworkJobUpsertOne) ClearMaxUprankScore() *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.ClearMaxUprankScore()
	})
}

// SetMinUprankScore sets the "min_uprank_score" field.
func (u *UpworkJobUpsertOne) SetMinUprankScore(v float64) *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.SetMinUprankScore(v)
	})
}

// AddMinUprankScore adds v to the "min_uprank_score" field.
func (u *UpworkJobUpsertOne) AddMinUprankScore(v float64) *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.AddMinUprankScore(v)
	})
}

// UpdateMinUprankScore sets the "min_uprank_score" field to the value that was provided on create.
func (u *UpworkJobUpsertOne) UpdateMinUprankScore() *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.UpdateMinUprankScore()
	})
}

// ClearMinUprankScore clears the value of the "min_uprank_score" field.
func (u *UpworkJobUpsertOne) ClearMinUprankScore() *UpworkJobUpsertOne {
	return u.Update(func(s *UpworkJobUpsert) {
		s.ClearMinUprankScore()
	})
}

// Exec executes the query.
func (u *UpworkJobUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UpworkJobCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UpworkJobUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UpworkJobUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: UpworkJobUpsertOne.ID is not supported by MySQL driver. Use UpworkJobUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UpworkJobUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UpworkJobCreateBulk is the builder for creating many UpworkJob entities in bulk.
type UpworkJobCreateBulk struct {
	config
	err      error
	builders []*UpworkJobCreate
	conflict []sql.ConflictOption
}

// Save creates the UpworkJob entities in the database.
func (ujcb *UpworkJobCreateBulk) Save(ctx context.Context) ([]*UpworkJob, error) {
	if ujcb.err != nil {
		return nil, ujcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ujcb.builders))
	nodes := make([]*UpworkJob, len(ujcb.builders))
	mutators := make([]Mutator, len(ujcb.builders))
	for i := range ujcb.builders {
		func(i int, root context.Context) {
			builder := ujcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UpworkJobMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ujcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ujcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ujcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ujcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ujcb *UpworkJobCreateBulk) SaveX(ctx context.Context) []*UpworkJob {
	v, err := ujcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ujcb *UpworkJobCreateBulk) Exec(ctx context.Context) error {
	_, err := ujcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ujcb *UpworkJobCreateBulk) ExecX(ctx context.Context) {
	if err := ujcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UpworkJob.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UpworkJobUpsert) {
//			SetTitle(v+v).
//		}).
//		Exec(ctx)
func (ujcb *UpworkJobCreateBulk) OnConflict(opts ...sql.ConflictOption) *UpworkJobUpsertBulk {
	ujcb.conflict = opts
	return &UpworkJobUpsertBulk{
		create: ujcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UpworkJob.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ujcb *UpworkJobCreateBulk) OnConflictColumns(columns ...string) *UpworkJobUpsertBulk {
	ujcb.conflict = append(ujcb.conflict, sql.ConflictColumns(columns...))
	return &UpworkJobUpsertBulk{
		create: ujcb,
	}
}

// UpworkJobUpsertBulk is the builder for "upsert"-ing
// a bulk of UpworkJob nodes.
type UpworkJobUpsertBulk struct {
	create *UpworkJobCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UpworkJob.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(upworkjob.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UpworkJobUpsertBulk) UpdateNewValues() *UpworkJobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(upworkjob.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UpworkJob.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UpworkJobUpsertBulk) Ignore() *UpworkJobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UpworkJobUpsertBulk) DoNothing() *UpworkJobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UpworkJobCreateBulk.OnConflict
// documentation for more info.
func (u *UpworkJobUpsertBulk) Update(set func(*UpworkJobUpsert)) *UpworkJobUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UpworkJobUpsert{UpdateSet: update})
	}))
	return u
}

// SetTitle sets the "title" field.
func (u *UpworkJobUpsertBulk) SetTitle(v string) *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *UpworkJobUpsertBulk) UpdateTitle() *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.UpdateTitle()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *UpworkJobUpsertBulk) SetCreatedAt(v time.Time) *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *UpworkJobUpsertBulk) UpdateCreatedAt() *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetLocation sets the "location" field.
func (u *UpworkJobUpsertBulk) SetLocation(v string) *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *UpworkJobUpsertBulk) UpdateLocation() *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.UpdateLocation()
	})
}

// ClearLocation clears the value of the "location" field.
func (u *UpworkJobUpsertBulk) ClearLocation() *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.ClearLocation()
	})
}

// SetDescription sets the "description" field.
func (u *UpworkJobUpsertBulk) SetDescription(v string) *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *UpworkJobUpsertBulk) UpdateDescription() *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.UpdateDescription()
	})
}

// SetSkills sets the "skills" field.
func (u *UpworkJobUpsertBulk) SetSkills(v []string) *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.SetSkills(v)
	})
}

// UpdateSkills sets the "skills" field to the value that was provided on create.
func (u *UpworkJobUpsertBulk) UpdateSkills() *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.UpdateSkills()
	})
}

// ClearSkills clears the value of the "skills" field.
func (u *UpworkJobUpsertBulk) ClearSkills() *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.ClearSkills()
	})
}

// SetExperienceLevel sets the "experience_level" field.
func (u *UpworkJobUpsertBulk) SetExperienceLevel(v string) *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.SetExperienceLevel(v)
	})
}

// UpdateExperienceLevel sets the "experience_level" field to the value that was provided on create.
func (u *UpworkJobUpsertBulk) UpdateExperienceLevel() *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.UpdateExperienceLevel()
	})
}

// ClearExperienceLevel clears the value of the "experience_level" field.
func (u *UpworkJobUpsertBulk) ClearExperienceLevel() *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.ClearExperienceLevel()
	})
}

// SetHourly sets the "hourly" field.
func (u *UpworkJobUpsertBulk) SetHourly(v bool) *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.SetHourly(v)
	})
}

// UpdateHourly sets the "hourly" field to the value that was provided on create.
func (u *UpworkJobUpsertBulk) UpdateHourly() *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.UpdateHourly()
	})
}

// SetFixed sets the "fixed" field.
func (u *UpworkJobUpsertBulk) SetFixed(v bool) *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.SetFixed(v)
	})
}

// UpdateFixed sets the "fixed" field to the value that was provided on create.
func (u *UpworkJobUpsertBulk) UpdateFixed() *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.UpdateFixed()
	})
}

// SetHourlyRate sets the "hourly_rate" field.
func (u *UpworkJobUpsertBulk) SetHourlyRate(v []float32) *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.SetHourlyRate(v)
	})
}

// UpdateHourlyRate sets the "hourly_rate" field to the value that was provided on create.
func (u *UpworkJobUpsertBulk) UpdateHourlyRate() *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.UpdateHourlyRate()
	})
}

// ClearHourlyRate clears the value of the "hourly_rate" field.
func (u *UpworkJobUpsertBulk) ClearHourlyRate() *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.ClearHourlyRate()
	})
}

// SetFixedRate sets the "fixed_rate" field.
func (u *UpworkJobUpsertBulk) SetFixedRate(v float64) *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.SetFixedRate(v)
	})
}

// AddFixedRate adds v to the "fixed_rate" field.
func (u *UpworkJobUpsertBulk) AddFixedRate(v float64) *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.AddFixedRate(v)
	})
}

// UpdateFixedRate sets the "fixed_rate" field to the value that was provided on create.
func (u *UpworkJobUpsertBulk) UpdateFixedRate() *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.UpdateFixedRate()
	})
}

// ClearFixedRate clears the value of the "fixed_rate" field.
func (u *UpworkJobUpsertBulk) ClearFixedRate() *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.ClearFixedRate()
	})
}

// SetAverageUprankScore sets the "average_uprank_score" field.
func (u *UpworkJobUpsertBulk) SetAverageUprankScore(v float64) *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.SetAverageUprankScore(v)
	})
}

// AddAverageUprankScore adds v to the "average_uprank_score" field.
func (u *UpworkJobUpsertBulk) AddAverageUprankScore(v float64) *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.AddAverageUprankScore(v)
	})
}

// UpdateAverageUprankScore sets the "average_uprank_score" field to the value that was provided on create.
func (u *UpworkJobUpsertBulk) UpdateAverageUprankScore() *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.UpdateAverageUprankScore()
	})
}

// ClearAverageUprankScore clears the value of the "average_uprank_score" field.
func (u *UpworkJobUpsertBulk) ClearAverageUprankScore() *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.ClearAverageUprankScore()
	})
}

// SetMaxUprankScore sets the "max_uprank_score" field.
func (u *UpworkJobUpsertBulk) SetMaxUprankScore(v float64) *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.SetMaxUprankScore(v)
	})
}

// AddMaxUprankScore adds v to the "max_uprank_score" field.
func (u *UpworkJobUpsertBulk) AddMaxUprankScore(v float64) *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.AddMaxUprankScore(v)
	})
}

// UpdateMaxUprankScore sets the "max_uprank_score" field to the value that was provided on create.
func (u *UpworkJobUpsertBulk) UpdateMaxUprankScore() *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.UpdateMaxUprankScore()
	})
}

// ClearMaxUprankScore clears the value of the "max_uprank_score" field.
func (u *UpworkJobUpsertBulk) ClearMaxUprankScore() *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.ClearMaxUprankScore()
	})
}

// SetMinUprankScore sets the "min_uprank_score" field.
func (u *UpworkJobUpsertBulk) SetMinUprankScore(v float64) *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.SetMinUprankScore(v)
	})
}

// AddMinUprankScore adds v to the "min_uprank_score" field.
func (u *UpworkJobUpsertBulk) AddMinUprankScore(v float64) *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.AddMinUprankScore(v)
	})
}

// UpdateMinUprankScore sets the "min_uprank_score" field to the value that was provided on create.
func (u *UpworkJobUpsertBulk) UpdateMinUprankScore() *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.UpdateMinUprankScore()
	})
}

// ClearMinUprankScore clears the value of the "min_uprank_score" field.
func (u *UpworkJobUpsertBulk) ClearMinUprankScore() *UpworkJobUpsertBulk {
	return u.Update(func(s *UpworkJobUpsert) {
		s.ClearMinUprankScore()
	})
}

// Exec executes the query.
func (u *UpworkJobUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UpworkJobCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UpworkJobCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UpworkJobUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
