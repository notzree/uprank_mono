// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/google/uuid"
	"github.com/notzree/uprank_mono/uprank-backend/main-backend/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/notzree/uprank_mono/uprank-backend/main-backend/ent/attachmentref"
	"github.com/notzree/uprank_mono/uprank-backend/main-backend/ent/freelancerinferencedata"
	"github.com/notzree/uprank_mono/uprank-backend/main-backend/ent/job"
	"github.com/notzree/uprank_mono/uprank-backend/main-backend/ent/upworkfreelancer"
	"github.com/notzree/uprank_mono/uprank-backend/main-backend/ent/upworkjob"
	"github.com/notzree/uprank_mono/uprank-backend/main-backend/ent/user"
	"github.com/notzree/uprank_mono/uprank-backend/main-backend/ent/workhistory"
	"github.com/notzree/uprank_mono/uprank-backend/main-backend/ent/workhistoryinferencedata"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AttachmentRef is the client for interacting with the AttachmentRef builders.
	AttachmentRef *AttachmentRefClient
	// FreelancerInferenceData is the client for interacting with the FreelancerInferenceData builders.
	FreelancerInferenceData *FreelancerInferenceDataClient
	// Job is the client for interacting with the Job builders.
	Job *JobClient
	// UpworkFreelancer is the client for interacting with the UpworkFreelancer builders.
	UpworkFreelancer *UpworkFreelancerClient
	// UpworkJob is the client for interacting with the UpworkJob builders.
	UpworkJob *UpworkJobClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// WorkHistory is the client for interacting with the WorkHistory builders.
	WorkHistory *WorkHistoryClient
	// WorkhistoryInferenceData is the client for interacting with the WorkhistoryInferenceData builders.
	WorkhistoryInferenceData *WorkhistoryInferenceDataClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AttachmentRef = NewAttachmentRefClient(c.config)
	c.FreelancerInferenceData = NewFreelancerInferenceDataClient(c.config)
	c.Job = NewJobClient(c.config)
	c.UpworkFreelancer = NewUpworkFreelancerClient(c.config)
	c.UpworkJob = NewUpworkJobClient(c.config)
	c.User = NewUserClient(c.config)
	c.WorkHistory = NewWorkHistoryClient(c.config)
	c.WorkhistoryInferenceData = NewWorkhistoryInferenceDataClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                      ctx,
		config:                   cfg,
		AttachmentRef:            NewAttachmentRefClient(cfg),
		FreelancerInferenceData:  NewFreelancerInferenceDataClient(cfg),
		Job:                      NewJobClient(cfg),
		UpworkFreelancer:         NewUpworkFreelancerClient(cfg),
		UpworkJob:                NewUpworkJobClient(cfg),
		User:                     NewUserClient(cfg),
		WorkHistory:              NewWorkHistoryClient(cfg),
		WorkhistoryInferenceData: NewWorkhistoryInferenceDataClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                      ctx,
		config:                   cfg,
		AttachmentRef:            NewAttachmentRefClient(cfg),
		FreelancerInferenceData:  NewFreelancerInferenceDataClient(cfg),
		Job:                      NewJobClient(cfg),
		UpworkFreelancer:         NewUpworkFreelancerClient(cfg),
		UpworkJob:                NewUpworkJobClient(cfg),
		User:                     NewUserClient(cfg),
		WorkHistory:              NewWorkHistoryClient(cfg),
		WorkhistoryInferenceData: NewWorkhistoryInferenceDataClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AttachmentRef.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.AttachmentRef, c.FreelancerInferenceData, c.Job, c.UpworkFreelancer,
		c.UpworkJob, c.User, c.WorkHistory, c.WorkhistoryInferenceData,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.AttachmentRef, c.FreelancerInferenceData, c.Job, c.UpworkFreelancer,
		c.UpworkJob, c.User, c.WorkHistory, c.WorkhistoryInferenceData,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AttachmentRefMutation:
		return c.AttachmentRef.mutate(ctx, m)
	case *FreelancerInferenceDataMutation:
		return c.FreelancerInferenceData.mutate(ctx, m)
	case *JobMutation:
		return c.Job.mutate(ctx, m)
	case *UpworkFreelancerMutation:
		return c.UpworkFreelancer.mutate(ctx, m)
	case *UpworkJobMutation:
		return c.UpworkJob.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *WorkHistoryMutation:
		return c.WorkHistory.mutate(ctx, m)
	case *WorkhistoryInferenceDataMutation:
		return c.WorkhistoryInferenceData.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AttachmentRefClient is a client for the AttachmentRef schema.
type AttachmentRefClient struct {
	config
}

// NewAttachmentRefClient returns a client for the AttachmentRef from the given config.
func NewAttachmentRefClient(c config) *AttachmentRefClient {
	return &AttachmentRefClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `attachmentref.Hooks(f(g(h())))`.
func (c *AttachmentRefClient) Use(hooks ...Hook) {
	c.hooks.AttachmentRef = append(c.hooks.AttachmentRef, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `attachmentref.Intercept(f(g(h())))`.
func (c *AttachmentRefClient) Intercept(interceptors ...Interceptor) {
	c.inters.AttachmentRef = append(c.inters.AttachmentRef, interceptors...)
}

// Create returns a builder for creating a AttachmentRef entity.
func (c *AttachmentRefClient) Create() *AttachmentRefCreate {
	mutation := newAttachmentRefMutation(c.config, OpCreate)
	return &AttachmentRefCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AttachmentRef entities.
func (c *AttachmentRefClient) CreateBulk(builders ...*AttachmentRefCreate) *AttachmentRefCreateBulk {
	return &AttachmentRefCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AttachmentRefClient) MapCreateBulk(slice any, setFunc func(*AttachmentRefCreate, int)) *AttachmentRefCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AttachmentRefCreateBulk{err: fmt.Errorf("calling to AttachmentRefClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AttachmentRefCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AttachmentRefCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AttachmentRef.
func (c *AttachmentRefClient) Update() *AttachmentRefUpdate {
	mutation := newAttachmentRefMutation(c.config, OpUpdate)
	return &AttachmentRefUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AttachmentRefClient) UpdateOne(ar *AttachmentRef) *AttachmentRefUpdateOne {
	mutation := newAttachmentRefMutation(c.config, OpUpdateOne, withAttachmentRef(ar))
	return &AttachmentRefUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AttachmentRefClient) UpdateOneID(id int) *AttachmentRefUpdateOne {
	mutation := newAttachmentRefMutation(c.config, OpUpdateOne, withAttachmentRefID(id))
	return &AttachmentRefUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AttachmentRef.
func (c *AttachmentRefClient) Delete() *AttachmentRefDelete {
	mutation := newAttachmentRefMutation(c.config, OpDelete)
	return &AttachmentRefDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AttachmentRefClient) DeleteOne(ar *AttachmentRef) *AttachmentRefDeleteOne {
	return c.DeleteOneID(ar.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AttachmentRefClient) DeleteOneID(id int) *AttachmentRefDeleteOne {
	builder := c.Delete().Where(attachmentref.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AttachmentRefDeleteOne{builder}
}

// Query returns a query builder for AttachmentRef.
func (c *AttachmentRefClient) Query() *AttachmentRefQuery {
	return &AttachmentRefQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAttachmentRef},
		inters: c.Interceptors(),
	}
}

// Get returns a AttachmentRef entity by its id.
func (c *AttachmentRefClient) Get(ctx context.Context, id int) (*AttachmentRef, error) {
	return c.Query().Where(attachmentref.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AttachmentRefClient) GetX(ctx context.Context, id int) *AttachmentRef {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFreelancer queries the freelancer edge of a AttachmentRef.
func (c *AttachmentRefClient) QueryFreelancer(ar *AttachmentRef) *UpworkFreelancerQuery {
	query := (&UpworkFreelancerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(attachmentref.Table, attachmentref.FieldID, id),
			sqlgraph.To(upworkfreelancer.Table, upworkfreelancer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, attachmentref.FreelancerTable, attachmentref.FreelancerColumn),
		)
		fromV = sqlgraph.Neighbors(ar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AttachmentRefClient) Hooks() []Hook {
	return c.hooks.AttachmentRef
}

// Interceptors returns the client interceptors.
func (c *AttachmentRefClient) Interceptors() []Interceptor {
	return c.inters.AttachmentRef
}

func (c *AttachmentRefClient) mutate(ctx context.Context, m *AttachmentRefMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AttachmentRefCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AttachmentRefUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AttachmentRefUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AttachmentRefDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AttachmentRef mutation op: %q", m.Op())
	}
}

// FreelancerInferenceDataClient is a client for the FreelancerInferenceData schema.
type FreelancerInferenceDataClient struct {
	config
}

// NewFreelancerInferenceDataClient returns a client for the FreelancerInferenceData from the given config.
func NewFreelancerInferenceDataClient(c config) *FreelancerInferenceDataClient {
	return &FreelancerInferenceDataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `freelancerinferencedata.Hooks(f(g(h())))`.
func (c *FreelancerInferenceDataClient) Use(hooks ...Hook) {
	c.hooks.FreelancerInferenceData = append(c.hooks.FreelancerInferenceData, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `freelancerinferencedata.Intercept(f(g(h())))`.
func (c *FreelancerInferenceDataClient) Intercept(interceptors ...Interceptor) {
	c.inters.FreelancerInferenceData = append(c.inters.FreelancerInferenceData, interceptors...)
}

// Create returns a builder for creating a FreelancerInferenceData entity.
func (c *FreelancerInferenceDataClient) Create() *FreelancerInferenceDataCreate {
	mutation := newFreelancerInferenceDataMutation(c.config, OpCreate)
	return &FreelancerInferenceDataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FreelancerInferenceData entities.
func (c *FreelancerInferenceDataClient) CreateBulk(builders ...*FreelancerInferenceDataCreate) *FreelancerInferenceDataCreateBulk {
	return &FreelancerInferenceDataCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FreelancerInferenceDataClient) MapCreateBulk(slice any, setFunc func(*FreelancerInferenceDataCreate, int)) *FreelancerInferenceDataCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FreelancerInferenceDataCreateBulk{err: fmt.Errorf("calling to FreelancerInferenceDataClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FreelancerInferenceDataCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FreelancerInferenceDataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FreelancerInferenceData.
func (c *FreelancerInferenceDataClient) Update() *FreelancerInferenceDataUpdate {
	mutation := newFreelancerInferenceDataMutation(c.config, OpUpdate)
	return &FreelancerInferenceDataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FreelancerInferenceDataClient) UpdateOne(fid *FreelancerInferenceData) *FreelancerInferenceDataUpdateOne {
	mutation := newFreelancerInferenceDataMutation(c.config, OpUpdateOne, withFreelancerInferenceData(fid))
	return &FreelancerInferenceDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FreelancerInferenceDataClient) UpdateOneID(id int) *FreelancerInferenceDataUpdateOne {
	mutation := newFreelancerInferenceDataMutation(c.config, OpUpdateOne, withFreelancerInferenceDataID(id))
	return &FreelancerInferenceDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FreelancerInferenceData.
func (c *FreelancerInferenceDataClient) Delete() *FreelancerInferenceDataDelete {
	mutation := newFreelancerInferenceDataMutation(c.config, OpDelete)
	return &FreelancerInferenceDataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FreelancerInferenceDataClient) DeleteOne(fid *FreelancerInferenceData) *FreelancerInferenceDataDeleteOne {
	return c.DeleteOneID(fid.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FreelancerInferenceDataClient) DeleteOneID(id int) *FreelancerInferenceDataDeleteOne {
	builder := c.Delete().Where(freelancerinferencedata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FreelancerInferenceDataDeleteOne{builder}
}

// Query returns a query builder for FreelancerInferenceData.
func (c *FreelancerInferenceDataClient) Query() *FreelancerInferenceDataQuery {
	return &FreelancerInferenceDataQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFreelancerInferenceData},
		inters: c.Interceptors(),
	}
}

// Get returns a FreelancerInferenceData entity by its id.
func (c *FreelancerInferenceDataClient) Get(ctx context.Context, id int) (*FreelancerInferenceData, error) {
	return c.Query().Where(freelancerinferencedata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FreelancerInferenceDataClient) GetX(ctx context.Context, id int) *FreelancerInferenceData {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUpworkfreelancer queries the upworkfreelancer edge of a FreelancerInferenceData.
func (c *FreelancerInferenceDataClient) QueryUpworkfreelancer(fid *FreelancerInferenceData) *UpworkFreelancerQuery {
	query := (&UpworkFreelancerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fid.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(freelancerinferencedata.Table, freelancerinferencedata.FieldID, id),
			sqlgraph.To(upworkfreelancer.Table, upworkfreelancer.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, freelancerinferencedata.UpworkfreelancerTable, freelancerinferencedata.UpworkfreelancerColumn),
		)
		fromV = sqlgraph.Neighbors(fid.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FreelancerInferenceDataClient) Hooks() []Hook {
	return c.hooks.FreelancerInferenceData
}

// Interceptors returns the client interceptors.
func (c *FreelancerInferenceDataClient) Interceptors() []Interceptor {
	return c.inters.FreelancerInferenceData
}

func (c *FreelancerInferenceDataClient) mutate(ctx context.Context, m *FreelancerInferenceDataMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FreelancerInferenceDataCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FreelancerInferenceDataUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FreelancerInferenceDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FreelancerInferenceDataDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FreelancerInferenceData mutation op: %q", m.Op())
	}
}

// JobClient is a client for the Job schema.
type JobClient struct {
	config
}

// NewJobClient returns a client for the Job from the given config.
func NewJobClient(c config) *JobClient {
	return &JobClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `job.Hooks(f(g(h())))`.
func (c *JobClient) Use(hooks ...Hook) {
	c.hooks.Job = append(c.hooks.Job, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `job.Intercept(f(g(h())))`.
func (c *JobClient) Intercept(interceptors ...Interceptor) {
	c.inters.Job = append(c.inters.Job, interceptors...)
}

// Create returns a builder for creating a Job entity.
func (c *JobClient) Create() *JobCreate {
	mutation := newJobMutation(c.config, OpCreate)
	return &JobCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Job entities.
func (c *JobClient) CreateBulk(builders ...*JobCreate) *JobCreateBulk {
	return &JobCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *JobClient) MapCreateBulk(slice any, setFunc func(*JobCreate, int)) *JobCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &JobCreateBulk{err: fmt.Errorf("calling to JobClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*JobCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &JobCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Job.
func (c *JobClient) Update() *JobUpdate {
	mutation := newJobMutation(c.config, OpUpdate)
	return &JobUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobClient) UpdateOne(j *Job) *JobUpdateOne {
	mutation := newJobMutation(c.config, OpUpdateOne, withJob(j))
	return &JobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobClient) UpdateOneID(id uuid.UUID) *JobUpdateOne {
	mutation := newJobMutation(c.config, OpUpdateOne, withJobID(id))
	return &JobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Job.
func (c *JobClient) Delete() *JobDelete {
	mutation := newJobMutation(c.config, OpDelete)
	return &JobDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobClient) DeleteOne(j *Job) *JobDeleteOne {
	return c.DeleteOneID(j.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobClient) DeleteOneID(id uuid.UUID) *JobDeleteOne {
	builder := c.Delete().Where(job.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobDeleteOne{builder}
}

// Query returns a query builder for Job.
func (c *JobClient) Query() *JobQuery {
	return &JobQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJob},
		inters: c.Interceptors(),
	}
}

// Get returns a Job entity by its id.
func (c *JobClient) Get(ctx context.Context, id uuid.UUID) (*Job, error) {
	return c.Query().Where(job.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobClient) GetX(ctx context.Context, id uuid.UUID) *Job {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Job.
func (c *JobClient) QueryUser(j *Job) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := j.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, job.UserTable, job.UserColumn),
		)
		fromV = sqlgraph.Neighbors(j.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpworkjob queries the upworkjob edge of a Job.
func (c *JobClient) QueryUpworkjob(j *Job) *UpworkJobQuery {
	query := (&UpworkJobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := j.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, id),
			sqlgraph.To(upworkjob.Table, upworkjob.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, job.UpworkjobTable, job.UpworkjobColumn),
		)
		fromV = sqlgraph.Neighbors(j.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobClient) Hooks() []Hook {
	return c.hooks.Job
}

// Interceptors returns the client interceptors.
func (c *JobClient) Interceptors() []Interceptor {
	return c.inters.Job
}

func (c *JobClient) mutate(ctx context.Context, m *JobMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Job mutation op: %q", m.Op())
	}
}

// UpworkFreelancerClient is a client for the UpworkFreelancer schema.
type UpworkFreelancerClient struct {
	config
}

// NewUpworkFreelancerClient returns a client for the UpworkFreelancer from the given config.
func NewUpworkFreelancerClient(c config) *UpworkFreelancerClient {
	return &UpworkFreelancerClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upworkfreelancer.Hooks(f(g(h())))`.
func (c *UpworkFreelancerClient) Use(hooks ...Hook) {
	c.hooks.UpworkFreelancer = append(c.hooks.UpworkFreelancer, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upworkfreelancer.Intercept(f(g(h())))`.
func (c *UpworkFreelancerClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpworkFreelancer = append(c.inters.UpworkFreelancer, interceptors...)
}

// Create returns a builder for creating a UpworkFreelancer entity.
func (c *UpworkFreelancerClient) Create() *UpworkFreelancerCreate {
	mutation := newUpworkFreelancerMutation(c.config, OpCreate)
	return &UpworkFreelancerCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpworkFreelancer entities.
func (c *UpworkFreelancerClient) CreateBulk(builders ...*UpworkFreelancerCreate) *UpworkFreelancerCreateBulk {
	return &UpworkFreelancerCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpworkFreelancerClient) MapCreateBulk(slice any, setFunc func(*UpworkFreelancerCreate, int)) *UpworkFreelancerCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpworkFreelancerCreateBulk{err: fmt.Errorf("calling to UpworkFreelancerClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpworkFreelancerCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpworkFreelancerCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpworkFreelancer.
func (c *UpworkFreelancerClient) Update() *UpworkFreelancerUpdate {
	mutation := newUpworkFreelancerMutation(c.config, OpUpdate)
	return &UpworkFreelancerUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpworkFreelancerClient) UpdateOne(uf *UpworkFreelancer) *UpworkFreelancerUpdateOne {
	mutation := newUpworkFreelancerMutation(c.config, OpUpdateOne, withUpworkFreelancer(uf))
	return &UpworkFreelancerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpworkFreelancerClient) UpdateOneID(id string) *UpworkFreelancerUpdateOne {
	mutation := newUpworkFreelancerMutation(c.config, OpUpdateOne, withUpworkFreelancerID(id))
	return &UpworkFreelancerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpworkFreelancer.
func (c *UpworkFreelancerClient) Delete() *UpworkFreelancerDelete {
	mutation := newUpworkFreelancerMutation(c.config, OpDelete)
	return &UpworkFreelancerDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpworkFreelancerClient) DeleteOne(uf *UpworkFreelancer) *UpworkFreelancerDeleteOne {
	return c.DeleteOneID(uf.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpworkFreelancerClient) DeleteOneID(id string) *UpworkFreelancerDeleteOne {
	builder := c.Delete().Where(upworkfreelancer.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpworkFreelancerDeleteOne{builder}
}

// Query returns a query builder for UpworkFreelancer.
func (c *UpworkFreelancerClient) Query() *UpworkFreelancerQuery {
	return &UpworkFreelancerQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpworkFreelancer},
		inters: c.Interceptors(),
	}
}

// Get returns a UpworkFreelancer entity by its id.
func (c *UpworkFreelancerClient) Get(ctx context.Context, id string) (*UpworkFreelancer, error) {
	return c.Query().Where(upworkfreelancer.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpworkFreelancerClient) GetX(ctx context.Context, id string) *UpworkFreelancer {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUpworkJob queries the upwork_job edge of a UpworkFreelancer.
func (c *UpworkFreelancerClient) QueryUpworkJob(uf *UpworkFreelancer) *UpworkJobQuery {
	query := (&UpworkJobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := uf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(upworkfreelancer.Table, upworkfreelancer.FieldID, id),
			sqlgraph.To(upworkjob.Table, upworkjob.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, upworkfreelancer.UpworkJobTable, upworkfreelancer.UpworkJobPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(uf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAttachments queries the attachments edge of a UpworkFreelancer.
func (c *UpworkFreelancerClient) QueryAttachments(uf *UpworkFreelancer) *AttachmentRefQuery {
	query := (&AttachmentRefClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := uf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(upworkfreelancer.Table, upworkfreelancer.FieldID, id),
			sqlgraph.To(attachmentref.Table, attachmentref.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, upworkfreelancer.AttachmentsTable, upworkfreelancer.AttachmentsColumn),
		)
		fromV = sqlgraph.Neighbors(uf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkHistories queries the work_histories edge of a UpworkFreelancer.
func (c *UpworkFreelancerClient) QueryWorkHistories(uf *UpworkFreelancer) *WorkHistoryQuery {
	query := (&WorkHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := uf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(upworkfreelancer.Table, upworkfreelancer.FieldID, id),
			sqlgraph.To(workhistory.Table, workhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, upworkfreelancer.WorkHistoriesTable, upworkfreelancer.WorkHistoriesColumn),
		)
		fromV = sqlgraph.Neighbors(uf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFreelancerInferenceData queries the freelancer_inference_data edge of a UpworkFreelancer.
func (c *UpworkFreelancerClient) QueryFreelancerInferenceData(uf *UpworkFreelancer) *FreelancerInferenceDataQuery {
	query := (&FreelancerInferenceDataClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := uf.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(upworkfreelancer.Table, upworkfreelancer.FieldID, id),
			sqlgraph.To(freelancerinferencedata.Table, freelancerinferencedata.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, upworkfreelancer.FreelancerInferenceDataTable, upworkfreelancer.FreelancerInferenceDataColumn),
		)
		fromV = sqlgraph.Neighbors(uf.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UpworkFreelancerClient) Hooks() []Hook {
	return c.hooks.UpworkFreelancer
}

// Interceptors returns the client interceptors.
func (c *UpworkFreelancerClient) Interceptors() []Interceptor {
	return c.inters.UpworkFreelancer
}

func (c *UpworkFreelancerClient) mutate(ctx context.Context, m *UpworkFreelancerMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpworkFreelancerCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpworkFreelancerUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpworkFreelancerUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpworkFreelancerDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpworkFreelancer mutation op: %q", m.Op())
	}
}

// UpworkJobClient is a client for the UpworkJob schema.
type UpworkJobClient struct {
	config
}

// NewUpworkJobClient returns a client for the UpworkJob from the given config.
func NewUpworkJobClient(c config) *UpworkJobClient {
	return &UpworkJobClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `upworkjob.Hooks(f(g(h())))`.
func (c *UpworkJobClient) Use(hooks ...Hook) {
	c.hooks.UpworkJob = append(c.hooks.UpworkJob, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `upworkjob.Intercept(f(g(h())))`.
func (c *UpworkJobClient) Intercept(interceptors ...Interceptor) {
	c.inters.UpworkJob = append(c.inters.UpworkJob, interceptors...)
}

// Create returns a builder for creating a UpworkJob entity.
func (c *UpworkJobClient) Create() *UpworkJobCreate {
	mutation := newUpworkJobMutation(c.config, OpCreate)
	return &UpworkJobCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UpworkJob entities.
func (c *UpworkJobClient) CreateBulk(builders ...*UpworkJobCreate) *UpworkJobCreateBulk {
	return &UpworkJobCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UpworkJobClient) MapCreateBulk(slice any, setFunc func(*UpworkJobCreate, int)) *UpworkJobCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UpworkJobCreateBulk{err: fmt.Errorf("calling to UpworkJobClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UpworkJobCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UpworkJobCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UpworkJob.
func (c *UpworkJobClient) Update() *UpworkJobUpdate {
	mutation := newUpworkJobMutation(c.config, OpUpdate)
	return &UpworkJobUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UpworkJobClient) UpdateOne(uj *UpworkJob) *UpworkJobUpdateOne {
	mutation := newUpworkJobMutation(c.config, OpUpdateOne, withUpworkJob(uj))
	return &UpworkJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UpworkJobClient) UpdateOneID(id string) *UpworkJobUpdateOne {
	mutation := newUpworkJobMutation(c.config, OpUpdateOne, withUpworkJobID(id))
	return &UpworkJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UpworkJob.
func (c *UpworkJobClient) Delete() *UpworkJobDelete {
	mutation := newUpworkJobMutation(c.config, OpDelete)
	return &UpworkJobDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UpworkJobClient) DeleteOne(uj *UpworkJob) *UpworkJobDeleteOne {
	return c.DeleteOneID(uj.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UpworkJobClient) DeleteOneID(id string) *UpworkJobDeleteOne {
	builder := c.Delete().Where(upworkjob.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UpworkJobDeleteOne{builder}
}

// Query returns a query builder for UpworkJob.
func (c *UpworkJobClient) Query() *UpworkJobQuery {
	return &UpworkJobQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUpworkJob},
		inters: c.Interceptors(),
	}
}

// Get returns a UpworkJob entity by its id.
func (c *UpworkJobClient) Get(ctx context.Context, id string) (*UpworkJob, error) {
	return c.Query().Where(upworkjob.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UpworkJobClient) GetX(ctx context.Context, id string) *UpworkJob {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUpworkfreelancer queries the upworkfreelancer edge of a UpworkJob.
func (c *UpworkJobClient) QueryUpworkfreelancer(uj *UpworkJob) *UpworkFreelancerQuery {
	query := (&UpworkFreelancerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := uj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(upworkjob.Table, upworkjob.FieldID, id),
			sqlgraph.To(upworkfreelancer.Table, upworkfreelancer.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, upworkjob.UpworkfreelancerTable, upworkjob.UpworkfreelancerPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(uj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJob queries the job edge of a UpworkJob.
func (c *UpworkJobClient) QueryJob(uj *UpworkJob) *JobQuery {
	query := (&JobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := uj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(upworkjob.Table, upworkjob.FieldID, id),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, upworkjob.JobTable, upworkjob.JobColumn),
		)
		fromV = sqlgraph.Neighbors(uj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a UpworkJob.
func (c *UpworkJobClient) QueryUser(uj *UpworkJob) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := uj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(upworkjob.Table, upworkjob.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, upworkjob.UserTable, upworkjob.UserPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(uj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UpworkJobClient) Hooks() []Hook {
	return c.hooks.UpworkJob
}

// Interceptors returns the client interceptors.
func (c *UpworkJobClient) Interceptors() []Interceptor {
	return c.inters.UpworkJob
}

func (c *UpworkJobClient) mutate(ctx context.Context, m *UpworkJobMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UpworkJobCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UpworkJobUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UpworkJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UpworkJobDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown UpworkJob mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id string) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id string) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id string) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id string) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryJob queries the job edge of a User.
func (c *UserClient) QueryJob(u *User) *JobQuery {
	query := (&JobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.JobTable, user.JobColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUpworkjob queries the upworkjob edge of a User.
func (c *UserClient) QueryUpworkjob(u *User) *UpworkJobQuery {
	query := (&UpworkJobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(upworkjob.Table, upworkjob.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.UpworkjobTable, user.UpworkjobPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// WorkHistoryClient is a client for the WorkHistory schema.
type WorkHistoryClient struct {
	config
}

// NewWorkHistoryClient returns a client for the WorkHistory from the given config.
func NewWorkHistoryClient(c config) *WorkHistoryClient {
	return &WorkHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workhistory.Hooks(f(g(h())))`.
func (c *WorkHistoryClient) Use(hooks ...Hook) {
	c.hooks.WorkHistory = append(c.hooks.WorkHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `workhistory.Intercept(f(g(h())))`.
func (c *WorkHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.WorkHistory = append(c.inters.WorkHistory, interceptors...)
}

// Create returns a builder for creating a WorkHistory entity.
func (c *WorkHistoryClient) Create() *WorkHistoryCreate {
	mutation := newWorkHistoryMutation(c.config, OpCreate)
	return &WorkHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkHistory entities.
func (c *WorkHistoryClient) CreateBulk(builders ...*WorkHistoryCreate) *WorkHistoryCreateBulk {
	return &WorkHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WorkHistoryClient) MapCreateBulk(slice any, setFunc func(*WorkHistoryCreate, int)) *WorkHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WorkHistoryCreateBulk{err: fmt.Errorf("calling to WorkHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WorkHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WorkHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkHistory.
func (c *WorkHistoryClient) Update() *WorkHistoryUpdate {
	mutation := newWorkHistoryMutation(c.config, OpUpdate)
	return &WorkHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkHistoryClient) UpdateOne(wh *WorkHistory) *WorkHistoryUpdateOne {
	mutation := newWorkHistoryMutation(c.config, OpUpdateOne, withWorkHistory(wh))
	return &WorkHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkHistoryClient) UpdateOneID(id int) *WorkHistoryUpdateOne {
	mutation := newWorkHistoryMutation(c.config, OpUpdateOne, withWorkHistoryID(id))
	return &WorkHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkHistory.
func (c *WorkHistoryClient) Delete() *WorkHistoryDelete {
	mutation := newWorkHistoryMutation(c.config, OpDelete)
	return &WorkHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WorkHistoryClient) DeleteOne(wh *WorkHistory) *WorkHistoryDeleteOne {
	return c.DeleteOneID(wh.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WorkHistoryClient) DeleteOneID(id int) *WorkHistoryDeleteOne {
	builder := c.Delete().Where(workhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkHistoryDeleteOne{builder}
}

// Query returns a query builder for WorkHistory.
func (c *WorkHistoryClient) Query() *WorkHistoryQuery {
	return &WorkHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWorkHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a WorkHistory entity by its id.
func (c *WorkHistoryClient) Get(ctx context.Context, id int) (*WorkHistory, error) {
	return c.Query().Where(workhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkHistoryClient) GetX(ctx context.Context, id int) *WorkHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFreelancer queries the freelancer edge of a WorkHistory.
func (c *WorkHistoryClient) QueryFreelancer(wh *WorkHistory) *UpworkFreelancerQuery {
	query := (&UpworkFreelancerClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workhistory.Table, workhistory.FieldID, id),
			sqlgraph.To(upworkfreelancer.Table, upworkfreelancer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workhistory.FreelancerTable, workhistory.FreelancerColumn),
		)
		fromV = sqlgraph.Neighbors(wh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWorkHistoryInferenceData queries the work_history_inference_data edge of a WorkHistory.
func (c *WorkHistoryClient) QueryWorkHistoryInferenceData(wh *WorkHistory) *WorkhistoryInferenceDataQuery {
	query := (&WorkhistoryInferenceDataClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workhistory.Table, workhistory.FieldID, id),
			sqlgraph.To(workhistoryinferencedata.Table, workhistoryinferencedata.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, workhistory.WorkHistoryInferenceDataTable, workhistory.WorkHistoryInferenceDataColumn),
		)
		fromV = sqlgraph.Neighbors(wh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkHistoryClient) Hooks() []Hook {
	return c.hooks.WorkHistory
}

// Interceptors returns the client interceptors.
func (c *WorkHistoryClient) Interceptors() []Interceptor {
	return c.inters.WorkHistory
}

func (c *WorkHistoryClient) mutate(ctx context.Context, m *WorkHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WorkHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WorkHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WorkHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WorkHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WorkHistory mutation op: %q", m.Op())
	}
}

// WorkhistoryInferenceDataClient is a client for the WorkhistoryInferenceData schema.
type WorkhistoryInferenceDataClient struct {
	config
}

// NewWorkhistoryInferenceDataClient returns a client for the WorkhistoryInferenceData from the given config.
func NewWorkhistoryInferenceDataClient(c config) *WorkhistoryInferenceDataClient {
	return &WorkhistoryInferenceDataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `workhistoryinferencedata.Hooks(f(g(h())))`.
func (c *WorkhistoryInferenceDataClient) Use(hooks ...Hook) {
	c.hooks.WorkhistoryInferenceData = append(c.hooks.WorkhistoryInferenceData, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `workhistoryinferencedata.Intercept(f(g(h())))`.
func (c *WorkhistoryInferenceDataClient) Intercept(interceptors ...Interceptor) {
	c.inters.WorkhistoryInferenceData = append(c.inters.WorkhistoryInferenceData, interceptors...)
}

// Create returns a builder for creating a WorkhistoryInferenceData entity.
func (c *WorkhistoryInferenceDataClient) Create() *WorkhistoryInferenceDataCreate {
	mutation := newWorkhistoryInferenceDataMutation(c.config, OpCreate)
	return &WorkhistoryInferenceDataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WorkhistoryInferenceData entities.
func (c *WorkhistoryInferenceDataClient) CreateBulk(builders ...*WorkhistoryInferenceDataCreate) *WorkhistoryInferenceDataCreateBulk {
	return &WorkhistoryInferenceDataCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WorkhistoryInferenceDataClient) MapCreateBulk(slice any, setFunc func(*WorkhistoryInferenceDataCreate, int)) *WorkhistoryInferenceDataCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WorkhistoryInferenceDataCreateBulk{err: fmt.Errorf("calling to WorkhistoryInferenceDataClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WorkhistoryInferenceDataCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WorkhistoryInferenceDataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WorkhistoryInferenceData.
func (c *WorkhistoryInferenceDataClient) Update() *WorkhistoryInferenceDataUpdate {
	mutation := newWorkhistoryInferenceDataMutation(c.config, OpUpdate)
	return &WorkhistoryInferenceDataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WorkhistoryInferenceDataClient) UpdateOne(wid *WorkhistoryInferenceData) *WorkhistoryInferenceDataUpdateOne {
	mutation := newWorkhistoryInferenceDataMutation(c.config, OpUpdateOne, withWorkhistoryInferenceData(wid))
	return &WorkhistoryInferenceDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WorkhistoryInferenceDataClient) UpdateOneID(id int) *WorkhistoryInferenceDataUpdateOne {
	mutation := newWorkhistoryInferenceDataMutation(c.config, OpUpdateOne, withWorkhistoryInferenceDataID(id))
	return &WorkhistoryInferenceDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WorkhistoryInferenceData.
func (c *WorkhistoryInferenceDataClient) Delete() *WorkhistoryInferenceDataDelete {
	mutation := newWorkhistoryInferenceDataMutation(c.config, OpDelete)
	return &WorkhistoryInferenceDataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WorkhistoryInferenceDataClient) DeleteOne(wid *WorkhistoryInferenceData) *WorkhistoryInferenceDataDeleteOne {
	return c.DeleteOneID(wid.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WorkhistoryInferenceDataClient) DeleteOneID(id int) *WorkhistoryInferenceDataDeleteOne {
	builder := c.Delete().Where(workhistoryinferencedata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WorkhistoryInferenceDataDeleteOne{builder}
}

// Query returns a query builder for WorkhistoryInferenceData.
func (c *WorkhistoryInferenceDataClient) Query() *WorkhistoryInferenceDataQuery {
	return &WorkhistoryInferenceDataQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWorkhistoryInferenceData},
		inters: c.Interceptors(),
	}
}

// Get returns a WorkhistoryInferenceData entity by its id.
func (c *WorkhistoryInferenceDataClient) Get(ctx context.Context, id int) (*WorkhistoryInferenceData, error) {
	return c.Query().Where(workhistoryinferencedata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WorkhistoryInferenceDataClient) GetX(ctx context.Context, id int) *WorkhistoryInferenceData {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryWorkHistories queries the work_histories edge of a WorkhistoryInferenceData.
func (c *WorkhistoryInferenceDataClient) QueryWorkHistories(wid *WorkhistoryInferenceData) *WorkHistoryQuery {
	query := (&WorkHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wid.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(workhistoryinferencedata.Table, workhistoryinferencedata.FieldID, id),
			sqlgraph.To(workhistory.Table, workhistory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workhistoryinferencedata.WorkHistoriesTable, workhistoryinferencedata.WorkHistoriesColumn),
		)
		fromV = sqlgraph.Neighbors(wid.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WorkhistoryInferenceDataClient) Hooks() []Hook {
	return c.hooks.WorkhistoryInferenceData
}

// Interceptors returns the client interceptors.
func (c *WorkhistoryInferenceDataClient) Interceptors() []Interceptor {
	return c.inters.WorkhistoryInferenceData
}

func (c *WorkhistoryInferenceDataClient) mutate(ctx context.Context, m *WorkhistoryInferenceDataMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WorkhistoryInferenceDataCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WorkhistoryInferenceDataUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WorkhistoryInferenceDataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WorkhistoryInferenceDataDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WorkhistoryInferenceData mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		AttachmentRef, FreelancerInferenceData, Job, UpworkFreelancer, UpworkJob, User,
		WorkHistory, WorkhistoryInferenceData []ent.Hook
	}
	inters struct {
		AttachmentRef, FreelancerInferenceData, Job, UpworkFreelancer, UpworkJob, User,
		WorkHistory, WorkhistoryInferenceData []ent.Interceptor
	}
)
