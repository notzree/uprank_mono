// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/notzree/uprank-backend/main-backend/ent/attachmentref"
	"github.com/notzree/uprank-backend/main-backend/ent/freelancer"
	"github.com/notzree/uprank-backend/main-backend/ent/job"
	"github.com/notzree/uprank-backend/main-backend/ent/predicate"
	"github.com/notzree/uprank-backend/main-backend/ent/workhistory"
)

// FreelancerUpdate is the builder for updating Freelancer entities.
type FreelancerUpdate struct {
	config
	hooks    []Hook
	mutation *FreelancerMutation
}

// Where appends a list predicates to the FreelancerUpdate builder.
func (fu *FreelancerUpdate) Where(ps ...predicate.Freelancer) *FreelancerUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetName sets the "name" field.
func (fu *FreelancerUpdate) SetName(s string) *FreelancerUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableName(s *string) *FreelancerUpdate {
	if s != nil {
		fu.SetName(*s)
	}
	return fu
}

// SetTitle sets the "title" field.
func (fu *FreelancerUpdate) SetTitle(s string) *FreelancerUpdate {
	fu.mutation.SetTitle(s)
	return fu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableTitle(s *string) *FreelancerUpdate {
	if s != nil {
		fu.SetTitle(*s)
	}
	return fu
}

// SetDescription sets the "description" field.
func (fu *FreelancerUpdate) SetDescription(s string) *FreelancerUpdate {
	fu.mutation.SetDescription(s)
	return fu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableDescription(s *string) *FreelancerUpdate {
	if s != nil {
		fu.SetDescription(*s)
	}
	return fu
}

// SetCity sets the "city" field.
func (fu *FreelancerUpdate) SetCity(s string) *FreelancerUpdate {
	fu.mutation.SetCity(s)
	return fu
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableCity(s *string) *FreelancerUpdate {
	if s != nil {
		fu.SetCity(*s)
	}
	return fu
}

// SetCountry sets the "country" field.
func (fu *FreelancerUpdate) SetCountry(s string) *FreelancerUpdate {
	fu.mutation.SetCountry(s)
	return fu
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableCountry(s *string) *FreelancerUpdate {
	if s != nil {
		fu.SetCountry(*s)
	}
	return fu
}

// SetTimezone sets the "timezone" field.
func (fu *FreelancerUpdate) SetTimezone(s string) *FreelancerUpdate {
	fu.mutation.SetTimezone(s)
	return fu
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableTimezone(s *string) *FreelancerUpdate {
	if s != nil {
		fu.SetTimezone(*s)
	}
	return fu
}

// SetCv sets the "cv" field.
func (fu *FreelancerUpdate) SetCv(s string) *FreelancerUpdate {
	fu.mutation.SetCv(s)
	return fu
}

// SetNillableCv sets the "cv" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableCv(s *string) *FreelancerUpdate {
	if s != nil {
		fu.SetCv(*s)
	}
	return fu
}

// SetAiReccomended sets the "ai_reccomended" field.
func (fu *FreelancerUpdate) SetAiReccomended(b bool) *FreelancerUpdate {
	fu.mutation.SetAiReccomended(b)
	return fu
}

// SetNillableAiReccomended sets the "ai_reccomended" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableAiReccomended(b *bool) *FreelancerUpdate {
	if b != nil {
		fu.SetAiReccomended(*b)
	}
	return fu
}

// SetFixedChargeAmount sets the "fixed_charge_amount" field.
func (fu *FreelancerUpdate) SetFixedChargeAmount(f float64) *FreelancerUpdate {
	fu.mutation.ResetFixedChargeAmount()
	fu.mutation.SetFixedChargeAmount(f)
	return fu
}

// SetNillableFixedChargeAmount sets the "fixed_charge_amount" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableFixedChargeAmount(f *float64) *FreelancerUpdate {
	if f != nil {
		fu.SetFixedChargeAmount(*f)
	}
	return fu
}

// AddFixedChargeAmount adds f to the "fixed_charge_amount" field.
func (fu *FreelancerUpdate) AddFixedChargeAmount(f float64) *FreelancerUpdate {
	fu.mutation.AddFixedChargeAmount(f)
	return fu
}

// ClearFixedChargeAmount clears the value of the "fixed_charge_amount" field.
func (fu *FreelancerUpdate) ClearFixedChargeAmount() *FreelancerUpdate {
	fu.mutation.ClearFixedChargeAmount()
	return fu
}

// SetFixedChargeCurrency sets the "fixed_charge_currency" field.
func (fu *FreelancerUpdate) SetFixedChargeCurrency(s string) *FreelancerUpdate {
	fu.mutation.SetFixedChargeCurrency(s)
	return fu
}

// SetNillableFixedChargeCurrency sets the "fixed_charge_currency" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableFixedChargeCurrency(s *string) *FreelancerUpdate {
	if s != nil {
		fu.SetFixedChargeCurrency(*s)
	}
	return fu
}

// SetHourlyChargeAmount sets the "hourly_charge_amount" field.
func (fu *FreelancerUpdate) SetHourlyChargeAmount(f float64) *FreelancerUpdate {
	fu.mutation.ResetHourlyChargeAmount()
	fu.mutation.SetHourlyChargeAmount(f)
	return fu
}

// SetNillableHourlyChargeAmount sets the "hourly_charge_amount" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableHourlyChargeAmount(f *float64) *FreelancerUpdate {
	if f != nil {
		fu.SetHourlyChargeAmount(*f)
	}
	return fu
}

// AddHourlyChargeAmount adds f to the "hourly_charge_amount" field.
func (fu *FreelancerUpdate) AddHourlyChargeAmount(f float64) *FreelancerUpdate {
	fu.mutation.AddHourlyChargeAmount(f)
	return fu
}

// ClearHourlyChargeAmount clears the value of the "hourly_charge_amount" field.
func (fu *FreelancerUpdate) ClearHourlyChargeAmount() *FreelancerUpdate {
	fu.mutation.ClearHourlyChargeAmount()
	return fu
}

// SetHourlyChargeCurrency sets the "hourly_charge_currency" field.
func (fu *FreelancerUpdate) SetHourlyChargeCurrency(s string) *FreelancerUpdate {
	fu.mutation.SetHourlyChargeCurrency(s)
	return fu
}

// SetNillableHourlyChargeCurrency sets the "hourly_charge_currency" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableHourlyChargeCurrency(s *string) *FreelancerUpdate {
	if s != nil {
		fu.SetHourlyChargeCurrency(*s)
	}
	return fu
}

// SetInvited sets the "invited" field.
func (fu *FreelancerUpdate) SetInvited(b bool) *FreelancerUpdate {
	fu.mutation.SetInvited(b)
	return fu
}

// SetNillableInvited sets the "invited" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableInvited(b *bool) *FreelancerUpdate {
	if b != nil {
		fu.SetInvited(*b)
	}
	return fu
}

// SetPhotoURL sets the "photo_url" field.
func (fu *FreelancerUpdate) SetPhotoURL(s string) *FreelancerUpdate {
	fu.mutation.SetPhotoURL(s)
	return fu
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillablePhotoURL(s *string) *FreelancerUpdate {
	if s != nil {
		fu.SetPhotoURL(*s)
	}
	return fu
}

// SetRecentHours sets the "recent_hours" field.
func (fu *FreelancerUpdate) SetRecentHours(f float64) *FreelancerUpdate {
	fu.mutation.ResetRecentHours()
	fu.mutation.SetRecentHours(f)
	return fu
}

// SetNillableRecentHours sets the "recent_hours" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableRecentHours(f *float64) *FreelancerUpdate {
	if f != nil {
		fu.SetRecentHours(*f)
	}
	return fu
}

// AddRecentHours adds f to the "recent_hours" field.
func (fu *FreelancerUpdate) AddRecentHours(f float64) *FreelancerUpdate {
	fu.mutation.AddRecentHours(f)
	return fu
}

// SetTotalHours sets the "total_hours" field.
func (fu *FreelancerUpdate) SetTotalHours(f float64) *FreelancerUpdate {
	fu.mutation.ResetTotalHours()
	fu.mutation.SetTotalHours(f)
	return fu
}

// SetNillableTotalHours sets the "total_hours" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableTotalHours(f *float64) *FreelancerUpdate {
	if f != nil {
		fu.SetTotalHours(*f)
	}
	return fu
}

// AddTotalHours adds f to the "total_hours" field.
func (fu *FreelancerUpdate) AddTotalHours(f float64) *FreelancerUpdate {
	fu.mutation.AddTotalHours(f)
	return fu
}

// SetTotalPortfolioItems sets the "total_portfolio_items" field.
func (fu *FreelancerUpdate) SetTotalPortfolioItems(i int) *FreelancerUpdate {
	fu.mutation.ResetTotalPortfolioItems()
	fu.mutation.SetTotalPortfolioItems(i)
	return fu
}

// SetNillableTotalPortfolioItems sets the "total_portfolio_items" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableTotalPortfolioItems(i *int) *FreelancerUpdate {
	if i != nil {
		fu.SetTotalPortfolioItems(*i)
	}
	return fu
}

// AddTotalPortfolioItems adds i to the "total_portfolio_items" field.
func (fu *FreelancerUpdate) AddTotalPortfolioItems(i int) *FreelancerUpdate {
	fu.mutation.AddTotalPortfolioItems(i)
	return fu
}

// SetTotalPortfolioV2Items sets the "total_portfolio_v2_items" field.
func (fu *FreelancerUpdate) SetTotalPortfolioV2Items(i int) *FreelancerUpdate {
	fu.mutation.ResetTotalPortfolioV2Items()
	fu.mutation.SetTotalPortfolioV2Items(i)
	return fu
}

// SetNillableTotalPortfolioV2Items sets the "total_portfolio_v2_items" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableTotalPortfolioV2Items(i *int) *FreelancerUpdate {
	if i != nil {
		fu.SetTotalPortfolioV2Items(*i)
	}
	return fu
}

// AddTotalPortfolioV2Items adds i to the "total_portfolio_v2_items" field.
func (fu *FreelancerUpdate) AddTotalPortfolioV2Items(i int) *FreelancerUpdate {
	fu.mutation.AddTotalPortfolioV2Items(i)
	return fu
}

// SetUpworkTotalFeedback sets the "upwork_total_feedback" field.
func (fu *FreelancerUpdate) SetUpworkTotalFeedback(f float64) *FreelancerUpdate {
	fu.mutation.ResetUpworkTotalFeedback()
	fu.mutation.SetUpworkTotalFeedback(f)
	return fu
}

// SetNillableUpworkTotalFeedback sets the "upwork_total_feedback" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableUpworkTotalFeedback(f *float64) *FreelancerUpdate {
	if f != nil {
		fu.SetUpworkTotalFeedback(*f)
	}
	return fu
}

// AddUpworkTotalFeedback adds f to the "upwork_total_feedback" field.
func (fu *FreelancerUpdate) AddUpworkTotalFeedback(f float64) *FreelancerUpdate {
	fu.mutation.AddUpworkTotalFeedback(f)
	return fu
}

// SetUpworkRecentFeedback sets the "upwork_recent_feedback" field.
func (fu *FreelancerUpdate) SetUpworkRecentFeedback(f float64) *FreelancerUpdate {
	fu.mutation.ResetUpworkRecentFeedback()
	fu.mutation.SetUpworkRecentFeedback(f)
	return fu
}

// SetNillableUpworkRecentFeedback sets the "upwork_recent_feedback" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableUpworkRecentFeedback(f *float64) *FreelancerUpdate {
	if f != nil {
		fu.SetUpworkRecentFeedback(*f)
	}
	return fu
}

// AddUpworkRecentFeedback adds f to the "upwork_recent_feedback" field.
func (fu *FreelancerUpdate) AddUpworkRecentFeedback(f float64) *FreelancerUpdate {
	fu.mutation.AddUpworkRecentFeedback(f)
	return fu
}

// SetUpworkTopRatedStatus sets the "upwork_top_rated_status" field.
func (fu *FreelancerUpdate) SetUpworkTopRatedStatus(b bool) *FreelancerUpdate {
	fu.mutation.SetUpworkTopRatedStatus(b)
	return fu
}

// SetNillableUpworkTopRatedStatus sets the "upwork_top_rated_status" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableUpworkTopRatedStatus(b *bool) *FreelancerUpdate {
	if b != nil {
		fu.SetUpworkTopRatedStatus(*b)
	}
	return fu
}

// SetUpworkTopRatedPlusStatus sets the "upwork_top_rated_plus_status" field.
func (fu *FreelancerUpdate) SetUpworkTopRatedPlusStatus(b bool) *FreelancerUpdate {
	fu.mutation.SetUpworkTopRatedPlusStatus(b)
	return fu
}

// SetNillableUpworkTopRatedPlusStatus sets the "upwork_top_rated_plus_status" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableUpworkTopRatedPlusStatus(b *bool) *FreelancerUpdate {
	if b != nil {
		fu.SetUpworkTopRatedPlusStatus(*b)
	}
	return fu
}

// SetUpworkSponsored sets the "upwork_sponsored" field.
func (fu *FreelancerUpdate) SetUpworkSponsored(b bool) *FreelancerUpdate {
	fu.mutation.SetUpworkSponsored(b)
	return fu
}

// SetNillableUpworkSponsored sets the "upwork_sponsored" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableUpworkSponsored(b *bool) *FreelancerUpdate {
	if b != nil {
		fu.SetUpworkSponsored(*b)
	}
	return fu
}

// SetUpworkJobSuccessScore sets the "upwork_job_success_score" field.
func (fu *FreelancerUpdate) SetUpworkJobSuccessScore(f float64) *FreelancerUpdate {
	fu.mutation.ResetUpworkJobSuccessScore()
	fu.mutation.SetUpworkJobSuccessScore(f)
	return fu
}

// SetNillableUpworkJobSuccessScore sets the "upwork_job_success_score" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableUpworkJobSuccessScore(f *float64) *FreelancerUpdate {
	if f != nil {
		fu.SetUpworkJobSuccessScore(*f)
	}
	return fu
}

// AddUpworkJobSuccessScore adds f to the "upwork_job_success_score" field.
func (fu *FreelancerUpdate) AddUpworkJobSuccessScore(f float64) *FreelancerUpdate {
	fu.mutation.AddUpworkJobSuccessScore(f)
	return fu
}

// SetUpworkReccomended sets the "upwork_reccomended" field.
func (fu *FreelancerUpdate) SetUpworkReccomended(b bool) *FreelancerUpdate {
	fu.mutation.SetUpworkReccomended(b)
	return fu
}

// SetNillableUpworkReccomended sets the "upwork_reccomended" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableUpworkReccomended(b *bool) *FreelancerUpdate {
	if b != nil {
		fu.SetUpworkReccomended(*b)
	}
	return fu
}

// SetSkills sets the "skills" field.
func (fu *FreelancerUpdate) SetSkills(s []string) *FreelancerUpdate {
	fu.mutation.SetSkills(s)
	return fu
}

// AppendSkills appends s to the "skills" field.
func (fu *FreelancerUpdate) AppendSkills(s []string) *FreelancerUpdate {
	fu.mutation.AppendSkills(s)
	return fu
}

// SetAverageRecentEarnings sets the "average_recent_earnings" field.
func (fu *FreelancerUpdate) SetAverageRecentEarnings(f float64) *FreelancerUpdate {
	fu.mutation.ResetAverageRecentEarnings()
	fu.mutation.SetAverageRecentEarnings(f)
	return fu
}

// SetNillableAverageRecentEarnings sets the "average_recent_earnings" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableAverageRecentEarnings(f *float64) *FreelancerUpdate {
	if f != nil {
		fu.SetAverageRecentEarnings(*f)
	}
	return fu
}

// AddAverageRecentEarnings adds f to the "average_recent_earnings" field.
func (fu *FreelancerUpdate) AddAverageRecentEarnings(f float64) *FreelancerUpdate {
	fu.mutation.AddAverageRecentEarnings(f)
	return fu
}

// SetCombinedAverageRecentEarnings sets the "combined_average_recent_earnings" field.
func (fu *FreelancerUpdate) SetCombinedAverageRecentEarnings(f float64) *FreelancerUpdate {
	fu.mutation.ResetCombinedAverageRecentEarnings()
	fu.mutation.SetCombinedAverageRecentEarnings(f)
	return fu
}

// SetNillableCombinedAverageRecentEarnings sets the "combined_average_recent_earnings" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableCombinedAverageRecentEarnings(f *float64) *FreelancerUpdate {
	if f != nil {
		fu.SetCombinedAverageRecentEarnings(*f)
	}
	return fu
}

// AddCombinedAverageRecentEarnings adds f to the "combined_average_recent_earnings" field.
func (fu *FreelancerUpdate) AddCombinedAverageRecentEarnings(f float64) *FreelancerUpdate {
	fu.mutation.AddCombinedAverageRecentEarnings(f)
	return fu
}

// SetCombinedRecentEarnings sets the "combined_recent_earnings" field.
func (fu *FreelancerUpdate) SetCombinedRecentEarnings(f float64) *FreelancerUpdate {
	fu.mutation.ResetCombinedRecentEarnings()
	fu.mutation.SetCombinedRecentEarnings(f)
	return fu
}

// SetNillableCombinedRecentEarnings sets the "combined_recent_earnings" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableCombinedRecentEarnings(f *float64) *FreelancerUpdate {
	if f != nil {
		fu.SetCombinedRecentEarnings(*f)
	}
	return fu
}

// AddCombinedRecentEarnings adds f to the "combined_recent_earnings" field.
func (fu *FreelancerUpdate) AddCombinedRecentEarnings(f float64) *FreelancerUpdate {
	fu.mutation.AddCombinedRecentEarnings(f)
	return fu
}

// SetCombinedTotalEarnings sets the "combined_total_earnings" field.
func (fu *FreelancerUpdate) SetCombinedTotalEarnings(f float64) *FreelancerUpdate {
	fu.mutation.ResetCombinedTotalEarnings()
	fu.mutation.SetCombinedTotalEarnings(f)
	return fu
}

// SetNillableCombinedTotalEarnings sets the "combined_total_earnings" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableCombinedTotalEarnings(f *float64) *FreelancerUpdate {
	if f != nil {
		fu.SetCombinedTotalEarnings(*f)
	}
	return fu
}

// AddCombinedTotalEarnings adds f to the "combined_total_earnings" field.
func (fu *FreelancerUpdate) AddCombinedTotalEarnings(f float64) *FreelancerUpdate {
	fu.mutation.AddCombinedTotalEarnings(f)
	return fu
}

// SetCombinedTotalRevenue sets the "combined_total_revenue" field.
func (fu *FreelancerUpdate) SetCombinedTotalRevenue(f float64) *FreelancerUpdate {
	fu.mutation.ResetCombinedTotalRevenue()
	fu.mutation.SetCombinedTotalRevenue(f)
	return fu
}

// SetNillableCombinedTotalRevenue sets the "combined_total_revenue" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableCombinedTotalRevenue(f *float64) *FreelancerUpdate {
	if f != nil {
		fu.SetCombinedTotalRevenue(*f)
	}
	return fu
}

// AddCombinedTotalRevenue adds f to the "combined_total_revenue" field.
func (fu *FreelancerUpdate) AddCombinedTotalRevenue(f float64) *FreelancerUpdate {
	fu.mutation.AddCombinedTotalRevenue(f)
	return fu
}

// SetRecentEarnings sets the "recent_earnings" field.
func (fu *FreelancerUpdate) SetRecentEarnings(f float64) *FreelancerUpdate {
	fu.mutation.ResetRecentEarnings()
	fu.mutation.SetRecentEarnings(f)
	return fu
}

// SetNillableRecentEarnings sets the "recent_earnings" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableRecentEarnings(f *float64) *FreelancerUpdate {
	if f != nil {
		fu.SetRecentEarnings(*f)
	}
	return fu
}

// AddRecentEarnings adds f to the "recent_earnings" field.
func (fu *FreelancerUpdate) AddRecentEarnings(f float64) *FreelancerUpdate {
	fu.mutation.AddRecentEarnings(f)
	return fu
}

// SetTotalRevenue sets the "total_revenue" field.
func (fu *FreelancerUpdate) SetTotalRevenue(f float64) *FreelancerUpdate {
	fu.mutation.ResetTotalRevenue()
	fu.mutation.SetTotalRevenue(f)
	return fu
}

// SetNillableTotalRevenue sets the "total_revenue" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableTotalRevenue(f *float64) *FreelancerUpdate {
	if f != nil {
		fu.SetTotalRevenue(*f)
	}
	return fu
}

// AddTotalRevenue adds f to the "total_revenue" field.
func (fu *FreelancerUpdate) AddTotalRevenue(f float64) *FreelancerUpdate {
	fu.mutation.AddTotalRevenue(f)
	return fu
}

// SetUprankScore sets the "uprank_score" field.
func (fu *FreelancerUpdate) SetUprankScore(i int) *FreelancerUpdate {
	fu.mutation.ResetUprankScore()
	fu.mutation.SetUprankScore(i)
	return fu
}

// SetNillableUprankScore sets the "uprank_score" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableUprankScore(i *int) *FreelancerUpdate {
	if i != nil {
		fu.SetUprankScore(*i)
	}
	return fu
}

// AddUprankScore adds i to the "uprank_score" field.
func (fu *FreelancerUpdate) AddUprankScore(i int) *FreelancerUpdate {
	fu.mutation.AddUprankScore(i)
	return fu
}

// ClearUprankScore clears the value of the "uprank_score" field.
func (fu *FreelancerUpdate) ClearUprankScore() *FreelancerUpdate {
	fu.mutation.ClearUprankScore()
	return fu
}

// SetUprankUpdatedAt sets the "uprank_updated_at" field.
func (fu *FreelancerUpdate) SetUprankUpdatedAt(t time.Time) *FreelancerUpdate {
	fu.mutation.SetUprankUpdatedAt(t)
	return fu
}

// SetUprankReccomended sets the "uprank_reccomended" field.
func (fu *FreelancerUpdate) SetUprankReccomended(b bool) *FreelancerUpdate {
	fu.mutation.SetUprankReccomended(b)
	return fu
}

// SetNillableUprankReccomended sets the "uprank_reccomended" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableUprankReccomended(b *bool) *FreelancerUpdate {
	if b != nil {
		fu.SetUprankReccomended(*b)
	}
	return fu
}

// ClearUprankReccomended clears the value of the "uprank_reccomended" field.
func (fu *FreelancerUpdate) ClearUprankReccomended() *FreelancerUpdate {
	fu.mutation.ClearUprankReccomended()
	return fu
}

// SetUprankReccomendedReasons sets the "uprank_reccomended_reasons" field.
func (fu *FreelancerUpdate) SetUprankReccomendedReasons(s string) *FreelancerUpdate {
	fu.mutation.SetUprankReccomendedReasons(s)
	return fu
}

// SetNillableUprankReccomendedReasons sets the "uprank_reccomended_reasons" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableUprankReccomendedReasons(s *string) *FreelancerUpdate {
	if s != nil {
		fu.SetUprankReccomendedReasons(*s)
	}
	return fu
}

// ClearUprankReccomendedReasons clears the value of the "uprank_reccomended_reasons" field.
func (fu *FreelancerUpdate) ClearUprankReccomendedReasons() *FreelancerUpdate {
	fu.mutation.ClearUprankReccomendedReasons()
	return fu
}

// SetUprankNotEnoughData sets the "uprank_not_enough_data" field.
func (fu *FreelancerUpdate) SetUprankNotEnoughData(b bool) *FreelancerUpdate {
	fu.mutation.SetUprankNotEnoughData(b)
	return fu
}

// SetNillableUprankNotEnoughData sets the "uprank_not_enough_data" field if the given value is not nil.
func (fu *FreelancerUpdate) SetNillableUprankNotEnoughData(b *bool) *FreelancerUpdate {
	if b != nil {
		fu.SetUprankNotEnoughData(*b)
	}
	return fu
}

// ClearUprankNotEnoughData clears the value of the "uprank_not_enough_data" field.
func (fu *FreelancerUpdate) ClearUprankNotEnoughData() *FreelancerUpdate {
	fu.mutation.ClearUprankNotEnoughData()
	return fu
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (fu *FreelancerUpdate) SetJobID(id string) *FreelancerUpdate {
	fu.mutation.SetJobID(id)
	return fu
}

// SetJob sets the "job" edge to the Job entity.
func (fu *FreelancerUpdate) SetJob(j *Job) *FreelancerUpdate {
	return fu.SetJobID(j.ID)
}

// AddAttachmentIDs adds the "attachments" edge to the AttachmentRef entity by IDs.
func (fu *FreelancerUpdate) AddAttachmentIDs(ids ...int) *FreelancerUpdate {
	fu.mutation.AddAttachmentIDs(ids...)
	return fu
}

// AddAttachments adds the "attachments" edges to the AttachmentRef entity.
func (fu *FreelancerUpdate) AddAttachments(a ...*AttachmentRef) *FreelancerUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return fu.AddAttachmentIDs(ids...)
}

// AddWorkHistoryIDs adds the "work_histories" edge to the WorkHistory entity by IDs.
func (fu *FreelancerUpdate) AddWorkHistoryIDs(ids ...int) *FreelancerUpdate {
	fu.mutation.AddWorkHistoryIDs(ids...)
	return fu
}

// AddWorkHistories adds the "work_histories" edges to the WorkHistory entity.
func (fu *FreelancerUpdate) AddWorkHistories(w ...*WorkHistory) *FreelancerUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return fu.AddWorkHistoryIDs(ids...)
}

// Mutation returns the FreelancerMutation object of the builder.
func (fu *FreelancerUpdate) Mutation() *FreelancerMutation {
	return fu.mutation
}

// ClearJob clears the "job" edge to the Job entity.
func (fu *FreelancerUpdate) ClearJob() *FreelancerUpdate {
	fu.mutation.ClearJob()
	return fu
}

// ClearAttachments clears all "attachments" edges to the AttachmentRef entity.
func (fu *FreelancerUpdate) ClearAttachments() *FreelancerUpdate {
	fu.mutation.ClearAttachments()
	return fu
}

// RemoveAttachmentIDs removes the "attachments" edge to AttachmentRef entities by IDs.
func (fu *FreelancerUpdate) RemoveAttachmentIDs(ids ...int) *FreelancerUpdate {
	fu.mutation.RemoveAttachmentIDs(ids...)
	return fu
}

// RemoveAttachments removes "attachments" edges to AttachmentRef entities.
func (fu *FreelancerUpdate) RemoveAttachments(a ...*AttachmentRef) *FreelancerUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return fu.RemoveAttachmentIDs(ids...)
}

// ClearWorkHistories clears all "work_histories" edges to the WorkHistory entity.
func (fu *FreelancerUpdate) ClearWorkHistories() *FreelancerUpdate {
	fu.mutation.ClearWorkHistories()
	return fu
}

// RemoveWorkHistoryIDs removes the "work_histories" edge to WorkHistory entities by IDs.
func (fu *FreelancerUpdate) RemoveWorkHistoryIDs(ids ...int) *FreelancerUpdate {
	fu.mutation.RemoveWorkHistoryIDs(ids...)
	return fu
}

// RemoveWorkHistories removes "work_histories" edges to WorkHistory entities.
func (fu *FreelancerUpdate) RemoveWorkHistories(w ...*WorkHistory) *FreelancerUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return fu.RemoveWorkHistoryIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FreelancerUpdate) Save(ctx context.Context) (int, error) {
	fu.defaults()
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FreelancerUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FreelancerUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FreelancerUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fu *FreelancerUpdate) defaults() {
	if _, ok := fu.mutation.UprankUpdatedAt(); !ok {
		v := freelancer.UpdateDefaultUprankUpdatedAt()
		fu.mutation.SetUprankUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FreelancerUpdate) check() error {
	if _, ok := fu.mutation.JobID(); fu.mutation.JobCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Freelancer.job"`)
	}
	return nil
}

func (fu *FreelancerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(freelancer.Table, freelancer.Columns, sqlgraph.NewFieldSpec(freelancer.FieldID, field.TypeString))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.SetField(freelancer.FieldName, field.TypeString, value)
	}
	if value, ok := fu.mutation.Title(); ok {
		_spec.SetField(freelancer.FieldTitle, field.TypeString, value)
	}
	if value, ok := fu.mutation.Description(); ok {
		_spec.SetField(freelancer.FieldDescription, field.TypeString, value)
	}
	if value, ok := fu.mutation.City(); ok {
		_spec.SetField(freelancer.FieldCity, field.TypeString, value)
	}
	if value, ok := fu.mutation.Country(); ok {
		_spec.SetField(freelancer.FieldCountry, field.TypeString, value)
	}
	if value, ok := fu.mutation.Timezone(); ok {
		_spec.SetField(freelancer.FieldTimezone, field.TypeString, value)
	}
	if value, ok := fu.mutation.Cv(); ok {
		_spec.SetField(freelancer.FieldCv, field.TypeString, value)
	}
	if value, ok := fu.mutation.AiReccomended(); ok {
		_spec.SetField(freelancer.FieldAiReccomended, field.TypeBool, value)
	}
	if value, ok := fu.mutation.FixedChargeAmount(); ok {
		_spec.SetField(freelancer.FieldFixedChargeAmount, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.AddedFixedChargeAmount(); ok {
		_spec.AddField(freelancer.FieldFixedChargeAmount, field.TypeFloat64, value)
	}
	if fu.mutation.FixedChargeAmountCleared() {
		_spec.ClearField(freelancer.FieldFixedChargeAmount, field.TypeFloat64)
	}
	if value, ok := fu.mutation.FixedChargeCurrency(); ok {
		_spec.SetField(freelancer.FieldFixedChargeCurrency, field.TypeString, value)
	}
	if value, ok := fu.mutation.HourlyChargeAmount(); ok {
		_spec.SetField(freelancer.FieldHourlyChargeAmount, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.AddedHourlyChargeAmount(); ok {
		_spec.AddField(freelancer.FieldHourlyChargeAmount, field.TypeFloat64, value)
	}
	if fu.mutation.HourlyChargeAmountCleared() {
		_spec.ClearField(freelancer.FieldHourlyChargeAmount, field.TypeFloat64)
	}
	if value, ok := fu.mutation.HourlyChargeCurrency(); ok {
		_spec.SetField(freelancer.FieldHourlyChargeCurrency, field.TypeString, value)
	}
	if value, ok := fu.mutation.Invited(); ok {
		_spec.SetField(freelancer.FieldInvited, field.TypeBool, value)
	}
	if value, ok := fu.mutation.PhotoURL(); ok {
		_spec.SetField(freelancer.FieldPhotoURL, field.TypeString, value)
	}
	if value, ok := fu.mutation.RecentHours(); ok {
		_spec.SetField(freelancer.FieldRecentHours, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.AddedRecentHours(); ok {
		_spec.AddField(freelancer.FieldRecentHours, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.TotalHours(); ok {
		_spec.SetField(freelancer.FieldTotalHours, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.AddedTotalHours(); ok {
		_spec.AddField(freelancer.FieldTotalHours, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.TotalPortfolioItems(); ok {
		_spec.SetField(freelancer.FieldTotalPortfolioItems, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedTotalPortfolioItems(); ok {
		_spec.AddField(freelancer.FieldTotalPortfolioItems, field.TypeInt, value)
	}
	if value, ok := fu.mutation.TotalPortfolioV2Items(); ok {
		_spec.SetField(freelancer.FieldTotalPortfolioV2Items, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedTotalPortfolioV2Items(); ok {
		_spec.AddField(freelancer.FieldTotalPortfolioV2Items, field.TypeInt, value)
	}
	if value, ok := fu.mutation.UpworkTotalFeedback(); ok {
		_spec.SetField(freelancer.FieldUpworkTotalFeedback, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.AddedUpworkTotalFeedback(); ok {
		_spec.AddField(freelancer.FieldUpworkTotalFeedback, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.UpworkRecentFeedback(); ok {
		_spec.SetField(freelancer.FieldUpworkRecentFeedback, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.AddedUpworkRecentFeedback(); ok {
		_spec.AddField(freelancer.FieldUpworkRecentFeedback, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.UpworkTopRatedStatus(); ok {
		_spec.SetField(freelancer.FieldUpworkTopRatedStatus, field.TypeBool, value)
	}
	if value, ok := fu.mutation.UpworkTopRatedPlusStatus(); ok {
		_spec.SetField(freelancer.FieldUpworkTopRatedPlusStatus, field.TypeBool, value)
	}
	if value, ok := fu.mutation.UpworkSponsored(); ok {
		_spec.SetField(freelancer.FieldUpworkSponsored, field.TypeBool, value)
	}
	if value, ok := fu.mutation.UpworkJobSuccessScore(); ok {
		_spec.SetField(freelancer.FieldUpworkJobSuccessScore, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.AddedUpworkJobSuccessScore(); ok {
		_spec.AddField(freelancer.FieldUpworkJobSuccessScore, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.UpworkReccomended(); ok {
		_spec.SetField(freelancer.FieldUpworkReccomended, field.TypeBool, value)
	}
	if value, ok := fu.mutation.Skills(); ok {
		_spec.SetField(freelancer.FieldSkills, field.TypeJSON, value)
	}
	if value, ok := fu.mutation.AppendedSkills(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, freelancer.FieldSkills, value)
		})
	}
	if value, ok := fu.mutation.AverageRecentEarnings(); ok {
		_spec.SetField(freelancer.FieldAverageRecentEarnings, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.AddedAverageRecentEarnings(); ok {
		_spec.AddField(freelancer.FieldAverageRecentEarnings, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.CombinedAverageRecentEarnings(); ok {
		_spec.SetField(freelancer.FieldCombinedAverageRecentEarnings, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.AddedCombinedAverageRecentEarnings(); ok {
		_spec.AddField(freelancer.FieldCombinedAverageRecentEarnings, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.CombinedRecentEarnings(); ok {
		_spec.SetField(freelancer.FieldCombinedRecentEarnings, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.AddedCombinedRecentEarnings(); ok {
		_spec.AddField(freelancer.FieldCombinedRecentEarnings, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.CombinedTotalEarnings(); ok {
		_spec.SetField(freelancer.FieldCombinedTotalEarnings, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.AddedCombinedTotalEarnings(); ok {
		_spec.AddField(freelancer.FieldCombinedTotalEarnings, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.CombinedTotalRevenue(); ok {
		_spec.SetField(freelancer.FieldCombinedTotalRevenue, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.AddedCombinedTotalRevenue(); ok {
		_spec.AddField(freelancer.FieldCombinedTotalRevenue, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.RecentEarnings(); ok {
		_spec.SetField(freelancer.FieldRecentEarnings, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.AddedRecentEarnings(); ok {
		_spec.AddField(freelancer.FieldRecentEarnings, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.TotalRevenue(); ok {
		_spec.SetField(freelancer.FieldTotalRevenue, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.AddedTotalRevenue(); ok {
		_spec.AddField(freelancer.FieldTotalRevenue, field.TypeFloat64, value)
	}
	if value, ok := fu.mutation.UprankScore(); ok {
		_spec.SetField(freelancer.FieldUprankScore, field.TypeInt, value)
	}
	if value, ok := fu.mutation.AddedUprankScore(); ok {
		_spec.AddField(freelancer.FieldUprankScore, field.TypeInt, value)
	}
	if fu.mutation.UprankScoreCleared() {
		_spec.ClearField(freelancer.FieldUprankScore, field.TypeInt)
	}
	if value, ok := fu.mutation.UprankUpdatedAt(); ok {
		_spec.SetField(freelancer.FieldUprankUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fu.mutation.UprankReccomended(); ok {
		_spec.SetField(freelancer.FieldUprankReccomended, field.TypeBool, value)
	}
	if fu.mutation.UprankReccomendedCleared() {
		_spec.ClearField(freelancer.FieldUprankReccomended, field.TypeBool)
	}
	if value, ok := fu.mutation.UprankReccomendedReasons(); ok {
		_spec.SetField(freelancer.FieldUprankReccomendedReasons, field.TypeString, value)
	}
	if fu.mutation.UprankReccomendedReasonsCleared() {
		_spec.ClearField(freelancer.FieldUprankReccomendedReasons, field.TypeString)
	}
	if value, ok := fu.mutation.UprankNotEnoughData(); ok {
		_spec.SetField(freelancer.FieldUprankNotEnoughData, field.TypeBool, value)
	}
	if fu.mutation.UprankNotEnoughDataCleared() {
		_spec.ClearField(freelancer.FieldUprankNotEnoughData, field.TypeBool)
	}
	if fu.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   freelancer.JobTable,
			Columns: []string{freelancer.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   freelancer.JobTable,
			Columns: []string{freelancer.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   freelancer.AttachmentsTable,
			Columns: []string{freelancer.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachmentref.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedAttachmentsIDs(); len(nodes) > 0 && !fu.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   freelancer.AttachmentsTable,
			Columns: []string{freelancer.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachmentref.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.AttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   freelancer.AttachmentsTable,
			Columns: []string{freelancer.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachmentref.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fu.mutation.WorkHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   freelancer.WorkHistoriesTable,
			Columns: []string{freelancer.WorkHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workhistory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedWorkHistoriesIDs(); len(nodes) > 0 && !fu.mutation.WorkHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   freelancer.WorkHistoriesTable,
			Columns: []string{freelancer.WorkHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.WorkHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   freelancer.WorkHistoriesTable,
			Columns: []string{freelancer.WorkHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{freelancer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FreelancerUpdateOne is the builder for updating a single Freelancer entity.
type FreelancerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FreelancerMutation
}

// SetName sets the "name" field.
func (fuo *FreelancerUpdateOne) SetName(s string) *FreelancerUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableName(s *string) *FreelancerUpdateOne {
	if s != nil {
		fuo.SetName(*s)
	}
	return fuo
}

// SetTitle sets the "title" field.
func (fuo *FreelancerUpdateOne) SetTitle(s string) *FreelancerUpdateOne {
	fuo.mutation.SetTitle(s)
	return fuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableTitle(s *string) *FreelancerUpdateOne {
	if s != nil {
		fuo.SetTitle(*s)
	}
	return fuo
}

// SetDescription sets the "description" field.
func (fuo *FreelancerUpdateOne) SetDescription(s string) *FreelancerUpdateOne {
	fuo.mutation.SetDescription(s)
	return fuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableDescription(s *string) *FreelancerUpdateOne {
	if s != nil {
		fuo.SetDescription(*s)
	}
	return fuo
}

// SetCity sets the "city" field.
func (fuo *FreelancerUpdateOne) SetCity(s string) *FreelancerUpdateOne {
	fuo.mutation.SetCity(s)
	return fuo
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableCity(s *string) *FreelancerUpdateOne {
	if s != nil {
		fuo.SetCity(*s)
	}
	return fuo
}

// SetCountry sets the "country" field.
func (fuo *FreelancerUpdateOne) SetCountry(s string) *FreelancerUpdateOne {
	fuo.mutation.SetCountry(s)
	return fuo
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableCountry(s *string) *FreelancerUpdateOne {
	if s != nil {
		fuo.SetCountry(*s)
	}
	return fuo
}

// SetTimezone sets the "timezone" field.
func (fuo *FreelancerUpdateOne) SetTimezone(s string) *FreelancerUpdateOne {
	fuo.mutation.SetTimezone(s)
	return fuo
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableTimezone(s *string) *FreelancerUpdateOne {
	if s != nil {
		fuo.SetTimezone(*s)
	}
	return fuo
}

// SetCv sets the "cv" field.
func (fuo *FreelancerUpdateOne) SetCv(s string) *FreelancerUpdateOne {
	fuo.mutation.SetCv(s)
	return fuo
}

// SetNillableCv sets the "cv" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableCv(s *string) *FreelancerUpdateOne {
	if s != nil {
		fuo.SetCv(*s)
	}
	return fuo
}

// SetAiReccomended sets the "ai_reccomended" field.
func (fuo *FreelancerUpdateOne) SetAiReccomended(b bool) *FreelancerUpdateOne {
	fuo.mutation.SetAiReccomended(b)
	return fuo
}

// SetNillableAiReccomended sets the "ai_reccomended" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableAiReccomended(b *bool) *FreelancerUpdateOne {
	if b != nil {
		fuo.SetAiReccomended(*b)
	}
	return fuo
}

// SetFixedChargeAmount sets the "fixed_charge_amount" field.
func (fuo *FreelancerUpdateOne) SetFixedChargeAmount(f float64) *FreelancerUpdateOne {
	fuo.mutation.ResetFixedChargeAmount()
	fuo.mutation.SetFixedChargeAmount(f)
	return fuo
}

// SetNillableFixedChargeAmount sets the "fixed_charge_amount" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableFixedChargeAmount(f *float64) *FreelancerUpdateOne {
	if f != nil {
		fuo.SetFixedChargeAmount(*f)
	}
	return fuo
}

// AddFixedChargeAmount adds f to the "fixed_charge_amount" field.
func (fuo *FreelancerUpdateOne) AddFixedChargeAmount(f float64) *FreelancerUpdateOne {
	fuo.mutation.AddFixedChargeAmount(f)
	return fuo
}

// ClearFixedChargeAmount clears the value of the "fixed_charge_amount" field.
func (fuo *FreelancerUpdateOne) ClearFixedChargeAmount() *FreelancerUpdateOne {
	fuo.mutation.ClearFixedChargeAmount()
	return fuo
}

// SetFixedChargeCurrency sets the "fixed_charge_currency" field.
func (fuo *FreelancerUpdateOne) SetFixedChargeCurrency(s string) *FreelancerUpdateOne {
	fuo.mutation.SetFixedChargeCurrency(s)
	return fuo
}

// SetNillableFixedChargeCurrency sets the "fixed_charge_currency" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableFixedChargeCurrency(s *string) *FreelancerUpdateOne {
	if s != nil {
		fuo.SetFixedChargeCurrency(*s)
	}
	return fuo
}

// SetHourlyChargeAmount sets the "hourly_charge_amount" field.
func (fuo *FreelancerUpdateOne) SetHourlyChargeAmount(f float64) *FreelancerUpdateOne {
	fuo.mutation.ResetHourlyChargeAmount()
	fuo.mutation.SetHourlyChargeAmount(f)
	return fuo
}

// SetNillableHourlyChargeAmount sets the "hourly_charge_amount" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableHourlyChargeAmount(f *float64) *FreelancerUpdateOne {
	if f != nil {
		fuo.SetHourlyChargeAmount(*f)
	}
	return fuo
}

// AddHourlyChargeAmount adds f to the "hourly_charge_amount" field.
func (fuo *FreelancerUpdateOne) AddHourlyChargeAmount(f float64) *FreelancerUpdateOne {
	fuo.mutation.AddHourlyChargeAmount(f)
	return fuo
}

// ClearHourlyChargeAmount clears the value of the "hourly_charge_amount" field.
func (fuo *FreelancerUpdateOne) ClearHourlyChargeAmount() *FreelancerUpdateOne {
	fuo.mutation.ClearHourlyChargeAmount()
	return fuo
}

// SetHourlyChargeCurrency sets the "hourly_charge_currency" field.
func (fuo *FreelancerUpdateOne) SetHourlyChargeCurrency(s string) *FreelancerUpdateOne {
	fuo.mutation.SetHourlyChargeCurrency(s)
	return fuo
}

// SetNillableHourlyChargeCurrency sets the "hourly_charge_currency" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableHourlyChargeCurrency(s *string) *FreelancerUpdateOne {
	if s != nil {
		fuo.SetHourlyChargeCurrency(*s)
	}
	return fuo
}

// SetInvited sets the "invited" field.
func (fuo *FreelancerUpdateOne) SetInvited(b bool) *FreelancerUpdateOne {
	fuo.mutation.SetInvited(b)
	return fuo
}

// SetNillableInvited sets the "invited" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableInvited(b *bool) *FreelancerUpdateOne {
	if b != nil {
		fuo.SetInvited(*b)
	}
	return fuo
}

// SetPhotoURL sets the "photo_url" field.
func (fuo *FreelancerUpdateOne) SetPhotoURL(s string) *FreelancerUpdateOne {
	fuo.mutation.SetPhotoURL(s)
	return fuo
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillablePhotoURL(s *string) *FreelancerUpdateOne {
	if s != nil {
		fuo.SetPhotoURL(*s)
	}
	return fuo
}

// SetRecentHours sets the "recent_hours" field.
func (fuo *FreelancerUpdateOne) SetRecentHours(f float64) *FreelancerUpdateOne {
	fuo.mutation.ResetRecentHours()
	fuo.mutation.SetRecentHours(f)
	return fuo
}

// SetNillableRecentHours sets the "recent_hours" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableRecentHours(f *float64) *FreelancerUpdateOne {
	if f != nil {
		fuo.SetRecentHours(*f)
	}
	return fuo
}

// AddRecentHours adds f to the "recent_hours" field.
func (fuo *FreelancerUpdateOne) AddRecentHours(f float64) *FreelancerUpdateOne {
	fuo.mutation.AddRecentHours(f)
	return fuo
}

// SetTotalHours sets the "total_hours" field.
func (fuo *FreelancerUpdateOne) SetTotalHours(f float64) *FreelancerUpdateOne {
	fuo.mutation.ResetTotalHours()
	fuo.mutation.SetTotalHours(f)
	return fuo
}

// SetNillableTotalHours sets the "total_hours" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableTotalHours(f *float64) *FreelancerUpdateOne {
	if f != nil {
		fuo.SetTotalHours(*f)
	}
	return fuo
}

// AddTotalHours adds f to the "total_hours" field.
func (fuo *FreelancerUpdateOne) AddTotalHours(f float64) *FreelancerUpdateOne {
	fuo.mutation.AddTotalHours(f)
	return fuo
}

// SetTotalPortfolioItems sets the "total_portfolio_items" field.
func (fuo *FreelancerUpdateOne) SetTotalPortfolioItems(i int) *FreelancerUpdateOne {
	fuo.mutation.ResetTotalPortfolioItems()
	fuo.mutation.SetTotalPortfolioItems(i)
	return fuo
}

// SetNillableTotalPortfolioItems sets the "total_portfolio_items" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableTotalPortfolioItems(i *int) *FreelancerUpdateOne {
	if i != nil {
		fuo.SetTotalPortfolioItems(*i)
	}
	return fuo
}

// AddTotalPortfolioItems adds i to the "total_portfolio_items" field.
func (fuo *FreelancerUpdateOne) AddTotalPortfolioItems(i int) *FreelancerUpdateOne {
	fuo.mutation.AddTotalPortfolioItems(i)
	return fuo
}

// SetTotalPortfolioV2Items sets the "total_portfolio_v2_items" field.
func (fuo *FreelancerUpdateOne) SetTotalPortfolioV2Items(i int) *FreelancerUpdateOne {
	fuo.mutation.ResetTotalPortfolioV2Items()
	fuo.mutation.SetTotalPortfolioV2Items(i)
	return fuo
}

// SetNillableTotalPortfolioV2Items sets the "total_portfolio_v2_items" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableTotalPortfolioV2Items(i *int) *FreelancerUpdateOne {
	if i != nil {
		fuo.SetTotalPortfolioV2Items(*i)
	}
	return fuo
}

// AddTotalPortfolioV2Items adds i to the "total_portfolio_v2_items" field.
func (fuo *FreelancerUpdateOne) AddTotalPortfolioV2Items(i int) *FreelancerUpdateOne {
	fuo.mutation.AddTotalPortfolioV2Items(i)
	return fuo
}

// SetUpworkTotalFeedback sets the "upwork_total_feedback" field.
func (fuo *FreelancerUpdateOne) SetUpworkTotalFeedback(f float64) *FreelancerUpdateOne {
	fuo.mutation.ResetUpworkTotalFeedback()
	fuo.mutation.SetUpworkTotalFeedback(f)
	return fuo
}

// SetNillableUpworkTotalFeedback sets the "upwork_total_feedback" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableUpworkTotalFeedback(f *float64) *FreelancerUpdateOne {
	if f != nil {
		fuo.SetUpworkTotalFeedback(*f)
	}
	return fuo
}

// AddUpworkTotalFeedback adds f to the "upwork_total_feedback" field.
func (fuo *FreelancerUpdateOne) AddUpworkTotalFeedback(f float64) *FreelancerUpdateOne {
	fuo.mutation.AddUpworkTotalFeedback(f)
	return fuo
}

// SetUpworkRecentFeedback sets the "upwork_recent_feedback" field.
func (fuo *FreelancerUpdateOne) SetUpworkRecentFeedback(f float64) *FreelancerUpdateOne {
	fuo.mutation.ResetUpworkRecentFeedback()
	fuo.mutation.SetUpworkRecentFeedback(f)
	return fuo
}

// SetNillableUpworkRecentFeedback sets the "upwork_recent_feedback" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableUpworkRecentFeedback(f *float64) *FreelancerUpdateOne {
	if f != nil {
		fuo.SetUpworkRecentFeedback(*f)
	}
	return fuo
}

// AddUpworkRecentFeedback adds f to the "upwork_recent_feedback" field.
func (fuo *FreelancerUpdateOne) AddUpworkRecentFeedback(f float64) *FreelancerUpdateOne {
	fuo.mutation.AddUpworkRecentFeedback(f)
	return fuo
}

// SetUpworkTopRatedStatus sets the "upwork_top_rated_status" field.
func (fuo *FreelancerUpdateOne) SetUpworkTopRatedStatus(b bool) *FreelancerUpdateOne {
	fuo.mutation.SetUpworkTopRatedStatus(b)
	return fuo
}

// SetNillableUpworkTopRatedStatus sets the "upwork_top_rated_status" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableUpworkTopRatedStatus(b *bool) *FreelancerUpdateOne {
	if b != nil {
		fuo.SetUpworkTopRatedStatus(*b)
	}
	return fuo
}

// SetUpworkTopRatedPlusStatus sets the "upwork_top_rated_plus_status" field.
func (fuo *FreelancerUpdateOne) SetUpworkTopRatedPlusStatus(b bool) *FreelancerUpdateOne {
	fuo.mutation.SetUpworkTopRatedPlusStatus(b)
	return fuo
}

// SetNillableUpworkTopRatedPlusStatus sets the "upwork_top_rated_plus_status" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableUpworkTopRatedPlusStatus(b *bool) *FreelancerUpdateOne {
	if b != nil {
		fuo.SetUpworkTopRatedPlusStatus(*b)
	}
	return fuo
}

// SetUpworkSponsored sets the "upwork_sponsored" field.
func (fuo *FreelancerUpdateOne) SetUpworkSponsored(b bool) *FreelancerUpdateOne {
	fuo.mutation.SetUpworkSponsored(b)
	return fuo
}

// SetNillableUpworkSponsored sets the "upwork_sponsored" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableUpworkSponsored(b *bool) *FreelancerUpdateOne {
	if b != nil {
		fuo.SetUpworkSponsored(*b)
	}
	return fuo
}

// SetUpworkJobSuccessScore sets the "upwork_job_success_score" field.
func (fuo *FreelancerUpdateOne) SetUpworkJobSuccessScore(f float64) *FreelancerUpdateOne {
	fuo.mutation.ResetUpworkJobSuccessScore()
	fuo.mutation.SetUpworkJobSuccessScore(f)
	return fuo
}

// SetNillableUpworkJobSuccessScore sets the "upwork_job_success_score" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableUpworkJobSuccessScore(f *float64) *FreelancerUpdateOne {
	if f != nil {
		fuo.SetUpworkJobSuccessScore(*f)
	}
	return fuo
}

// AddUpworkJobSuccessScore adds f to the "upwork_job_success_score" field.
func (fuo *FreelancerUpdateOne) AddUpworkJobSuccessScore(f float64) *FreelancerUpdateOne {
	fuo.mutation.AddUpworkJobSuccessScore(f)
	return fuo
}

// SetUpworkReccomended sets the "upwork_reccomended" field.
func (fuo *FreelancerUpdateOne) SetUpworkReccomended(b bool) *FreelancerUpdateOne {
	fuo.mutation.SetUpworkReccomended(b)
	return fuo
}

// SetNillableUpworkReccomended sets the "upwork_reccomended" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableUpworkReccomended(b *bool) *FreelancerUpdateOne {
	if b != nil {
		fuo.SetUpworkReccomended(*b)
	}
	return fuo
}

// SetSkills sets the "skills" field.
func (fuo *FreelancerUpdateOne) SetSkills(s []string) *FreelancerUpdateOne {
	fuo.mutation.SetSkills(s)
	return fuo
}

// AppendSkills appends s to the "skills" field.
func (fuo *FreelancerUpdateOne) AppendSkills(s []string) *FreelancerUpdateOne {
	fuo.mutation.AppendSkills(s)
	return fuo
}

// SetAverageRecentEarnings sets the "average_recent_earnings" field.
func (fuo *FreelancerUpdateOne) SetAverageRecentEarnings(f float64) *FreelancerUpdateOne {
	fuo.mutation.ResetAverageRecentEarnings()
	fuo.mutation.SetAverageRecentEarnings(f)
	return fuo
}

// SetNillableAverageRecentEarnings sets the "average_recent_earnings" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableAverageRecentEarnings(f *float64) *FreelancerUpdateOne {
	if f != nil {
		fuo.SetAverageRecentEarnings(*f)
	}
	return fuo
}

// AddAverageRecentEarnings adds f to the "average_recent_earnings" field.
func (fuo *FreelancerUpdateOne) AddAverageRecentEarnings(f float64) *FreelancerUpdateOne {
	fuo.mutation.AddAverageRecentEarnings(f)
	return fuo
}

// SetCombinedAverageRecentEarnings sets the "combined_average_recent_earnings" field.
func (fuo *FreelancerUpdateOne) SetCombinedAverageRecentEarnings(f float64) *FreelancerUpdateOne {
	fuo.mutation.ResetCombinedAverageRecentEarnings()
	fuo.mutation.SetCombinedAverageRecentEarnings(f)
	return fuo
}

// SetNillableCombinedAverageRecentEarnings sets the "combined_average_recent_earnings" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableCombinedAverageRecentEarnings(f *float64) *FreelancerUpdateOne {
	if f != nil {
		fuo.SetCombinedAverageRecentEarnings(*f)
	}
	return fuo
}

// AddCombinedAverageRecentEarnings adds f to the "combined_average_recent_earnings" field.
func (fuo *FreelancerUpdateOne) AddCombinedAverageRecentEarnings(f float64) *FreelancerUpdateOne {
	fuo.mutation.AddCombinedAverageRecentEarnings(f)
	return fuo
}

// SetCombinedRecentEarnings sets the "combined_recent_earnings" field.
func (fuo *FreelancerUpdateOne) SetCombinedRecentEarnings(f float64) *FreelancerUpdateOne {
	fuo.mutation.ResetCombinedRecentEarnings()
	fuo.mutation.SetCombinedRecentEarnings(f)
	return fuo
}

// SetNillableCombinedRecentEarnings sets the "combined_recent_earnings" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableCombinedRecentEarnings(f *float64) *FreelancerUpdateOne {
	if f != nil {
		fuo.SetCombinedRecentEarnings(*f)
	}
	return fuo
}

// AddCombinedRecentEarnings adds f to the "combined_recent_earnings" field.
func (fuo *FreelancerUpdateOne) AddCombinedRecentEarnings(f float64) *FreelancerUpdateOne {
	fuo.mutation.AddCombinedRecentEarnings(f)
	return fuo
}

// SetCombinedTotalEarnings sets the "combined_total_earnings" field.
func (fuo *FreelancerUpdateOne) SetCombinedTotalEarnings(f float64) *FreelancerUpdateOne {
	fuo.mutation.ResetCombinedTotalEarnings()
	fuo.mutation.SetCombinedTotalEarnings(f)
	return fuo
}

// SetNillableCombinedTotalEarnings sets the "combined_total_earnings" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableCombinedTotalEarnings(f *float64) *FreelancerUpdateOne {
	if f != nil {
		fuo.SetCombinedTotalEarnings(*f)
	}
	return fuo
}

// AddCombinedTotalEarnings adds f to the "combined_total_earnings" field.
func (fuo *FreelancerUpdateOne) AddCombinedTotalEarnings(f float64) *FreelancerUpdateOne {
	fuo.mutation.AddCombinedTotalEarnings(f)
	return fuo
}

// SetCombinedTotalRevenue sets the "combined_total_revenue" field.
func (fuo *FreelancerUpdateOne) SetCombinedTotalRevenue(f float64) *FreelancerUpdateOne {
	fuo.mutation.ResetCombinedTotalRevenue()
	fuo.mutation.SetCombinedTotalRevenue(f)
	return fuo
}

// SetNillableCombinedTotalRevenue sets the "combined_total_revenue" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableCombinedTotalRevenue(f *float64) *FreelancerUpdateOne {
	if f != nil {
		fuo.SetCombinedTotalRevenue(*f)
	}
	return fuo
}

// AddCombinedTotalRevenue adds f to the "combined_total_revenue" field.
func (fuo *FreelancerUpdateOne) AddCombinedTotalRevenue(f float64) *FreelancerUpdateOne {
	fuo.mutation.AddCombinedTotalRevenue(f)
	return fuo
}

// SetRecentEarnings sets the "recent_earnings" field.
func (fuo *FreelancerUpdateOne) SetRecentEarnings(f float64) *FreelancerUpdateOne {
	fuo.mutation.ResetRecentEarnings()
	fuo.mutation.SetRecentEarnings(f)
	return fuo
}

// SetNillableRecentEarnings sets the "recent_earnings" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableRecentEarnings(f *float64) *FreelancerUpdateOne {
	if f != nil {
		fuo.SetRecentEarnings(*f)
	}
	return fuo
}

// AddRecentEarnings adds f to the "recent_earnings" field.
func (fuo *FreelancerUpdateOne) AddRecentEarnings(f float64) *FreelancerUpdateOne {
	fuo.mutation.AddRecentEarnings(f)
	return fuo
}

// SetTotalRevenue sets the "total_revenue" field.
func (fuo *FreelancerUpdateOne) SetTotalRevenue(f float64) *FreelancerUpdateOne {
	fuo.mutation.ResetTotalRevenue()
	fuo.mutation.SetTotalRevenue(f)
	return fuo
}

// SetNillableTotalRevenue sets the "total_revenue" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableTotalRevenue(f *float64) *FreelancerUpdateOne {
	if f != nil {
		fuo.SetTotalRevenue(*f)
	}
	return fuo
}

// AddTotalRevenue adds f to the "total_revenue" field.
func (fuo *FreelancerUpdateOne) AddTotalRevenue(f float64) *FreelancerUpdateOne {
	fuo.mutation.AddTotalRevenue(f)
	return fuo
}

// SetUprankScore sets the "uprank_score" field.
func (fuo *FreelancerUpdateOne) SetUprankScore(i int) *FreelancerUpdateOne {
	fuo.mutation.ResetUprankScore()
	fuo.mutation.SetUprankScore(i)
	return fuo
}

// SetNillableUprankScore sets the "uprank_score" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableUprankScore(i *int) *FreelancerUpdateOne {
	if i != nil {
		fuo.SetUprankScore(*i)
	}
	return fuo
}

// AddUprankScore adds i to the "uprank_score" field.
func (fuo *FreelancerUpdateOne) AddUprankScore(i int) *FreelancerUpdateOne {
	fuo.mutation.AddUprankScore(i)
	return fuo
}

// ClearUprankScore clears the value of the "uprank_score" field.
func (fuo *FreelancerUpdateOne) ClearUprankScore() *FreelancerUpdateOne {
	fuo.mutation.ClearUprankScore()
	return fuo
}

// SetUprankUpdatedAt sets the "uprank_updated_at" field.
func (fuo *FreelancerUpdateOne) SetUprankUpdatedAt(t time.Time) *FreelancerUpdateOne {
	fuo.mutation.SetUprankUpdatedAt(t)
	return fuo
}

// SetUprankReccomended sets the "uprank_reccomended" field.
func (fuo *FreelancerUpdateOne) SetUprankReccomended(b bool) *FreelancerUpdateOne {
	fuo.mutation.SetUprankReccomended(b)
	return fuo
}

// SetNillableUprankReccomended sets the "uprank_reccomended" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableUprankReccomended(b *bool) *FreelancerUpdateOne {
	if b != nil {
		fuo.SetUprankReccomended(*b)
	}
	return fuo
}

// ClearUprankReccomended clears the value of the "uprank_reccomended" field.
func (fuo *FreelancerUpdateOne) ClearUprankReccomended() *FreelancerUpdateOne {
	fuo.mutation.ClearUprankReccomended()
	return fuo
}

// SetUprankReccomendedReasons sets the "uprank_reccomended_reasons" field.
func (fuo *FreelancerUpdateOne) SetUprankReccomendedReasons(s string) *FreelancerUpdateOne {
	fuo.mutation.SetUprankReccomendedReasons(s)
	return fuo
}

// SetNillableUprankReccomendedReasons sets the "uprank_reccomended_reasons" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableUprankReccomendedReasons(s *string) *FreelancerUpdateOne {
	if s != nil {
		fuo.SetUprankReccomendedReasons(*s)
	}
	return fuo
}

// ClearUprankReccomendedReasons clears the value of the "uprank_reccomended_reasons" field.
func (fuo *FreelancerUpdateOne) ClearUprankReccomendedReasons() *FreelancerUpdateOne {
	fuo.mutation.ClearUprankReccomendedReasons()
	return fuo
}

// SetUprankNotEnoughData sets the "uprank_not_enough_data" field.
func (fuo *FreelancerUpdateOne) SetUprankNotEnoughData(b bool) *FreelancerUpdateOne {
	fuo.mutation.SetUprankNotEnoughData(b)
	return fuo
}

// SetNillableUprankNotEnoughData sets the "uprank_not_enough_data" field if the given value is not nil.
func (fuo *FreelancerUpdateOne) SetNillableUprankNotEnoughData(b *bool) *FreelancerUpdateOne {
	if b != nil {
		fuo.SetUprankNotEnoughData(*b)
	}
	return fuo
}

// ClearUprankNotEnoughData clears the value of the "uprank_not_enough_data" field.
func (fuo *FreelancerUpdateOne) ClearUprankNotEnoughData() *FreelancerUpdateOne {
	fuo.mutation.ClearUprankNotEnoughData()
	return fuo
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (fuo *FreelancerUpdateOne) SetJobID(id string) *FreelancerUpdateOne {
	fuo.mutation.SetJobID(id)
	return fuo
}

// SetJob sets the "job" edge to the Job entity.
func (fuo *FreelancerUpdateOne) SetJob(j *Job) *FreelancerUpdateOne {
	return fuo.SetJobID(j.ID)
}

// AddAttachmentIDs adds the "attachments" edge to the AttachmentRef entity by IDs.
func (fuo *FreelancerUpdateOne) AddAttachmentIDs(ids ...int) *FreelancerUpdateOne {
	fuo.mutation.AddAttachmentIDs(ids...)
	return fuo
}

// AddAttachments adds the "attachments" edges to the AttachmentRef entity.
func (fuo *FreelancerUpdateOne) AddAttachments(a ...*AttachmentRef) *FreelancerUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return fuo.AddAttachmentIDs(ids...)
}

// AddWorkHistoryIDs adds the "work_histories" edge to the WorkHistory entity by IDs.
func (fuo *FreelancerUpdateOne) AddWorkHistoryIDs(ids ...int) *FreelancerUpdateOne {
	fuo.mutation.AddWorkHistoryIDs(ids...)
	return fuo
}

// AddWorkHistories adds the "work_histories" edges to the WorkHistory entity.
func (fuo *FreelancerUpdateOne) AddWorkHistories(w ...*WorkHistory) *FreelancerUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return fuo.AddWorkHistoryIDs(ids...)
}

// Mutation returns the FreelancerMutation object of the builder.
func (fuo *FreelancerUpdateOne) Mutation() *FreelancerMutation {
	return fuo.mutation
}

// ClearJob clears the "job" edge to the Job entity.
func (fuo *FreelancerUpdateOne) ClearJob() *FreelancerUpdateOne {
	fuo.mutation.ClearJob()
	return fuo
}

// ClearAttachments clears all "attachments" edges to the AttachmentRef entity.
func (fuo *FreelancerUpdateOne) ClearAttachments() *FreelancerUpdateOne {
	fuo.mutation.ClearAttachments()
	return fuo
}

// RemoveAttachmentIDs removes the "attachments" edge to AttachmentRef entities by IDs.
func (fuo *FreelancerUpdateOne) RemoveAttachmentIDs(ids ...int) *FreelancerUpdateOne {
	fuo.mutation.RemoveAttachmentIDs(ids...)
	return fuo
}

// RemoveAttachments removes "attachments" edges to AttachmentRef entities.
func (fuo *FreelancerUpdateOne) RemoveAttachments(a ...*AttachmentRef) *FreelancerUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return fuo.RemoveAttachmentIDs(ids...)
}

// ClearWorkHistories clears all "work_histories" edges to the WorkHistory entity.
func (fuo *FreelancerUpdateOne) ClearWorkHistories() *FreelancerUpdateOne {
	fuo.mutation.ClearWorkHistories()
	return fuo
}

// RemoveWorkHistoryIDs removes the "work_histories" edge to WorkHistory entities by IDs.
func (fuo *FreelancerUpdateOne) RemoveWorkHistoryIDs(ids ...int) *FreelancerUpdateOne {
	fuo.mutation.RemoveWorkHistoryIDs(ids...)
	return fuo
}

// RemoveWorkHistories removes "work_histories" edges to WorkHistory entities.
func (fuo *FreelancerUpdateOne) RemoveWorkHistories(w ...*WorkHistory) *FreelancerUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return fuo.RemoveWorkHistoryIDs(ids...)
}

// Where appends a list predicates to the FreelancerUpdate builder.
func (fuo *FreelancerUpdateOne) Where(ps ...predicate.Freelancer) *FreelancerUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FreelancerUpdateOne) Select(field string, fields ...string) *FreelancerUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Freelancer entity.
func (fuo *FreelancerUpdateOne) Save(ctx context.Context) (*Freelancer, error) {
	fuo.defaults()
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FreelancerUpdateOne) SaveX(ctx context.Context) *Freelancer {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FreelancerUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FreelancerUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fuo *FreelancerUpdateOne) defaults() {
	if _, ok := fuo.mutation.UprankUpdatedAt(); !ok {
		v := freelancer.UpdateDefaultUprankUpdatedAt()
		fuo.mutation.SetUprankUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FreelancerUpdateOne) check() error {
	if _, ok := fuo.mutation.JobID(); fuo.mutation.JobCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Freelancer.job"`)
	}
	return nil
}

func (fuo *FreelancerUpdateOne) sqlSave(ctx context.Context) (_node *Freelancer, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(freelancer.Table, freelancer.Columns, sqlgraph.NewFieldSpec(freelancer.FieldID, field.TypeString))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Freelancer.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, freelancer.FieldID)
		for _, f := range fields {
			if !freelancer.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != freelancer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Name(); ok {
		_spec.SetField(freelancer.FieldName, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Title(); ok {
		_spec.SetField(freelancer.FieldTitle, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Description(); ok {
		_spec.SetField(freelancer.FieldDescription, field.TypeString, value)
	}
	if value, ok := fuo.mutation.City(); ok {
		_spec.SetField(freelancer.FieldCity, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Country(); ok {
		_spec.SetField(freelancer.FieldCountry, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Timezone(); ok {
		_spec.SetField(freelancer.FieldTimezone, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Cv(); ok {
		_spec.SetField(freelancer.FieldCv, field.TypeString, value)
	}
	if value, ok := fuo.mutation.AiReccomended(); ok {
		_spec.SetField(freelancer.FieldAiReccomended, field.TypeBool, value)
	}
	if value, ok := fuo.mutation.FixedChargeAmount(); ok {
		_spec.SetField(freelancer.FieldFixedChargeAmount, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.AddedFixedChargeAmount(); ok {
		_spec.AddField(freelancer.FieldFixedChargeAmount, field.TypeFloat64, value)
	}
	if fuo.mutation.FixedChargeAmountCleared() {
		_spec.ClearField(freelancer.FieldFixedChargeAmount, field.TypeFloat64)
	}
	if value, ok := fuo.mutation.FixedChargeCurrency(); ok {
		_spec.SetField(freelancer.FieldFixedChargeCurrency, field.TypeString, value)
	}
	if value, ok := fuo.mutation.HourlyChargeAmount(); ok {
		_spec.SetField(freelancer.FieldHourlyChargeAmount, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.AddedHourlyChargeAmount(); ok {
		_spec.AddField(freelancer.FieldHourlyChargeAmount, field.TypeFloat64, value)
	}
	if fuo.mutation.HourlyChargeAmountCleared() {
		_spec.ClearField(freelancer.FieldHourlyChargeAmount, field.TypeFloat64)
	}
	if value, ok := fuo.mutation.HourlyChargeCurrency(); ok {
		_spec.SetField(freelancer.FieldHourlyChargeCurrency, field.TypeString, value)
	}
	if value, ok := fuo.mutation.Invited(); ok {
		_spec.SetField(freelancer.FieldInvited, field.TypeBool, value)
	}
	if value, ok := fuo.mutation.PhotoURL(); ok {
		_spec.SetField(freelancer.FieldPhotoURL, field.TypeString, value)
	}
	if value, ok := fuo.mutation.RecentHours(); ok {
		_spec.SetField(freelancer.FieldRecentHours, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.AddedRecentHours(); ok {
		_spec.AddField(freelancer.FieldRecentHours, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.TotalHours(); ok {
		_spec.SetField(freelancer.FieldTotalHours, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.AddedTotalHours(); ok {
		_spec.AddField(freelancer.FieldTotalHours, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.TotalPortfolioItems(); ok {
		_spec.SetField(freelancer.FieldTotalPortfolioItems, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedTotalPortfolioItems(); ok {
		_spec.AddField(freelancer.FieldTotalPortfolioItems, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.TotalPortfolioV2Items(); ok {
		_spec.SetField(freelancer.FieldTotalPortfolioV2Items, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedTotalPortfolioV2Items(); ok {
		_spec.AddField(freelancer.FieldTotalPortfolioV2Items, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.UpworkTotalFeedback(); ok {
		_spec.SetField(freelancer.FieldUpworkTotalFeedback, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.AddedUpworkTotalFeedback(); ok {
		_spec.AddField(freelancer.FieldUpworkTotalFeedback, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.UpworkRecentFeedback(); ok {
		_spec.SetField(freelancer.FieldUpworkRecentFeedback, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.AddedUpworkRecentFeedback(); ok {
		_spec.AddField(freelancer.FieldUpworkRecentFeedback, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.UpworkTopRatedStatus(); ok {
		_spec.SetField(freelancer.FieldUpworkTopRatedStatus, field.TypeBool, value)
	}
	if value, ok := fuo.mutation.UpworkTopRatedPlusStatus(); ok {
		_spec.SetField(freelancer.FieldUpworkTopRatedPlusStatus, field.TypeBool, value)
	}
	if value, ok := fuo.mutation.UpworkSponsored(); ok {
		_spec.SetField(freelancer.FieldUpworkSponsored, field.TypeBool, value)
	}
	if value, ok := fuo.mutation.UpworkJobSuccessScore(); ok {
		_spec.SetField(freelancer.FieldUpworkJobSuccessScore, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.AddedUpworkJobSuccessScore(); ok {
		_spec.AddField(freelancer.FieldUpworkJobSuccessScore, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.UpworkReccomended(); ok {
		_spec.SetField(freelancer.FieldUpworkReccomended, field.TypeBool, value)
	}
	if value, ok := fuo.mutation.Skills(); ok {
		_spec.SetField(freelancer.FieldSkills, field.TypeJSON, value)
	}
	if value, ok := fuo.mutation.AppendedSkills(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, freelancer.FieldSkills, value)
		})
	}
	if value, ok := fuo.mutation.AverageRecentEarnings(); ok {
		_spec.SetField(freelancer.FieldAverageRecentEarnings, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.AddedAverageRecentEarnings(); ok {
		_spec.AddField(freelancer.FieldAverageRecentEarnings, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.CombinedAverageRecentEarnings(); ok {
		_spec.SetField(freelancer.FieldCombinedAverageRecentEarnings, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.AddedCombinedAverageRecentEarnings(); ok {
		_spec.AddField(freelancer.FieldCombinedAverageRecentEarnings, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.CombinedRecentEarnings(); ok {
		_spec.SetField(freelancer.FieldCombinedRecentEarnings, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.AddedCombinedRecentEarnings(); ok {
		_spec.AddField(freelancer.FieldCombinedRecentEarnings, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.CombinedTotalEarnings(); ok {
		_spec.SetField(freelancer.FieldCombinedTotalEarnings, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.AddedCombinedTotalEarnings(); ok {
		_spec.AddField(freelancer.FieldCombinedTotalEarnings, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.CombinedTotalRevenue(); ok {
		_spec.SetField(freelancer.FieldCombinedTotalRevenue, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.AddedCombinedTotalRevenue(); ok {
		_spec.AddField(freelancer.FieldCombinedTotalRevenue, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.RecentEarnings(); ok {
		_spec.SetField(freelancer.FieldRecentEarnings, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.AddedRecentEarnings(); ok {
		_spec.AddField(freelancer.FieldRecentEarnings, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.TotalRevenue(); ok {
		_spec.SetField(freelancer.FieldTotalRevenue, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.AddedTotalRevenue(); ok {
		_spec.AddField(freelancer.FieldTotalRevenue, field.TypeFloat64, value)
	}
	if value, ok := fuo.mutation.UprankScore(); ok {
		_spec.SetField(freelancer.FieldUprankScore, field.TypeInt, value)
	}
	if value, ok := fuo.mutation.AddedUprankScore(); ok {
		_spec.AddField(freelancer.FieldUprankScore, field.TypeInt, value)
	}
	if fuo.mutation.UprankScoreCleared() {
		_spec.ClearField(freelancer.FieldUprankScore, field.TypeInt)
	}
	if value, ok := fuo.mutation.UprankUpdatedAt(); ok {
		_spec.SetField(freelancer.FieldUprankUpdatedAt, field.TypeTime, value)
	}
	if value, ok := fuo.mutation.UprankReccomended(); ok {
		_spec.SetField(freelancer.FieldUprankReccomended, field.TypeBool, value)
	}
	if fuo.mutation.UprankReccomendedCleared() {
		_spec.ClearField(freelancer.FieldUprankReccomended, field.TypeBool)
	}
	if value, ok := fuo.mutation.UprankReccomendedReasons(); ok {
		_spec.SetField(freelancer.FieldUprankReccomendedReasons, field.TypeString, value)
	}
	if fuo.mutation.UprankReccomendedReasonsCleared() {
		_spec.ClearField(freelancer.FieldUprankReccomendedReasons, field.TypeString)
	}
	if value, ok := fuo.mutation.UprankNotEnoughData(); ok {
		_spec.SetField(freelancer.FieldUprankNotEnoughData, field.TypeBool, value)
	}
	if fuo.mutation.UprankNotEnoughDataCleared() {
		_spec.ClearField(freelancer.FieldUprankNotEnoughData, field.TypeBool)
	}
	if fuo.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   freelancer.JobTable,
			Columns: []string{freelancer.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   freelancer.JobTable,
			Columns: []string{freelancer.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   freelancer.AttachmentsTable,
			Columns: []string{freelancer.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachmentref.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedAttachmentsIDs(); len(nodes) > 0 && !fuo.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   freelancer.AttachmentsTable,
			Columns: []string{freelancer.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachmentref.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.AttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   freelancer.AttachmentsTable,
			Columns: []string{freelancer.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachmentref.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if fuo.mutation.WorkHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   freelancer.WorkHistoriesTable,
			Columns: []string{freelancer.WorkHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workhistory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedWorkHistoriesIDs(); len(nodes) > 0 && !fuo.mutation.WorkHistoriesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   freelancer.WorkHistoriesTable,
			Columns: []string{freelancer.WorkHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.WorkHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   freelancer.WorkHistoriesTable,
			Columns: []string{freelancer.WorkHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Freelancer{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{freelancer.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
