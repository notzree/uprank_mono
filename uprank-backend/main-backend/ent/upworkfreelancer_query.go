// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/notzree/uprank-backend/main-backend/ent/attachmentref"
	"github.com/notzree/uprank-backend/main-backend/ent/predicate"
	"github.com/notzree/uprank-backend/main-backend/ent/upworkfreelancer"
	"github.com/notzree/uprank-backend/main-backend/ent/upworkjob"
	"github.com/notzree/uprank-backend/main-backend/ent/workhistory"
)

// UpworkFreelancerQuery is the builder for querying UpworkFreelancer entities.
type UpworkFreelancerQuery struct {
	config
	ctx               *QueryContext
	order             []upworkfreelancer.OrderOption
	inters            []Interceptor
	predicates        []predicate.UpworkFreelancer
	withUpworkJob     *UpworkJobQuery
	withAttachments   *AttachmentRefQuery
	withWorkHistories *WorkHistoryQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UpworkFreelancerQuery builder.
func (ufq *UpworkFreelancerQuery) Where(ps ...predicate.UpworkFreelancer) *UpworkFreelancerQuery {
	ufq.predicates = append(ufq.predicates, ps...)
	return ufq
}

// Limit the number of records to be returned by this query.
func (ufq *UpworkFreelancerQuery) Limit(limit int) *UpworkFreelancerQuery {
	ufq.ctx.Limit = &limit
	return ufq
}

// Offset to start from.
func (ufq *UpworkFreelancerQuery) Offset(offset int) *UpworkFreelancerQuery {
	ufq.ctx.Offset = &offset
	return ufq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ufq *UpworkFreelancerQuery) Unique(unique bool) *UpworkFreelancerQuery {
	ufq.ctx.Unique = &unique
	return ufq
}

// Order specifies how the records should be ordered.
func (ufq *UpworkFreelancerQuery) Order(o ...upworkfreelancer.OrderOption) *UpworkFreelancerQuery {
	ufq.order = append(ufq.order, o...)
	return ufq
}

// QueryUpworkJob chains the current query on the "upwork_job" edge.
func (ufq *UpworkFreelancerQuery) QueryUpworkJob() *UpworkJobQuery {
	query := (&UpworkJobClient{config: ufq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ufq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ufq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(upworkfreelancer.Table, upworkfreelancer.FieldID, selector),
			sqlgraph.To(upworkjob.Table, upworkjob.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, upworkfreelancer.UpworkJobTable, upworkfreelancer.UpworkJobPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(ufq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAttachments chains the current query on the "attachments" edge.
func (ufq *UpworkFreelancerQuery) QueryAttachments() *AttachmentRefQuery {
	query := (&AttachmentRefClient{config: ufq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ufq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ufq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(upworkfreelancer.Table, upworkfreelancer.FieldID, selector),
			sqlgraph.To(attachmentref.Table, attachmentref.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, upworkfreelancer.AttachmentsTable, upworkfreelancer.AttachmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ufq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWorkHistories chains the current query on the "work_histories" edge.
func (ufq *UpworkFreelancerQuery) QueryWorkHistories() *WorkHistoryQuery {
	query := (&WorkHistoryClient{config: ufq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ufq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ufq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(upworkfreelancer.Table, upworkfreelancer.FieldID, selector),
			sqlgraph.To(workhistory.Table, workhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, upworkfreelancer.WorkHistoriesTable, upworkfreelancer.WorkHistoriesColumn),
		)
		fromU = sqlgraph.SetNeighbors(ufq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UpworkFreelancer entity from the query.
// Returns a *NotFoundError when no UpworkFreelancer was found.
func (ufq *UpworkFreelancerQuery) First(ctx context.Context) (*UpworkFreelancer, error) {
	nodes, err := ufq.Limit(1).All(setContextOp(ctx, ufq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{upworkfreelancer.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ufq *UpworkFreelancerQuery) FirstX(ctx context.Context) *UpworkFreelancer {
	node, err := ufq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UpworkFreelancer ID from the query.
// Returns a *NotFoundError when no UpworkFreelancer ID was found.
func (ufq *UpworkFreelancerQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ufq.Limit(1).IDs(setContextOp(ctx, ufq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{upworkfreelancer.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ufq *UpworkFreelancerQuery) FirstIDX(ctx context.Context) string {
	id, err := ufq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UpworkFreelancer entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UpworkFreelancer entity is found.
// Returns a *NotFoundError when no UpworkFreelancer entities are found.
func (ufq *UpworkFreelancerQuery) Only(ctx context.Context) (*UpworkFreelancer, error) {
	nodes, err := ufq.Limit(2).All(setContextOp(ctx, ufq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{upworkfreelancer.Label}
	default:
		return nil, &NotSingularError{upworkfreelancer.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ufq *UpworkFreelancerQuery) OnlyX(ctx context.Context) *UpworkFreelancer {
	node, err := ufq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UpworkFreelancer ID in the query.
// Returns a *NotSingularError when more than one UpworkFreelancer ID is found.
// Returns a *NotFoundError when no entities are found.
func (ufq *UpworkFreelancerQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ufq.Limit(2).IDs(setContextOp(ctx, ufq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{upworkfreelancer.Label}
	default:
		err = &NotSingularError{upworkfreelancer.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ufq *UpworkFreelancerQuery) OnlyIDX(ctx context.Context) string {
	id, err := ufq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UpworkFreelancers.
func (ufq *UpworkFreelancerQuery) All(ctx context.Context) ([]*UpworkFreelancer, error) {
	ctx = setContextOp(ctx, ufq.ctx, "All")
	if err := ufq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UpworkFreelancer, *UpworkFreelancerQuery]()
	return withInterceptors[[]*UpworkFreelancer](ctx, ufq, qr, ufq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ufq *UpworkFreelancerQuery) AllX(ctx context.Context) []*UpworkFreelancer {
	nodes, err := ufq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UpworkFreelancer IDs.
func (ufq *UpworkFreelancerQuery) IDs(ctx context.Context) (ids []string, err error) {
	if ufq.ctx.Unique == nil && ufq.path != nil {
		ufq.Unique(true)
	}
	ctx = setContextOp(ctx, ufq.ctx, "IDs")
	if err = ufq.Select(upworkfreelancer.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ufq *UpworkFreelancerQuery) IDsX(ctx context.Context) []string {
	ids, err := ufq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ufq *UpworkFreelancerQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ufq.ctx, "Count")
	if err := ufq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ufq, querierCount[*UpworkFreelancerQuery](), ufq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ufq *UpworkFreelancerQuery) CountX(ctx context.Context) int {
	count, err := ufq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ufq *UpworkFreelancerQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ufq.ctx, "Exist")
	switch _, err := ufq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ufq *UpworkFreelancerQuery) ExistX(ctx context.Context) bool {
	exist, err := ufq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UpworkFreelancerQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ufq *UpworkFreelancerQuery) Clone() *UpworkFreelancerQuery {
	if ufq == nil {
		return nil
	}
	return &UpworkFreelancerQuery{
		config:            ufq.config,
		ctx:               ufq.ctx.Clone(),
		order:             append([]upworkfreelancer.OrderOption{}, ufq.order...),
		inters:            append([]Interceptor{}, ufq.inters...),
		predicates:        append([]predicate.UpworkFreelancer{}, ufq.predicates...),
		withUpworkJob:     ufq.withUpworkJob.Clone(),
		withAttachments:   ufq.withAttachments.Clone(),
		withWorkHistories: ufq.withWorkHistories.Clone(),
		// clone intermediate query.
		sql:  ufq.sql.Clone(),
		path: ufq.path,
	}
}

// WithUpworkJob tells the query-builder to eager-load the nodes that are connected to
// the "upwork_job" edge. The optional arguments are used to configure the query builder of the edge.
func (ufq *UpworkFreelancerQuery) WithUpworkJob(opts ...func(*UpworkJobQuery)) *UpworkFreelancerQuery {
	query := (&UpworkJobClient{config: ufq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ufq.withUpworkJob = query
	return ufq
}

// WithAttachments tells the query-builder to eager-load the nodes that are connected to
// the "attachments" edge. The optional arguments are used to configure the query builder of the edge.
func (ufq *UpworkFreelancerQuery) WithAttachments(opts ...func(*AttachmentRefQuery)) *UpworkFreelancerQuery {
	query := (&AttachmentRefClient{config: ufq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ufq.withAttachments = query
	return ufq
}

// WithWorkHistories tells the query-builder to eager-load the nodes that are connected to
// the "work_histories" edge. The optional arguments are used to configure the query builder of the edge.
func (ufq *UpworkFreelancerQuery) WithWorkHistories(opts ...func(*WorkHistoryQuery)) *UpworkFreelancerQuery {
	query := (&WorkHistoryClient{config: ufq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ufq.withWorkHistories = query
	return ufq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UpworkFreelancer.Query().
//		GroupBy(upworkfreelancer.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ufq *UpworkFreelancerQuery) GroupBy(field string, fields ...string) *UpworkFreelancerGroupBy {
	ufq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UpworkFreelancerGroupBy{build: ufq}
	grbuild.flds = &ufq.ctx.Fields
	grbuild.label = upworkfreelancer.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.UpworkFreelancer.Query().
//		Select(upworkfreelancer.FieldName).
//		Scan(ctx, &v)
func (ufq *UpworkFreelancerQuery) Select(fields ...string) *UpworkFreelancerSelect {
	ufq.ctx.Fields = append(ufq.ctx.Fields, fields...)
	sbuild := &UpworkFreelancerSelect{UpworkFreelancerQuery: ufq}
	sbuild.label = upworkfreelancer.Label
	sbuild.flds, sbuild.scan = &ufq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UpworkFreelancerSelect configured with the given aggregations.
func (ufq *UpworkFreelancerQuery) Aggregate(fns ...AggregateFunc) *UpworkFreelancerSelect {
	return ufq.Select().Aggregate(fns...)
}

func (ufq *UpworkFreelancerQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ufq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ufq); err != nil {
				return err
			}
		}
	}
	for _, f := range ufq.ctx.Fields {
		if !upworkfreelancer.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ufq.path != nil {
		prev, err := ufq.path(ctx)
		if err != nil {
			return err
		}
		ufq.sql = prev
	}
	return nil
}

func (ufq *UpworkFreelancerQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UpworkFreelancer, error) {
	var (
		nodes       = []*UpworkFreelancer{}
		_spec       = ufq.querySpec()
		loadedTypes = [3]bool{
			ufq.withUpworkJob != nil,
			ufq.withAttachments != nil,
			ufq.withWorkHistories != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UpworkFreelancer).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UpworkFreelancer{config: ufq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ufq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ufq.withUpworkJob; query != nil {
		if err := ufq.loadUpworkJob(ctx, query, nodes,
			func(n *UpworkFreelancer) { n.Edges.UpworkJob = []*UpworkJob{} },
			func(n *UpworkFreelancer, e *UpworkJob) { n.Edges.UpworkJob = append(n.Edges.UpworkJob, e) }); err != nil {
			return nil, err
		}
	}
	if query := ufq.withAttachments; query != nil {
		if err := ufq.loadAttachments(ctx, query, nodes,
			func(n *UpworkFreelancer) { n.Edges.Attachments = []*AttachmentRef{} },
			func(n *UpworkFreelancer, e *AttachmentRef) { n.Edges.Attachments = append(n.Edges.Attachments, e) }); err != nil {
			return nil, err
		}
	}
	if query := ufq.withWorkHistories; query != nil {
		if err := ufq.loadWorkHistories(ctx, query, nodes,
			func(n *UpworkFreelancer) { n.Edges.WorkHistories = []*WorkHistory{} },
			func(n *UpworkFreelancer, e *WorkHistory) { n.Edges.WorkHistories = append(n.Edges.WorkHistories, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ufq *UpworkFreelancerQuery) loadUpworkJob(ctx context.Context, query *UpworkJobQuery, nodes []*UpworkFreelancer, init func(*UpworkFreelancer), assign func(*UpworkFreelancer, *UpworkJob)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*UpworkFreelancer)
	nids := make(map[string]map[*UpworkFreelancer]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(upworkfreelancer.UpworkJobTable)
		s.Join(joinT).On(s.C(upworkjob.FieldID), joinT.C(upworkfreelancer.UpworkJobPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(upworkfreelancer.UpworkJobPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(upworkfreelancer.UpworkJobPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*UpworkFreelancer]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*UpworkJob](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "upwork_job" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (ufq *UpworkFreelancerQuery) loadAttachments(ctx context.Context, query *AttachmentRefQuery, nodes []*UpworkFreelancer, init func(*UpworkFreelancer), assign func(*UpworkFreelancer, *AttachmentRef)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*UpworkFreelancer)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.AttachmentRef(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(upworkfreelancer.AttachmentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.upwork_freelancer_attachments
		if fk == nil {
			return fmt.Errorf(`foreign-key "upwork_freelancer_attachments" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "upwork_freelancer_attachments" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (ufq *UpworkFreelancerQuery) loadWorkHistories(ctx context.Context, query *WorkHistoryQuery, nodes []*UpworkFreelancer, init func(*UpworkFreelancer), assign func(*UpworkFreelancer, *WorkHistory)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*UpworkFreelancer)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.WorkHistory(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(upworkfreelancer.WorkHistoriesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.upwork_freelancer_work_histories
		if fk == nil {
			return fmt.Errorf(`foreign-key "upwork_freelancer_work_histories" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "upwork_freelancer_work_histories" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ufq *UpworkFreelancerQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ufq.querySpec()
	_spec.Node.Columns = ufq.ctx.Fields
	if len(ufq.ctx.Fields) > 0 {
		_spec.Unique = ufq.ctx.Unique != nil && *ufq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ufq.driver, _spec)
}

func (ufq *UpworkFreelancerQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(upworkfreelancer.Table, upworkfreelancer.Columns, sqlgraph.NewFieldSpec(upworkfreelancer.FieldID, field.TypeString))
	_spec.From = ufq.sql
	if unique := ufq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ufq.path != nil {
		_spec.Unique = true
	}
	if fields := ufq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upworkfreelancer.FieldID)
		for i := range fields {
			if fields[i] != upworkfreelancer.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ufq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ufq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ufq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ufq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ufq *UpworkFreelancerQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ufq.driver.Dialect())
	t1 := builder.Table(upworkfreelancer.Table)
	columns := ufq.ctx.Fields
	if len(columns) == 0 {
		columns = upworkfreelancer.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ufq.sql != nil {
		selector = ufq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ufq.ctx.Unique != nil && *ufq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ufq.predicates {
		p(selector)
	}
	for _, p := range ufq.order {
		p(selector)
	}
	if offset := ufq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ufq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UpworkFreelancerGroupBy is the group-by builder for UpworkFreelancer entities.
type UpworkFreelancerGroupBy struct {
	selector
	build *UpworkFreelancerQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ufgb *UpworkFreelancerGroupBy) Aggregate(fns ...AggregateFunc) *UpworkFreelancerGroupBy {
	ufgb.fns = append(ufgb.fns, fns...)
	return ufgb
}

// Scan applies the selector query and scans the result into the given value.
func (ufgb *UpworkFreelancerGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ufgb.build.ctx, "GroupBy")
	if err := ufgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UpworkFreelancerQuery, *UpworkFreelancerGroupBy](ctx, ufgb.build, ufgb, ufgb.build.inters, v)
}

func (ufgb *UpworkFreelancerGroupBy) sqlScan(ctx context.Context, root *UpworkFreelancerQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ufgb.fns))
	for _, fn := range ufgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ufgb.flds)+len(ufgb.fns))
		for _, f := range *ufgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ufgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ufgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UpworkFreelancerSelect is the builder for selecting fields of UpworkFreelancer entities.
type UpworkFreelancerSelect struct {
	*UpworkFreelancerQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ufs *UpworkFreelancerSelect) Aggregate(fns ...AggregateFunc) *UpworkFreelancerSelect {
	ufs.fns = append(ufs.fns, fns...)
	return ufs
}

// Scan applies the selector query and scans the result into the given value.
func (ufs *UpworkFreelancerSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ufs.ctx, "Select")
	if err := ufs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UpworkFreelancerQuery, *UpworkFreelancerSelect](ctx, ufs.UpworkFreelancerQuery, ufs, ufs.inters, v)
}

func (ufs *UpworkFreelancerSelect) sqlScan(ctx context.Context, root *UpworkFreelancerQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ufs.fns))
	for _, fn := range ufs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ufs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ufs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
