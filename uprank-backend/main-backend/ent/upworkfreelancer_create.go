// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/notzree/uprank-backend/main-backend/ent/attachmentref"
	"github.com/notzree/uprank-backend/main-backend/ent/upworkfreelancer"
	"github.com/notzree/uprank-backend/main-backend/ent/upworkjob"
	"github.com/notzree/uprank-backend/main-backend/ent/workhistory"
)

// UpworkFreelancerCreate is the builder for creating a UpworkFreelancer entity.
type UpworkFreelancerCreate struct {
	config
	mutation *UpworkFreelancerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (ufc *UpworkFreelancerCreate) SetName(s string) *UpworkFreelancerCreate {
	ufc.mutation.SetName(s)
	return ufc
}

// SetTitle sets the "title" field.
func (ufc *UpworkFreelancerCreate) SetTitle(s string) *UpworkFreelancerCreate {
	ufc.mutation.SetTitle(s)
	return ufc
}

// SetDescription sets the "description" field.
func (ufc *UpworkFreelancerCreate) SetDescription(s string) *UpworkFreelancerCreate {
	ufc.mutation.SetDescription(s)
	return ufc
}

// SetCity sets the "city" field.
func (ufc *UpworkFreelancerCreate) SetCity(s string) *UpworkFreelancerCreate {
	ufc.mutation.SetCity(s)
	return ufc
}

// SetCountry sets the "country" field.
func (ufc *UpworkFreelancerCreate) SetCountry(s string) *UpworkFreelancerCreate {
	ufc.mutation.SetCountry(s)
	return ufc
}

// SetTimezone sets the "timezone" field.
func (ufc *UpworkFreelancerCreate) SetTimezone(s string) *UpworkFreelancerCreate {
	ufc.mutation.SetTimezone(s)
	return ufc
}

// SetCv sets the "cv" field.
func (ufc *UpworkFreelancerCreate) SetCv(s string) *UpworkFreelancerCreate {
	ufc.mutation.SetCv(s)
	return ufc
}

// SetAiReccomended sets the "ai_reccomended" field.
func (ufc *UpworkFreelancerCreate) SetAiReccomended(b bool) *UpworkFreelancerCreate {
	ufc.mutation.SetAiReccomended(b)
	return ufc
}

// SetFixedChargeAmount sets the "fixed_charge_amount" field.
func (ufc *UpworkFreelancerCreate) SetFixedChargeAmount(f float64) *UpworkFreelancerCreate {
	ufc.mutation.SetFixedChargeAmount(f)
	return ufc
}

// SetNillableFixedChargeAmount sets the "fixed_charge_amount" field if the given value is not nil.
func (ufc *UpworkFreelancerCreate) SetNillableFixedChargeAmount(f *float64) *UpworkFreelancerCreate {
	if f != nil {
		ufc.SetFixedChargeAmount(*f)
	}
	return ufc
}

// SetFixedChargeCurrency sets the "fixed_charge_currency" field.
func (ufc *UpworkFreelancerCreate) SetFixedChargeCurrency(s string) *UpworkFreelancerCreate {
	ufc.mutation.SetFixedChargeCurrency(s)
	return ufc
}

// SetHourlyChargeAmount sets the "hourly_charge_amount" field.
func (ufc *UpworkFreelancerCreate) SetHourlyChargeAmount(f float64) *UpworkFreelancerCreate {
	ufc.mutation.SetHourlyChargeAmount(f)
	return ufc
}

// SetNillableHourlyChargeAmount sets the "hourly_charge_amount" field if the given value is not nil.
func (ufc *UpworkFreelancerCreate) SetNillableHourlyChargeAmount(f *float64) *UpworkFreelancerCreate {
	if f != nil {
		ufc.SetHourlyChargeAmount(*f)
	}
	return ufc
}

// SetHourlyChargeCurrency sets the "hourly_charge_currency" field.
func (ufc *UpworkFreelancerCreate) SetHourlyChargeCurrency(s string) *UpworkFreelancerCreate {
	ufc.mutation.SetHourlyChargeCurrency(s)
	return ufc
}

// SetInvited sets the "invited" field.
func (ufc *UpworkFreelancerCreate) SetInvited(b bool) *UpworkFreelancerCreate {
	ufc.mutation.SetInvited(b)
	return ufc
}

// SetPhotoURL sets the "photo_url" field.
func (ufc *UpworkFreelancerCreate) SetPhotoURL(s string) *UpworkFreelancerCreate {
	ufc.mutation.SetPhotoURL(s)
	return ufc
}

// SetRecentHours sets the "recent_hours" field.
func (ufc *UpworkFreelancerCreate) SetRecentHours(f float64) *UpworkFreelancerCreate {
	ufc.mutation.SetRecentHours(f)
	return ufc
}

// SetTotalHours sets the "total_hours" field.
func (ufc *UpworkFreelancerCreate) SetTotalHours(f float64) *UpworkFreelancerCreate {
	ufc.mutation.SetTotalHours(f)
	return ufc
}

// SetCreatedAt sets the "created_at" field.
func (ufc *UpworkFreelancerCreate) SetCreatedAt(t time.Time) *UpworkFreelancerCreate {
	ufc.mutation.SetCreatedAt(t)
	return ufc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ufc *UpworkFreelancerCreate) SetNillableCreatedAt(t *time.Time) *UpworkFreelancerCreate {
	if t != nil {
		ufc.SetCreatedAt(*t)
	}
	return ufc
}

// SetUpdatedAt sets the "updated_at" field.
func (ufc *UpworkFreelancerCreate) SetUpdatedAt(t time.Time) *UpworkFreelancerCreate {
	ufc.mutation.SetUpdatedAt(t)
	return ufc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ufc *UpworkFreelancerCreate) SetNillableUpdatedAt(t *time.Time) *UpworkFreelancerCreate {
	if t != nil {
		ufc.SetUpdatedAt(*t)
	}
	return ufc
}

// SetTotalPortfolioItems sets the "total_portfolio_items" field.
func (ufc *UpworkFreelancerCreate) SetTotalPortfolioItems(i int) *UpworkFreelancerCreate {
	ufc.mutation.SetTotalPortfolioItems(i)
	return ufc
}

// SetTotalPortfolioV2Items sets the "total_portfolio_v2_items" field.
func (ufc *UpworkFreelancerCreate) SetTotalPortfolioV2Items(i int) *UpworkFreelancerCreate {
	ufc.mutation.SetTotalPortfolioV2Items(i)
	return ufc
}

// SetUpworkTotalFeedback sets the "upwork_total_feedback" field.
func (ufc *UpworkFreelancerCreate) SetUpworkTotalFeedback(f float64) *UpworkFreelancerCreate {
	ufc.mutation.SetUpworkTotalFeedback(f)
	return ufc
}

// SetUpworkRecentFeedback sets the "upwork_recent_feedback" field.
func (ufc *UpworkFreelancerCreate) SetUpworkRecentFeedback(f float64) *UpworkFreelancerCreate {
	ufc.mutation.SetUpworkRecentFeedback(f)
	return ufc
}

// SetUpworkTopRatedStatus sets the "upwork_top_rated_status" field.
func (ufc *UpworkFreelancerCreate) SetUpworkTopRatedStatus(b bool) *UpworkFreelancerCreate {
	ufc.mutation.SetUpworkTopRatedStatus(b)
	return ufc
}

// SetUpworkTopRatedPlusStatus sets the "upwork_top_rated_plus_status" field.
func (ufc *UpworkFreelancerCreate) SetUpworkTopRatedPlusStatus(b bool) *UpworkFreelancerCreate {
	ufc.mutation.SetUpworkTopRatedPlusStatus(b)
	return ufc
}

// SetUpworkSponsored sets the "upwork_sponsored" field.
func (ufc *UpworkFreelancerCreate) SetUpworkSponsored(b bool) *UpworkFreelancerCreate {
	ufc.mutation.SetUpworkSponsored(b)
	return ufc
}

// SetUpworkJobSuccessScore sets the "upwork_job_success_score" field.
func (ufc *UpworkFreelancerCreate) SetUpworkJobSuccessScore(f float64) *UpworkFreelancerCreate {
	ufc.mutation.SetUpworkJobSuccessScore(f)
	return ufc
}

// SetUpworkReccomended sets the "upwork_reccomended" field.
func (ufc *UpworkFreelancerCreate) SetUpworkReccomended(b bool) *UpworkFreelancerCreate {
	ufc.mutation.SetUpworkReccomended(b)
	return ufc
}

// SetSkills sets the "skills" field.
func (ufc *UpworkFreelancerCreate) SetSkills(s []string) *UpworkFreelancerCreate {
	ufc.mutation.SetSkills(s)
	return ufc
}

// SetAverageRecentEarnings sets the "average_recent_earnings" field.
func (ufc *UpworkFreelancerCreate) SetAverageRecentEarnings(f float64) *UpworkFreelancerCreate {
	ufc.mutation.SetAverageRecentEarnings(f)
	return ufc
}

// SetCombinedAverageRecentEarnings sets the "combined_average_recent_earnings" field.
func (ufc *UpworkFreelancerCreate) SetCombinedAverageRecentEarnings(f float64) *UpworkFreelancerCreate {
	ufc.mutation.SetCombinedAverageRecentEarnings(f)
	return ufc
}

// SetCombinedRecentEarnings sets the "combined_recent_earnings" field.
func (ufc *UpworkFreelancerCreate) SetCombinedRecentEarnings(f float64) *UpworkFreelancerCreate {
	ufc.mutation.SetCombinedRecentEarnings(f)
	return ufc
}

// SetCombinedTotalEarnings sets the "combined_total_earnings" field.
func (ufc *UpworkFreelancerCreate) SetCombinedTotalEarnings(f float64) *UpworkFreelancerCreate {
	ufc.mutation.SetCombinedTotalEarnings(f)
	return ufc
}

// SetCombinedTotalRevenue sets the "combined_total_revenue" field.
func (ufc *UpworkFreelancerCreate) SetCombinedTotalRevenue(f float64) *UpworkFreelancerCreate {
	ufc.mutation.SetCombinedTotalRevenue(f)
	return ufc
}

// SetRecentEarnings sets the "recent_earnings" field.
func (ufc *UpworkFreelancerCreate) SetRecentEarnings(f float64) *UpworkFreelancerCreate {
	ufc.mutation.SetRecentEarnings(f)
	return ufc
}

// SetTotalRevenue sets the "total_revenue" field.
func (ufc *UpworkFreelancerCreate) SetTotalRevenue(f float64) *UpworkFreelancerCreate {
	ufc.mutation.SetTotalRevenue(f)
	return ufc
}

// SetUprankScore sets the "uprank_score" field.
func (ufc *UpworkFreelancerCreate) SetUprankScore(i int) *UpworkFreelancerCreate {
	ufc.mutation.SetUprankScore(i)
	return ufc
}

// SetNillableUprankScore sets the "uprank_score" field if the given value is not nil.
func (ufc *UpworkFreelancerCreate) SetNillableUprankScore(i *int) *UpworkFreelancerCreate {
	if i != nil {
		ufc.SetUprankScore(*i)
	}
	return ufc
}

// SetEmbeddedAt sets the "embedded_at" field.
func (ufc *UpworkFreelancerCreate) SetEmbeddedAt(t time.Time) *UpworkFreelancerCreate {
	ufc.mutation.SetEmbeddedAt(t)
	return ufc
}

// SetNillableEmbeddedAt sets the "embedded_at" field if the given value is not nil.
func (ufc *UpworkFreelancerCreate) SetNillableEmbeddedAt(t *time.Time) *UpworkFreelancerCreate {
	if t != nil {
		ufc.SetEmbeddedAt(*t)
	}
	return ufc
}

// SetUprankReccomended sets the "uprank_reccomended" field.
func (ufc *UpworkFreelancerCreate) SetUprankReccomended(b bool) *UpworkFreelancerCreate {
	ufc.mutation.SetUprankReccomended(b)
	return ufc
}

// SetNillableUprankReccomended sets the "uprank_reccomended" field if the given value is not nil.
func (ufc *UpworkFreelancerCreate) SetNillableUprankReccomended(b *bool) *UpworkFreelancerCreate {
	if b != nil {
		ufc.SetUprankReccomended(*b)
	}
	return ufc
}

// SetUprankReccomendedReasons sets the "uprank_reccomended_reasons" field.
func (ufc *UpworkFreelancerCreate) SetUprankReccomendedReasons(s string) *UpworkFreelancerCreate {
	ufc.mutation.SetUprankReccomendedReasons(s)
	return ufc
}

// SetNillableUprankReccomendedReasons sets the "uprank_reccomended_reasons" field if the given value is not nil.
func (ufc *UpworkFreelancerCreate) SetNillableUprankReccomendedReasons(s *string) *UpworkFreelancerCreate {
	if s != nil {
		ufc.SetUprankReccomendedReasons(*s)
	}
	return ufc
}

// SetUprankNotEnoughData sets the "uprank_not_enough_data" field.
func (ufc *UpworkFreelancerCreate) SetUprankNotEnoughData(b bool) *UpworkFreelancerCreate {
	ufc.mutation.SetUprankNotEnoughData(b)
	return ufc
}

// SetNillableUprankNotEnoughData sets the "uprank_not_enough_data" field if the given value is not nil.
func (ufc *UpworkFreelancerCreate) SetNillableUprankNotEnoughData(b *bool) *UpworkFreelancerCreate {
	if b != nil {
		ufc.SetUprankNotEnoughData(*b)
	}
	return ufc
}

// SetID sets the "id" field.
func (ufc *UpworkFreelancerCreate) SetID(s string) *UpworkFreelancerCreate {
	ufc.mutation.SetID(s)
	return ufc
}

// AddUpworkJobIDs adds the "upwork_job" edge to the UpworkJob entity by IDs.
func (ufc *UpworkFreelancerCreate) AddUpworkJobIDs(ids ...string) *UpworkFreelancerCreate {
	ufc.mutation.AddUpworkJobIDs(ids...)
	return ufc
}

// AddUpworkJob adds the "upwork_job" edges to the UpworkJob entity.
func (ufc *UpworkFreelancerCreate) AddUpworkJob(u ...*UpworkJob) *UpworkFreelancerCreate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ufc.AddUpworkJobIDs(ids...)
}

// AddAttachmentIDs adds the "attachments" edge to the AttachmentRef entity by IDs.
func (ufc *UpworkFreelancerCreate) AddAttachmentIDs(ids ...int) *UpworkFreelancerCreate {
	ufc.mutation.AddAttachmentIDs(ids...)
	return ufc
}

// AddAttachments adds the "attachments" edges to the AttachmentRef entity.
func (ufc *UpworkFreelancerCreate) AddAttachments(a ...*AttachmentRef) *UpworkFreelancerCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ufc.AddAttachmentIDs(ids...)
}

// AddWorkHistoryIDs adds the "work_histories" edge to the WorkHistory entity by IDs.
func (ufc *UpworkFreelancerCreate) AddWorkHistoryIDs(ids ...int) *UpworkFreelancerCreate {
	ufc.mutation.AddWorkHistoryIDs(ids...)
	return ufc
}

// AddWorkHistories adds the "work_histories" edges to the WorkHistory entity.
func (ufc *UpworkFreelancerCreate) AddWorkHistories(w ...*WorkHistory) *UpworkFreelancerCreate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return ufc.AddWorkHistoryIDs(ids...)
}

// Mutation returns the UpworkFreelancerMutation object of the builder.
func (ufc *UpworkFreelancerCreate) Mutation() *UpworkFreelancerMutation {
	return ufc.mutation
}

// Save creates the UpworkFreelancer in the database.
func (ufc *UpworkFreelancerCreate) Save(ctx context.Context) (*UpworkFreelancer, error) {
	ufc.defaults()
	return withHooks(ctx, ufc.sqlSave, ufc.mutation, ufc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ufc *UpworkFreelancerCreate) SaveX(ctx context.Context) *UpworkFreelancer {
	v, err := ufc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ufc *UpworkFreelancerCreate) Exec(ctx context.Context) error {
	_, err := ufc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufc *UpworkFreelancerCreate) ExecX(ctx context.Context) {
	if err := ufc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ufc *UpworkFreelancerCreate) defaults() {
	if _, ok := ufc.mutation.CreatedAt(); !ok {
		v := upworkfreelancer.DefaultCreatedAt()
		ufc.mutation.SetCreatedAt(v)
	}
	if _, ok := ufc.mutation.UpdatedAt(); !ok {
		v := upworkfreelancer.DefaultUpdatedAt()
		ufc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ufc.mutation.UprankScore(); !ok {
		v := upworkfreelancer.DefaultUprankScore
		ufc.mutation.SetUprankScore(v)
	}
	if _, ok := ufc.mutation.UprankReccomended(); !ok {
		v := upworkfreelancer.DefaultUprankReccomended
		ufc.mutation.SetUprankReccomended(v)
	}
	if _, ok := ufc.mutation.UprankNotEnoughData(); !ok {
		v := upworkfreelancer.DefaultUprankNotEnoughData
		ufc.mutation.SetUprankNotEnoughData(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ufc *UpworkFreelancerCreate) check() error {
	if _, ok := ufc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "UpworkFreelancer.name"`)}
	}
	if _, ok := ufc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "UpworkFreelancer.title"`)}
	}
	if _, ok := ufc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "UpworkFreelancer.description"`)}
	}
	if _, ok := ufc.mutation.City(); !ok {
		return &ValidationError{Name: "city", err: errors.New(`ent: missing required field "UpworkFreelancer.city"`)}
	}
	if _, ok := ufc.mutation.Country(); !ok {
		return &ValidationError{Name: "country", err: errors.New(`ent: missing required field "UpworkFreelancer.country"`)}
	}
	if _, ok := ufc.mutation.Timezone(); !ok {
		return &ValidationError{Name: "timezone", err: errors.New(`ent: missing required field "UpworkFreelancer.timezone"`)}
	}
	if _, ok := ufc.mutation.Cv(); !ok {
		return &ValidationError{Name: "cv", err: errors.New(`ent: missing required field "UpworkFreelancer.cv"`)}
	}
	if _, ok := ufc.mutation.AiReccomended(); !ok {
		return &ValidationError{Name: "ai_reccomended", err: errors.New(`ent: missing required field "UpworkFreelancer.ai_reccomended"`)}
	}
	if _, ok := ufc.mutation.FixedChargeCurrency(); !ok {
		return &ValidationError{Name: "fixed_charge_currency", err: errors.New(`ent: missing required field "UpworkFreelancer.fixed_charge_currency"`)}
	}
	if _, ok := ufc.mutation.HourlyChargeCurrency(); !ok {
		return &ValidationError{Name: "hourly_charge_currency", err: errors.New(`ent: missing required field "UpworkFreelancer.hourly_charge_currency"`)}
	}
	if _, ok := ufc.mutation.Invited(); !ok {
		return &ValidationError{Name: "invited", err: errors.New(`ent: missing required field "UpworkFreelancer.invited"`)}
	}
	if _, ok := ufc.mutation.PhotoURL(); !ok {
		return &ValidationError{Name: "photo_url", err: errors.New(`ent: missing required field "UpworkFreelancer.photo_url"`)}
	}
	if _, ok := ufc.mutation.RecentHours(); !ok {
		return &ValidationError{Name: "recent_hours", err: errors.New(`ent: missing required field "UpworkFreelancer.recent_hours"`)}
	}
	if _, ok := ufc.mutation.TotalHours(); !ok {
		return &ValidationError{Name: "total_hours", err: errors.New(`ent: missing required field "UpworkFreelancer.total_hours"`)}
	}
	if _, ok := ufc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UpworkFreelancer.created_at"`)}
	}
	if _, ok := ufc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UpworkFreelancer.updated_at"`)}
	}
	if _, ok := ufc.mutation.TotalPortfolioItems(); !ok {
		return &ValidationError{Name: "total_portfolio_items", err: errors.New(`ent: missing required field "UpworkFreelancer.total_portfolio_items"`)}
	}
	if _, ok := ufc.mutation.TotalPortfolioV2Items(); !ok {
		return &ValidationError{Name: "total_portfolio_v2_items", err: errors.New(`ent: missing required field "UpworkFreelancer.total_portfolio_v2_items"`)}
	}
	if _, ok := ufc.mutation.UpworkTotalFeedback(); !ok {
		return &ValidationError{Name: "upwork_total_feedback", err: errors.New(`ent: missing required field "UpworkFreelancer.upwork_total_feedback"`)}
	}
	if _, ok := ufc.mutation.UpworkRecentFeedback(); !ok {
		return &ValidationError{Name: "upwork_recent_feedback", err: errors.New(`ent: missing required field "UpworkFreelancer.upwork_recent_feedback"`)}
	}
	if _, ok := ufc.mutation.UpworkTopRatedStatus(); !ok {
		return &ValidationError{Name: "upwork_top_rated_status", err: errors.New(`ent: missing required field "UpworkFreelancer.upwork_top_rated_status"`)}
	}
	if _, ok := ufc.mutation.UpworkTopRatedPlusStatus(); !ok {
		return &ValidationError{Name: "upwork_top_rated_plus_status", err: errors.New(`ent: missing required field "UpworkFreelancer.upwork_top_rated_plus_status"`)}
	}
	if _, ok := ufc.mutation.UpworkSponsored(); !ok {
		return &ValidationError{Name: "upwork_sponsored", err: errors.New(`ent: missing required field "UpworkFreelancer.upwork_sponsored"`)}
	}
	if _, ok := ufc.mutation.UpworkJobSuccessScore(); !ok {
		return &ValidationError{Name: "upwork_job_success_score", err: errors.New(`ent: missing required field "UpworkFreelancer.upwork_job_success_score"`)}
	}
	if _, ok := ufc.mutation.UpworkReccomended(); !ok {
		return &ValidationError{Name: "upwork_reccomended", err: errors.New(`ent: missing required field "UpworkFreelancer.upwork_reccomended"`)}
	}
	if _, ok := ufc.mutation.Skills(); !ok {
		return &ValidationError{Name: "skills", err: errors.New(`ent: missing required field "UpworkFreelancer.skills"`)}
	}
	if _, ok := ufc.mutation.AverageRecentEarnings(); !ok {
		return &ValidationError{Name: "average_recent_earnings", err: errors.New(`ent: missing required field "UpworkFreelancer.average_recent_earnings"`)}
	}
	if _, ok := ufc.mutation.CombinedAverageRecentEarnings(); !ok {
		return &ValidationError{Name: "combined_average_recent_earnings", err: errors.New(`ent: missing required field "UpworkFreelancer.combined_average_recent_earnings"`)}
	}
	if _, ok := ufc.mutation.CombinedRecentEarnings(); !ok {
		return &ValidationError{Name: "combined_recent_earnings", err: errors.New(`ent: missing required field "UpworkFreelancer.combined_recent_earnings"`)}
	}
	if _, ok := ufc.mutation.CombinedTotalEarnings(); !ok {
		return &ValidationError{Name: "combined_total_earnings", err: errors.New(`ent: missing required field "UpworkFreelancer.combined_total_earnings"`)}
	}
	if _, ok := ufc.mutation.CombinedTotalRevenue(); !ok {
		return &ValidationError{Name: "combined_total_revenue", err: errors.New(`ent: missing required field "UpworkFreelancer.combined_total_revenue"`)}
	}
	if _, ok := ufc.mutation.RecentEarnings(); !ok {
		return &ValidationError{Name: "recent_earnings", err: errors.New(`ent: missing required field "UpworkFreelancer.recent_earnings"`)}
	}
	if _, ok := ufc.mutation.TotalRevenue(); !ok {
		return &ValidationError{Name: "total_revenue", err: errors.New(`ent: missing required field "UpworkFreelancer.total_revenue"`)}
	}
	if v, ok := ufc.mutation.ID(); ok {
		if err := upworkfreelancer.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "UpworkFreelancer.id": %w`, err)}
		}
	}
	return nil
}

func (ufc *UpworkFreelancerCreate) sqlSave(ctx context.Context) (*UpworkFreelancer, error) {
	if err := ufc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ufc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ufc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected UpworkFreelancer.ID type: %T", _spec.ID.Value)
		}
	}
	ufc.mutation.id = &_node.ID
	ufc.mutation.done = true
	return _node, nil
}

func (ufc *UpworkFreelancerCreate) createSpec() (*UpworkFreelancer, *sqlgraph.CreateSpec) {
	var (
		_node = &UpworkFreelancer{config: ufc.config}
		_spec = sqlgraph.NewCreateSpec(upworkfreelancer.Table, sqlgraph.NewFieldSpec(upworkfreelancer.FieldID, field.TypeString))
	)
	_spec.OnConflict = ufc.conflict
	if id, ok := ufc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ufc.mutation.Name(); ok {
		_spec.SetField(upworkfreelancer.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ufc.mutation.Title(); ok {
		_spec.SetField(upworkfreelancer.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ufc.mutation.Description(); ok {
		_spec.SetField(upworkfreelancer.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ufc.mutation.City(); ok {
		_spec.SetField(upworkfreelancer.FieldCity, field.TypeString, value)
		_node.City = value
	}
	if value, ok := ufc.mutation.Country(); ok {
		_spec.SetField(upworkfreelancer.FieldCountry, field.TypeString, value)
		_node.Country = value
	}
	if value, ok := ufc.mutation.Timezone(); ok {
		_spec.SetField(upworkfreelancer.FieldTimezone, field.TypeString, value)
		_node.Timezone = value
	}
	if value, ok := ufc.mutation.Cv(); ok {
		_spec.SetField(upworkfreelancer.FieldCv, field.TypeString, value)
		_node.Cv = value
	}
	if value, ok := ufc.mutation.AiReccomended(); ok {
		_spec.SetField(upworkfreelancer.FieldAiReccomended, field.TypeBool, value)
		_node.AiReccomended = value
	}
	if value, ok := ufc.mutation.FixedChargeAmount(); ok {
		_spec.SetField(upworkfreelancer.FieldFixedChargeAmount, field.TypeFloat64, value)
		_node.FixedChargeAmount = value
	}
	if value, ok := ufc.mutation.FixedChargeCurrency(); ok {
		_spec.SetField(upworkfreelancer.FieldFixedChargeCurrency, field.TypeString, value)
		_node.FixedChargeCurrency = value
	}
	if value, ok := ufc.mutation.HourlyChargeAmount(); ok {
		_spec.SetField(upworkfreelancer.FieldHourlyChargeAmount, field.TypeFloat64, value)
		_node.HourlyChargeAmount = value
	}
	if value, ok := ufc.mutation.HourlyChargeCurrency(); ok {
		_spec.SetField(upworkfreelancer.FieldHourlyChargeCurrency, field.TypeString, value)
		_node.HourlyChargeCurrency = value
	}
	if value, ok := ufc.mutation.Invited(); ok {
		_spec.SetField(upworkfreelancer.FieldInvited, field.TypeBool, value)
		_node.Invited = value
	}
	if value, ok := ufc.mutation.PhotoURL(); ok {
		_spec.SetField(upworkfreelancer.FieldPhotoURL, field.TypeString, value)
		_node.PhotoURL = value
	}
	if value, ok := ufc.mutation.RecentHours(); ok {
		_spec.SetField(upworkfreelancer.FieldRecentHours, field.TypeFloat64, value)
		_node.RecentHours = value
	}
	if value, ok := ufc.mutation.TotalHours(); ok {
		_spec.SetField(upworkfreelancer.FieldTotalHours, field.TypeFloat64, value)
		_node.TotalHours = value
	}
	if value, ok := ufc.mutation.CreatedAt(); ok {
		_spec.SetField(upworkfreelancer.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ufc.mutation.UpdatedAt(); ok {
		_spec.SetField(upworkfreelancer.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ufc.mutation.TotalPortfolioItems(); ok {
		_spec.SetField(upworkfreelancer.FieldTotalPortfolioItems, field.TypeInt, value)
		_node.TotalPortfolioItems = value
	}
	if value, ok := ufc.mutation.TotalPortfolioV2Items(); ok {
		_spec.SetField(upworkfreelancer.FieldTotalPortfolioV2Items, field.TypeInt, value)
		_node.TotalPortfolioV2Items = value
	}
	if value, ok := ufc.mutation.UpworkTotalFeedback(); ok {
		_spec.SetField(upworkfreelancer.FieldUpworkTotalFeedback, field.TypeFloat64, value)
		_node.UpworkTotalFeedback = value
	}
	if value, ok := ufc.mutation.UpworkRecentFeedback(); ok {
		_spec.SetField(upworkfreelancer.FieldUpworkRecentFeedback, field.TypeFloat64, value)
		_node.UpworkRecentFeedback = value
	}
	if value, ok := ufc.mutation.UpworkTopRatedStatus(); ok {
		_spec.SetField(upworkfreelancer.FieldUpworkTopRatedStatus, field.TypeBool, value)
		_node.UpworkTopRatedStatus = value
	}
	if value, ok := ufc.mutation.UpworkTopRatedPlusStatus(); ok {
		_spec.SetField(upworkfreelancer.FieldUpworkTopRatedPlusStatus, field.TypeBool, value)
		_node.UpworkTopRatedPlusStatus = value
	}
	if value, ok := ufc.mutation.UpworkSponsored(); ok {
		_spec.SetField(upworkfreelancer.FieldUpworkSponsored, field.TypeBool, value)
		_node.UpworkSponsored = value
	}
	if value, ok := ufc.mutation.UpworkJobSuccessScore(); ok {
		_spec.SetField(upworkfreelancer.FieldUpworkJobSuccessScore, field.TypeFloat64, value)
		_node.UpworkJobSuccessScore = value
	}
	if value, ok := ufc.mutation.UpworkReccomended(); ok {
		_spec.SetField(upworkfreelancer.FieldUpworkReccomended, field.TypeBool, value)
		_node.UpworkReccomended = value
	}
	if value, ok := ufc.mutation.Skills(); ok {
		_spec.SetField(upworkfreelancer.FieldSkills, field.TypeJSON, value)
		_node.Skills = value
	}
	if value, ok := ufc.mutation.AverageRecentEarnings(); ok {
		_spec.SetField(upworkfreelancer.FieldAverageRecentEarnings, field.TypeFloat64, value)
		_node.AverageRecentEarnings = value
	}
	if value, ok := ufc.mutation.CombinedAverageRecentEarnings(); ok {
		_spec.SetField(upworkfreelancer.FieldCombinedAverageRecentEarnings, field.TypeFloat64, value)
		_node.CombinedAverageRecentEarnings = value
	}
	if value, ok := ufc.mutation.CombinedRecentEarnings(); ok {
		_spec.SetField(upworkfreelancer.FieldCombinedRecentEarnings, field.TypeFloat64, value)
		_node.CombinedRecentEarnings = value
	}
	if value, ok := ufc.mutation.CombinedTotalEarnings(); ok {
		_spec.SetField(upworkfreelancer.FieldCombinedTotalEarnings, field.TypeFloat64, value)
		_node.CombinedTotalEarnings = value
	}
	if value, ok := ufc.mutation.CombinedTotalRevenue(); ok {
		_spec.SetField(upworkfreelancer.FieldCombinedTotalRevenue, field.TypeFloat64, value)
		_node.CombinedTotalRevenue = value
	}
	if value, ok := ufc.mutation.RecentEarnings(); ok {
		_spec.SetField(upworkfreelancer.FieldRecentEarnings, field.TypeFloat64, value)
		_node.RecentEarnings = value
	}
	if value, ok := ufc.mutation.TotalRevenue(); ok {
		_spec.SetField(upworkfreelancer.FieldTotalRevenue, field.TypeFloat64, value)
		_node.TotalRevenue = value
	}
	if value, ok := ufc.mutation.UprankScore(); ok {
		_spec.SetField(upworkfreelancer.FieldUprankScore, field.TypeInt, value)
		_node.UprankScore = value
	}
	if value, ok := ufc.mutation.EmbeddedAt(); ok {
		_spec.SetField(upworkfreelancer.FieldEmbeddedAt, field.TypeTime, value)
		_node.EmbeddedAt = value
	}
	if value, ok := ufc.mutation.UprankReccomended(); ok {
		_spec.SetField(upworkfreelancer.FieldUprankReccomended, field.TypeBool, value)
		_node.UprankReccomended = value
	}
	if value, ok := ufc.mutation.UprankReccomendedReasons(); ok {
		_spec.SetField(upworkfreelancer.FieldUprankReccomendedReasons, field.TypeString, value)
		_node.UprankReccomendedReasons = value
	}
	if value, ok := ufc.mutation.UprankNotEnoughData(); ok {
		_spec.SetField(upworkfreelancer.FieldUprankNotEnoughData, field.TypeBool, value)
		_node.UprankNotEnoughData = value
	}
	if nodes := ufc.mutation.UpworkJobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   upworkfreelancer.UpworkJobTable,
			Columns: upworkfreelancer.UpworkJobPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upworkjob.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ufc.mutation.AttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   upworkfreelancer.AttachmentsTable,
			Columns: []string{upworkfreelancer.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachmentref.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ufc.mutation.WorkHistoriesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   upworkfreelancer.WorkHistoriesTable,
			Columns: []string{upworkfreelancer.WorkHistoriesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UpworkFreelancer.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UpworkFreelancerUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ufc *UpworkFreelancerCreate) OnConflict(opts ...sql.ConflictOption) *UpworkFreelancerUpsertOne {
	ufc.conflict = opts
	return &UpworkFreelancerUpsertOne{
		create: ufc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UpworkFreelancer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ufc *UpworkFreelancerCreate) OnConflictColumns(columns ...string) *UpworkFreelancerUpsertOne {
	ufc.conflict = append(ufc.conflict, sql.ConflictColumns(columns...))
	return &UpworkFreelancerUpsertOne{
		create: ufc,
	}
}

type (
	// UpworkFreelancerUpsertOne is the builder for "upsert"-ing
	//  one UpworkFreelancer node.
	UpworkFreelancerUpsertOne struct {
		create *UpworkFreelancerCreate
	}

	// UpworkFreelancerUpsert is the "OnConflict" setter.
	UpworkFreelancerUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *UpworkFreelancerUpsert) SetName(v string) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateName() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldName)
	return u
}

// SetTitle sets the "title" field.
func (u *UpworkFreelancerUpsert) SetTitle(v string) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateTitle() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldTitle)
	return u
}

// SetDescription sets the "description" field.
func (u *UpworkFreelancerUpsert) SetDescription(v string) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateDescription() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldDescription)
	return u
}

// SetCity sets the "city" field.
func (u *UpworkFreelancerUpsert) SetCity(v string) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldCity, v)
	return u
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateCity() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldCity)
	return u
}

// SetCountry sets the "country" field.
func (u *UpworkFreelancerUpsert) SetCountry(v string) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldCountry, v)
	return u
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateCountry() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldCountry)
	return u
}

// SetTimezone sets the "timezone" field.
func (u *UpworkFreelancerUpsert) SetTimezone(v string) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldTimezone, v)
	return u
}

// UpdateTimezone sets the "timezone" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateTimezone() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldTimezone)
	return u
}

// SetCv sets the "cv" field.
func (u *UpworkFreelancerUpsert) SetCv(v string) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldCv, v)
	return u
}

// UpdateCv sets the "cv" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateCv() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldCv)
	return u
}

// SetAiReccomended sets the "ai_reccomended" field.
func (u *UpworkFreelancerUpsert) SetAiReccomended(v bool) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldAiReccomended, v)
	return u
}

// UpdateAiReccomended sets the "ai_reccomended" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateAiReccomended() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldAiReccomended)
	return u
}

// SetFixedChargeAmount sets the "fixed_charge_amount" field.
func (u *UpworkFreelancerUpsert) SetFixedChargeAmount(v float64) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldFixedChargeAmount, v)
	return u
}

// UpdateFixedChargeAmount sets the "fixed_charge_amount" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateFixedChargeAmount() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldFixedChargeAmount)
	return u
}

// AddFixedChargeAmount adds v to the "fixed_charge_amount" field.
func (u *UpworkFreelancerUpsert) AddFixedChargeAmount(v float64) *UpworkFreelancerUpsert {
	u.Add(upworkfreelancer.FieldFixedChargeAmount, v)
	return u
}

// ClearFixedChargeAmount clears the value of the "fixed_charge_amount" field.
func (u *UpworkFreelancerUpsert) ClearFixedChargeAmount() *UpworkFreelancerUpsert {
	u.SetNull(upworkfreelancer.FieldFixedChargeAmount)
	return u
}

// SetFixedChargeCurrency sets the "fixed_charge_currency" field.
func (u *UpworkFreelancerUpsert) SetFixedChargeCurrency(v string) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldFixedChargeCurrency, v)
	return u
}

// UpdateFixedChargeCurrency sets the "fixed_charge_currency" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateFixedChargeCurrency() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldFixedChargeCurrency)
	return u
}

// SetHourlyChargeAmount sets the "hourly_charge_amount" field.
func (u *UpworkFreelancerUpsert) SetHourlyChargeAmount(v float64) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldHourlyChargeAmount, v)
	return u
}

// UpdateHourlyChargeAmount sets the "hourly_charge_amount" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateHourlyChargeAmount() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldHourlyChargeAmount)
	return u
}

// AddHourlyChargeAmount adds v to the "hourly_charge_amount" field.
func (u *UpworkFreelancerUpsert) AddHourlyChargeAmount(v float64) *UpworkFreelancerUpsert {
	u.Add(upworkfreelancer.FieldHourlyChargeAmount, v)
	return u
}

// ClearHourlyChargeAmount clears the value of the "hourly_charge_amount" field.
func (u *UpworkFreelancerUpsert) ClearHourlyChargeAmount() *UpworkFreelancerUpsert {
	u.SetNull(upworkfreelancer.FieldHourlyChargeAmount)
	return u
}

// SetHourlyChargeCurrency sets the "hourly_charge_currency" field.
func (u *UpworkFreelancerUpsert) SetHourlyChargeCurrency(v string) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldHourlyChargeCurrency, v)
	return u
}

// UpdateHourlyChargeCurrency sets the "hourly_charge_currency" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateHourlyChargeCurrency() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldHourlyChargeCurrency)
	return u
}

// SetInvited sets the "invited" field.
func (u *UpworkFreelancerUpsert) SetInvited(v bool) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldInvited, v)
	return u
}

// UpdateInvited sets the "invited" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateInvited() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldInvited)
	return u
}

// SetPhotoURL sets the "photo_url" field.
func (u *UpworkFreelancerUpsert) SetPhotoURL(v string) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldPhotoURL, v)
	return u
}

// UpdatePhotoURL sets the "photo_url" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdatePhotoURL() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldPhotoURL)
	return u
}

// SetRecentHours sets the "recent_hours" field.
func (u *UpworkFreelancerUpsert) SetRecentHours(v float64) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldRecentHours, v)
	return u
}

// UpdateRecentHours sets the "recent_hours" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateRecentHours() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldRecentHours)
	return u
}

// AddRecentHours adds v to the "recent_hours" field.
func (u *UpworkFreelancerUpsert) AddRecentHours(v float64) *UpworkFreelancerUpsert {
	u.Add(upworkfreelancer.FieldRecentHours, v)
	return u
}

// SetTotalHours sets the "total_hours" field.
func (u *UpworkFreelancerUpsert) SetTotalHours(v float64) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldTotalHours, v)
	return u
}

// UpdateTotalHours sets the "total_hours" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateTotalHours() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldTotalHours)
	return u
}

// AddTotalHours adds v to the "total_hours" field.
func (u *UpworkFreelancerUpsert) AddTotalHours(v float64) *UpworkFreelancerUpsert {
	u.Add(upworkfreelancer.FieldTotalHours, v)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UpworkFreelancerUpsert) SetUpdatedAt(v time.Time) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateUpdatedAt() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldUpdatedAt)
	return u
}

// SetTotalPortfolioItems sets the "total_portfolio_items" field.
func (u *UpworkFreelancerUpsert) SetTotalPortfolioItems(v int) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldTotalPortfolioItems, v)
	return u
}

// UpdateTotalPortfolioItems sets the "total_portfolio_items" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateTotalPortfolioItems() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldTotalPortfolioItems)
	return u
}

// AddTotalPortfolioItems adds v to the "total_portfolio_items" field.
func (u *UpworkFreelancerUpsert) AddTotalPortfolioItems(v int) *UpworkFreelancerUpsert {
	u.Add(upworkfreelancer.FieldTotalPortfolioItems, v)
	return u
}

// SetTotalPortfolioV2Items sets the "total_portfolio_v2_items" field.
func (u *UpworkFreelancerUpsert) SetTotalPortfolioV2Items(v int) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldTotalPortfolioV2Items, v)
	return u
}

// UpdateTotalPortfolioV2Items sets the "total_portfolio_v2_items" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateTotalPortfolioV2Items() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldTotalPortfolioV2Items)
	return u
}

// AddTotalPortfolioV2Items adds v to the "total_portfolio_v2_items" field.
func (u *UpworkFreelancerUpsert) AddTotalPortfolioV2Items(v int) *UpworkFreelancerUpsert {
	u.Add(upworkfreelancer.FieldTotalPortfolioV2Items, v)
	return u
}

// SetUpworkTotalFeedback sets the "upwork_total_feedback" field.
func (u *UpworkFreelancerUpsert) SetUpworkTotalFeedback(v float64) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldUpworkTotalFeedback, v)
	return u
}

// UpdateUpworkTotalFeedback sets the "upwork_total_feedback" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateUpworkTotalFeedback() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldUpworkTotalFeedback)
	return u
}

// AddUpworkTotalFeedback adds v to the "upwork_total_feedback" field.
func (u *UpworkFreelancerUpsert) AddUpworkTotalFeedback(v float64) *UpworkFreelancerUpsert {
	u.Add(upworkfreelancer.FieldUpworkTotalFeedback, v)
	return u
}

// SetUpworkRecentFeedback sets the "upwork_recent_feedback" field.
func (u *UpworkFreelancerUpsert) SetUpworkRecentFeedback(v float64) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldUpworkRecentFeedback, v)
	return u
}

// UpdateUpworkRecentFeedback sets the "upwork_recent_feedback" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateUpworkRecentFeedback() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldUpworkRecentFeedback)
	return u
}

// AddUpworkRecentFeedback adds v to the "upwork_recent_feedback" field.
func (u *UpworkFreelancerUpsert) AddUpworkRecentFeedback(v float64) *UpworkFreelancerUpsert {
	u.Add(upworkfreelancer.FieldUpworkRecentFeedback, v)
	return u
}

// SetUpworkTopRatedStatus sets the "upwork_top_rated_status" field.
func (u *UpworkFreelancerUpsert) SetUpworkTopRatedStatus(v bool) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldUpworkTopRatedStatus, v)
	return u
}

// UpdateUpworkTopRatedStatus sets the "upwork_top_rated_status" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateUpworkTopRatedStatus() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldUpworkTopRatedStatus)
	return u
}

// SetUpworkTopRatedPlusStatus sets the "upwork_top_rated_plus_status" field.
func (u *UpworkFreelancerUpsert) SetUpworkTopRatedPlusStatus(v bool) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldUpworkTopRatedPlusStatus, v)
	return u
}

// UpdateUpworkTopRatedPlusStatus sets the "upwork_top_rated_plus_status" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateUpworkTopRatedPlusStatus() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldUpworkTopRatedPlusStatus)
	return u
}

// SetUpworkSponsored sets the "upwork_sponsored" field.
func (u *UpworkFreelancerUpsert) SetUpworkSponsored(v bool) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldUpworkSponsored, v)
	return u
}

// UpdateUpworkSponsored sets the "upwork_sponsored" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateUpworkSponsored() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldUpworkSponsored)
	return u
}

// SetUpworkJobSuccessScore sets the "upwork_job_success_score" field.
func (u *UpworkFreelancerUpsert) SetUpworkJobSuccessScore(v float64) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldUpworkJobSuccessScore, v)
	return u
}

// UpdateUpworkJobSuccessScore sets the "upwork_job_success_score" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateUpworkJobSuccessScore() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldUpworkJobSuccessScore)
	return u
}

// AddUpworkJobSuccessScore adds v to the "upwork_job_success_score" field.
func (u *UpworkFreelancerUpsert) AddUpworkJobSuccessScore(v float64) *UpworkFreelancerUpsert {
	u.Add(upworkfreelancer.FieldUpworkJobSuccessScore, v)
	return u
}

// SetUpworkReccomended sets the "upwork_reccomended" field.
func (u *UpworkFreelancerUpsert) SetUpworkReccomended(v bool) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldUpworkReccomended, v)
	return u
}

// UpdateUpworkReccomended sets the "upwork_reccomended" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateUpworkReccomended() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldUpworkReccomended)
	return u
}

// SetSkills sets the "skills" field.
func (u *UpworkFreelancerUpsert) SetSkills(v []string) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldSkills, v)
	return u
}

// UpdateSkills sets the "skills" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateSkills() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldSkills)
	return u
}

// SetAverageRecentEarnings sets the "average_recent_earnings" field.
func (u *UpworkFreelancerUpsert) SetAverageRecentEarnings(v float64) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldAverageRecentEarnings, v)
	return u
}

// UpdateAverageRecentEarnings sets the "average_recent_earnings" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateAverageRecentEarnings() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldAverageRecentEarnings)
	return u
}

// AddAverageRecentEarnings adds v to the "average_recent_earnings" field.
func (u *UpworkFreelancerUpsert) AddAverageRecentEarnings(v float64) *UpworkFreelancerUpsert {
	u.Add(upworkfreelancer.FieldAverageRecentEarnings, v)
	return u
}

// SetCombinedAverageRecentEarnings sets the "combined_average_recent_earnings" field.
func (u *UpworkFreelancerUpsert) SetCombinedAverageRecentEarnings(v float64) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldCombinedAverageRecentEarnings, v)
	return u
}

// UpdateCombinedAverageRecentEarnings sets the "combined_average_recent_earnings" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateCombinedAverageRecentEarnings() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldCombinedAverageRecentEarnings)
	return u
}

// AddCombinedAverageRecentEarnings adds v to the "combined_average_recent_earnings" field.
func (u *UpworkFreelancerUpsert) AddCombinedAverageRecentEarnings(v float64) *UpworkFreelancerUpsert {
	u.Add(upworkfreelancer.FieldCombinedAverageRecentEarnings, v)
	return u
}

// SetCombinedRecentEarnings sets the "combined_recent_earnings" field.
func (u *UpworkFreelancerUpsert) SetCombinedRecentEarnings(v float64) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldCombinedRecentEarnings, v)
	return u
}

// UpdateCombinedRecentEarnings sets the "combined_recent_earnings" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateCombinedRecentEarnings() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldCombinedRecentEarnings)
	return u
}

// AddCombinedRecentEarnings adds v to the "combined_recent_earnings" field.
func (u *UpworkFreelancerUpsert) AddCombinedRecentEarnings(v float64) *UpworkFreelancerUpsert {
	u.Add(upworkfreelancer.FieldCombinedRecentEarnings, v)
	return u
}

// SetCombinedTotalEarnings sets the "combined_total_earnings" field.
func (u *UpworkFreelancerUpsert) SetCombinedTotalEarnings(v float64) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldCombinedTotalEarnings, v)
	return u
}

// UpdateCombinedTotalEarnings sets the "combined_total_earnings" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateCombinedTotalEarnings() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldCombinedTotalEarnings)
	return u
}

// AddCombinedTotalEarnings adds v to the "combined_total_earnings" field.
func (u *UpworkFreelancerUpsert) AddCombinedTotalEarnings(v float64) *UpworkFreelancerUpsert {
	u.Add(upworkfreelancer.FieldCombinedTotalEarnings, v)
	return u
}

// SetCombinedTotalRevenue sets the "combined_total_revenue" field.
func (u *UpworkFreelancerUpsert) SetCombinedTotalRevenue(v float64) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldCombinedTotalRevenue, v)
	return u
}

// UpdateCombinedTotalRevenue sets the "combined_total_revenue" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateCombinedTotalRevenue() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldCombinedTotalRevenue)
	return u
}

// AddCombinedTotalRevenue adds v to the "combined_total_revenue" field.
func (u *UpworkFreelancerUpsert) AddCombinedTotalRevenue(v float64) *UpworkFreelancerUpsert {
	u.Add(upworkfreelancer.FieldCombinedTotalRevenue, v)
	return u
}

// SetRecentEarnings sets the "recent_earnings" field.
func (u *UpworkFreelancerUpsert) SetRecentEarnings(v float64) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldRecentEarnings, v)
	return u
}

// UpdateRecentEarnings sets the "recent_earnings" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateRecentEarnings() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldRecentEarnings)
	return u
}

// AddRecentEarnings adds v to the "recent_earnings" field.
func (u *UpworkFreelancerUpsert) AddRecentEarnings(v float64) *UpworkFreelancerUpsert {
	u.Add(upworkfreelancer.FieldRecentEarnings, v)
	return u
}

// SetTotalRevenue sets the "total_revenue" field.
func (u *UpworkFreelancerUpsert) SetTotalRevenue(v float64) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldTotalRevenue, v)
	return u
}

// UpdateTotalRevenue sets the "total_revenue" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateTotalRevenue() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldTotalRevenue)
	return u
}

// AddTotalRevenue adds v to the "total_revenue" field.
func (u *UpworkFreelancerUpsert) AddTotalRevenue(v float64) *UpworkFreelancerUpsert {
	u.Add(upworkfreelancer.FieldTotalRevenue, v)
	return u
}

// SetUprankScore sets the "uprank_score" field.
func (u *UpworkFreelancerUpsert) SetUprankScore(v int) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldUprankScore, v)
	return u
}

// UpdateUprankScore sets the "uprank_score" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateUprankScore() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldUprankScore)
	return u
}

// AddUprankScore adds v to the "uprank_score" field.
func (u *UpworkFreelancerUpsert) AddUprankScore(v int) *UpworkFreelancerUpsert {
	u.Add(upworkfreelancer.FieldUprankScore, v)
	return u
}

// ClearUprankScore clears the value of the "uprank_score" field.
func (u *UpworkFreelancerUpsert) ClearUprankScore() *UpworkFreelancerUpsert {
	u.SetNull(upworkfreelancer.FieldUprankScore)
	return u
}

// SetEmbeddedAt sets the "embedded_at" field.
func (u *UpworkFreelancerUpsert) SetEmbeddedAt(v time.Time) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldEmbeddedAt, v)
	return u
}

// UpdateEmbeddedAt sets the "embedded_at" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateEmbeddedAt() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldEmbeddedAt)
	return u
}

// ClearEmbeddedAt clears the value of the "embedded_at" field.
func (u *UpworkFreelancerUpsert) ClearEmbeddedAt() *UpworkFreelancerUpsert {
	u.SetNull(upworkfreelancer.FieldEmbeddedAt)
	return u
}

// SetUprankReccomended sets the "uprank_reccomended" field.
func (u *UpworkFreelancerUpsert) SetUprankReccomended(v bool) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldUprankReccomended, v)
	return u
}

// UpdateUprankReccomended sets the "uprank_reccomended" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateUprankReccomended() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldUprankReccomended)
	return u
}

// ClearUprankReccomended clears the value of the "uprank_reccomended" field.
func (u *UpworkFreelancerUpsert) ClearUprankReccomended() *UpworkFreelancerUpsert {
	u.SetNull(upworkfreelancer.FieldUprankReccomended)
	return u
}

// SetUprankReccomendedReasons sets the "uprank_reccomended_reasons" field.
func (u *UpworkFreelancerUpsert) SetUprankReccomendedReasons(v string) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldUprankReccomendedReasons, v)
	return u
}

// UpdateUprankReccomendedReasons sets the "uprank_reccomended_reasons" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateUprankReccomendedReasons() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldUprankReccomendedReasons)
	return u
}

// ClearUprankReccomendedReasons clears the value of the "uprank_reccomended_reasons" field.
func (u *UpworkFreelancerUpsert) ClearUprankReccomendedReasons() *UpworkFreelancerUpsert {
	u.SetNull(upworkfreelancer.FieldUprankReccomendedReasons)
	return u
}

// SetUprankNotEnoughData sets the "uprank_not_enough_data" field.
func (u *UpworkFreelancerUpsert) SetUprankNotEnoughData(v bool) *UpworkFreelancerUpsert {
	u.Set(upworkfreelancer.FieldUprankNotEnoughData, v)
	return u
}

// UpdateUprankNotEnoughData sets the "uprank_not_enough_data" field to the value that was provided on create.
func (u *UpworkFreelancerUpsert) UpdateUprankNotEnoughData() *UpworkFreelancerUpsert {
	u.SetExcluded(upworkfreelancer.FieldUprankNotEnoughData)
	return u
}

// ClearUprankNotEnoughData clears the value of the "uprank_not_enough_data" field.
func (u *UpworkFreelancerUpsert) ClearUprankNotEnoughData() *UpworkFreelancerUpsert {
	u.SetNull(upworkfreelancer.FieldUprankNotEnoughData)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.UpworkFreelancer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(upworkfreelancer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UpworkFreelancerUpsertOne) UpdateNewValues() *UpworkFreelancerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(upworkfreelancer.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(upworkfreelancer.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UpworkFreelancer.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *UpworkFreelancerUpsertOne) Ignore() *UpworkFreelancerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UpworkFreelancerUpsertOne) DoNothing() *UpworkFreelancerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UpworkFreelancerCreate.OnConflict
// documentation for more info.
func (u *UpworkFreelancerUpsertOne) Update(set func(*UpworkFreelancerUpsert)) *UpworkFreelancerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UpworkFreelancerUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *UpworkFreelancerUpsertOne) SetName(v string) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateName() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateName()
	})
}

// SetTitle sets the "title" field.
func (u *UpworkFreelancerUpsertOne) SetTitle(v string) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateTitle() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *UpworkFreelancerUpsertOne) SetDescription(v string) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateDescription() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateDescription()
	})
}

// SetCity sets the "city" field.
func (u *UpworkFreelancerUpsertOne) SetCity(v string) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateCity() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateCity()
	})
}

// SetCountry sets the "country" field.
func (u *UpworkFreelancerUpsertOne) SetCountry(v string) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateCountry() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateCountry()
	})
}

// SetTimezone sets the "timezone" field.
func (u *UpworkFreelancerUpsertOne) SetTimezone(v string) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetTimezone(v)
	})
}

// UpdateTimezone sets the "timezone" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateTimezone() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateTimezone()
	})
}

// SetCv sets the "cv" field.
func (u *UpworkFreelancerUpsertOne) SetCv(v string) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetCv(v)
	})
}

// UpdateCv sets the "cv" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateCv() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateCv()
	})
}

// SetAiReccomended sets the "ai_reccomended" field.
func (u *UpworkFreelancerUpsertOne) SetAiReccomended(v bool) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetAiReccomended(v)
	})
}

// UpdateAiReccomended sets the "ai_reccomended" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateAiReccomended() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateAiReccomended()
	})
}

// SetFixedChargeAmount sets the "fixed_charge_amount" field.
func (u *UpworkFreelancerUpsertOne) SetFixedChargeAmount(v float64) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetFixedChargeAmount(v)
	})
}

// AddFixedChargeAmount adds v to the "fixed_charge_amount" field.
func (u *UpworkFreelancerUpsertOne) AddFixedChargeAmount(v float64) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddFixedChargeAmount(v)
	})
}

// UpdateFixedChargeAmount sets the "fixed_charge_amount" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateFixedChargeAmount() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateFixedChargeAmount()
	})
}

// ClearFixedChargeAmount clears the value of the "fixed_charge_amount" field.
func (u *UpworkFreelancerUpsertOne) ClearFixedChargeAmount() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.ClearFixedChargeAmount()
	})
}

// SetFixedChargeCurrency sets the "fixed_charge_currency" field.
func (u *UpworkFreelancerUpsertOne) SetFixedChargeCurrency(v string) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetFixedChargeCurrency(v)
	})
}

// UpdateFixedChargeCurrency sets the "fixed_charge_currency" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateFixedChargeCurrency() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateFixedChargeCurrency()
	})
}

// SetHourlyChargeAmount sets the "hourly_charge_amount" field.
func (u *UpworkFreelancerUpsertOne) SetHourlyChargeAmount(v float64) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetHourlyChargeAmount(v)
	})
}

// AddHourlyChargeAmount adds v to the "hourly_charge_amount" field.
func (u *UpworkFreelancerUpsertOne) AddHourlyChargeAmount(v float64) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddHourlyChargeAmount(v)
	})
}

// UpdateHourlyChargeAmount sets the "hourly_charge_amount" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateHourlyChargeAmount() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateHourlyChargeAmount()
	})
}

// ClearHourlyChargeAmount clears the value of the "hourly_charge_amount" field.
func (u *UpworkFreelancerUpsertOne) ClearHourlyChargeAmount() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.ClearHourlyChargeAmount()
	})
}

// SetHourlyChargeCurrency sets the "hourly_charge_currency" field.
func (u *UpworkFreelancerUpsertOne) SetHourlyChargeCurrency(v string) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetHourlyChargeCurrency(v)
	})
}

// UpdateHourlyChargeCurrency sets the "hourly_charge_currency" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateHourlyChargeCurrency() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateHourlyChargeCurrency()
	})
}

// SetInvited sets the "invited" field.
func (u *UpworkFreelancerUpsertOne) SetInvited(v bool) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetInvited(v)
	})
}

// UpdateInvited sets the "invited" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateInvited() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateInvited()
	})
}

// SetPhotoURL sets the "photo_url" field.
func (u *UpworkFreelancerUpsertOne) SetPhotoURL(v string) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetPhotoURL(v)
	})
}

// UpdatePhotoURL sets the "photo_url" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdatePhotoURL() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdatePhotoURL()
	})
}

// SetRecentHours sets the "recent_hours" field.
func (u *UpworkFreelancerUpsertOne) SetRecentHours(v float64) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetRecentHours(v)
	})
}

// AddRecentHours adds v to the "recent_hours" field.
func (u *UpworkFreelancerUpsertOne) AddRecentHours(v float64) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddRecentHours(v)
	})
}

// UpdateRecentHours sets the "recent_hours" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateRecentHours() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateRecentHours()
	})
}

// SetTotalHours sets the "total_hours" field.
func (u *UpworkFreelancerUpsertOne) SetTotalHours(v float64) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetTotalHours(v)
	})
}

// AddTotalHours adds v to the "total_hours" field.
func (u *UpworkFreelancerUpsertOne) AddTotalHours(v float64) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddTotalHours(v)
	})
}

// UpdateTotalHours sets the "total_hours" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateTotalHours() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateTotalHours()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UpworkFreelancerUpsertOne) SetUpdatedAt(v time.Time) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateUpdatedAt() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTotalPortfolioItems sets the "total_portfolio_items" field.
func (u *UpworkFreelancerUpsertOne) SetTotalPortfolioItems(v int) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetTotalPortfolioItems(v)
	})
}

// AddTotalPortfolioItems adds v to the "total_portfolio_items" field.
func (u *UpworkFreelancerUpsertOne) AddTotalPortfolioItems(v int) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddTotalPortfolioItems(v)
	})
}

// UpdateTotalPortfolioItems sets the "total_portfolio_items" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateTotalPortfolioItems() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateTotalPortfolioItems()
	})
}

// SetTotalPortfolioV2Items sets the "total_portfolio_v2_items" field.
func (u *UpworkFreelancerUpsertOne) SetTotalPortfolioV2Items(v int) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetTotalPortfolioV2Items(v)
	})
}

// AddTotalPortfolioV2Items adds v to the "total_portfolio_v2_items" field.
func (u *UpworkFreelancerUpsertOne) AddTotalPortfolioV2Items(v int) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddTotalPortfolioV2Items(v)
	})
}

// UpdateTotalPortfolioV2Items sets the "total_portfolio_v2_items" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateTotalPortfolioV2Items() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateTotalPortfolioV2Items()
	})
}

// SetUpworkTotalFeedback sets the "upwork_total_feedback" field.
func (u *UpworkFreelancerUpsertOne) SetUpworkTotalFeedback(v float64) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetUpworkTotalFeedback(v)
	})
}

// AddUpworkTotalFeedback adds v to the "upwork_total_feedback" field.
func (u *UpworkFreelancerUpsertOne) AddUpworkTotalFeedback(v float64) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddUpworkTotalFeedback(v)
	})
}

// UpdateUpworkTotalFeedback sets the "upwork_total_feedback" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateUpworkTotalFeedback() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateUpworkTotalFeedback()
	})
}

// SetUpworkRecentFeedback sets the "upwork_recent_feedback" field.
func (u *UpworkFreelancerUpsertOne) SetUpworkRecentFeedback(v float64) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetUpworkRecentFeedback(v)
	})
}

// AddUpworkRecentFeedback adds v to the "upwork_recent_feedback" field.
func (u *UpworkFreelancerUpsertOne) AddUpworkRecentFeedback(v float64) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddUpworkRecentFeedback(v)
	})
}

// UpdateUpworkRecentFeedback sets the "upwork_recent_feedback" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateUpworkRecentFeedback() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateUpworkRecentFeedback()
	})
}

// SetUpworkTopRatedStatus sets the "upwork_top_rated_status" field.
func (u *UpworkFreelancerUpsertOne) SetUpworkTopRatedStatus(v bool) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetUpworkTopRatedStatus(v)
	})
}

// UpdateUpworkTopRatedStatus sets the "upwork_top_rated_status" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateUpworkTopRatedStatus() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateUpworkTopRatedStatus()
	})
}

// SetUpworkTopRatedPlusStatus sets the "upwork_top_rated_plus_status" field.
func (u *UpworkFreelancerUpsertOne) SetUpworkTopRatedPlusStatus(v bool) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetUpworkTopRatedPlusStatus(v)
	})
}

// UpdateUpworkTopRatedPlusStatus sets the "upwork_top_rated_plus_status" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateUpworkTopRatedPlusStatus() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateUpworkTopRatedPlusStatus()
	})
}

// SetUpworkSponsored sets the "upwork_sponsored" field.
func (u *UpworkFreelancerUpsertOne) SetUpworkSponsored(v bool) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetUpworkSponsored(v)
	})
}

// UpdateUpworkSponsored sets the "upwork_sponsored" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateUpworkSponsored() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateUpworkSponsored()
	})
}

// SetUpworkJobSuccessScore sets the "upwork_job_success_score" field.
func (u *UpworkFreelancerUpsertOne) SetUpworkJobSuccessScore(v float64) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetUpworkJobSuccessScore(v)
	})
}

// AddUpworkJobSuccessScore adds v to the "upwork_job_success_score" field.
func (u *UpworkFreelancerUpsertOne) AddUpworkJobSuccessScore(v float64) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddUpworkJobSuccessScore(v)
	})
}

// UpdateUpworkJobSuccessScore sets the "upwork_job_success_score" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateUpworkJobSuccessScore() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateUpworkJobSuccessScore()
	})
}

// SetUpworkReccomended sets the "upwork_reccomended" field.
func (u *UpworkFreelancerUpsertOne) SetUpworkReccomended(v bool) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetUpworkReccomended(v)
	})
}

// UpdateUpworkReccomended sets the "upwork_reccomended" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateUpworkReccomended() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateUpworkReccomended()
	})
}

// SetSkills sets the "skills" field.
func (u *UpworkFreelancerUpsertOne) SetSkills(v []string) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetSkills(v)
	})
}

// UpdateSkills sets the "skills" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateSkills() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateSkills()
	})
}

// SetAverageRecentEarnings sets the "average_recent_earnings" field.
func (u *UpworkFreelancerUpsertOne) SetAverageRecentEarnings(v float64) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetAverageRecentEarnings(v)
	})
}

// AddAverageRecentEarnings adds v to the "average_recent_earnings" field.
func (u *UpworkFreelancerUpsertOne) AddAverageRecentEarnings(v float64) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddAverageRecentEarnings(v)
	})
}

// UpdateAverageRecentEarnings sets the "average_recent_earnings" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateAverageRecentEarnings() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateAverageRecentEarnings()
	})
}

// SetCombinedAverageRecentEarnings sets the "combined_average_recent_earnings" field.
func (u *UpworkFreelancerUpsertOne) SetCombinedAverageRecentEarnings(v float64) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetCombinedAverageRecentEarnings(v)
	})
}

// AddCombinedAverageRecentEarnings adds v to the "combined_average_recent_earnings" field.
func (u *UpworkFreelancerUpsertOne) AddCombinedAverageRecentEarnings(v float64) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddCombinedAverageRecentEarnings(v)
	})
}

// UpdateCombinedAverageRecentEarnings sets the "combined_average_recent_earnings" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateCombinedAverageRecentEarnings() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateCombinedAverageRecentEarnings()
	})
}

// SetCombinedRecentEarnings sets the "combined_recent_earnings" field.
func (u *UpworkFreelancerUpsertOne) SetCombinedRecentEarnings(v float64) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetCombinedRecentEarnings(v)
	})
}

// AddCombinedRecentEarnings adds v to the "combined_recent_earnings" field.
func (u *UpworkFreelancerUpsertOne) AddCombinedRecentEarnings(v float64) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddCombinedRecentEarnings(v)
	})
}

// UpdateCombinedRecentEarnings sets the "combined_recent_earnings" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateCombinedRecentEarnings() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateCombinedRecentEarnings()
	})
}

// SetCombinedTotalEarnings sets the "combined_total_earnings" field.
func (u *UpworkFreelancerUpsertOne) SetCombinedTotalEarnings(v float64) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetCombinedTotalEarnings(v)
	})
}

// AddCombinedTotalEarnings adds v to the "combined_total_earnings" field.
func (u *UpworkFreelancerUpsertOne) AddCombinedTotalEarnings(v float64) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddCombinedTotalEarnings(v)
	})
}

// UpdateCombinedTotalEarnings sets the "combined_total_earnings" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateCombinedTotalEarnings() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateCombinedTotalEarnings()
	})
}

// SetCombinedTotalRevenue sets the "combined_total_revenue" field.
func (u *UpworkFreelancerUpsertOne) SetCombinedTotalRevenue(v float64) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetCombinedTotalRevenue(v)
	})
}

// AddCombinedTotalRevenue adds v to the "combined_total_revenue" field.
func (u *UpworkFreelancerUpsertOne) AddCombinedTotalRevenue(v float64) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddCombinedTotalRevenue(v)
	})
}

// UpdateCombinedTotalRevenue sets the "combined_total_revenue" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateCombinedTotalRevenue() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateCombinedTotalRevenue()
	})
}

// SetRecentEarnings sets the "recent_earnings" field.
func (u *UpworkFreelancerUpsertOne) SetRecentEarnings(v float64) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetRecentEarnings(v)
	})
}

// AddRecentEarnings adds v to the "recent_earnings" field.
func (u *UpworkFreelancerUpsertOne) AddRecentEarnings(v float64) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddRecentEarnings(v)
	})
}

// UpdateRecentEarnings sets the "recent_earnings" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateRecentEarnings() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateRecentEarnings()
	})
}

// SetTotalRevenue sets the "total_revenue" field.
func (u *UpworkFreelancerUpsertOne) SetTotalRevenue(v float64) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetTotalRevenue(v)
	})
}

// AddTotalRevenue adds v to the "total_revenue" field.
func (u *UpworkFreelancerUpsertOne) AddTotalRevenue(v float64) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddTotalRevenue(v)
	})
}

// UpdateTotalRevenue sets the "total_revenue" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateTotalRevenue() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateTotalRevenue()
	})
}

// SetUprankScore sets the "uprank_score" field.
func (u *UpworkFreelancerUpsertOne) SetUprankScore(v int) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetUprankScore(v)
	})
}

// AddUprankScore adds v to the "uprank_score" field.
func (u *UpworkFreelancerUpsertOne) AddUprankScore(v int) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddUprankScore(v)
	})
}

// UpdateUprankScore sets the "uprank_score" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateUprankScore() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateUprankScore()
	})
}

// ClearUprankScore clears the value of the "uprank_score" field.
func (u *UpworkFreelancerUpsertOne) ClearUprankScore() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.ClearUprankScore()
	})
}

// SetEmbeddedAt sets the "embedded_at" field.
func (u *UpworkFreelancerUpsertOne) SetEmbeddedAt(v time.Time) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetEmbeddedAt(v)
	})
}

// UpdateEmbeddedAt sets the "embedded_at" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateEmbeddedAt() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateEmbeddedAt()
	})
}

// ClearEmbeddedAt clears the value of the "embedded_at" field.
func (u *UpworkFreelancerUpsertOne) ClearEmbeddedAt() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.ClearEmbeddedAt()
	})
}

// SetUprankReccomended sets the "uprank_reccomended" field.
func (u *UpworkFreelancerUpsertOne) SetUprankReccomended(v bool) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetUprankReccomended(v)
	})
}

// UpdateUprankReccomended sets the "uprank_reccomended" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateUprankReccomended() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateUprankReccomended()
	})
}

// ClearUprankReccomended clears the value of the "uprank_reccomended" field.
func (u *UpworkFreelancerUpsertOne) ClearUprankReccomended() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.ClearUprankReccomended()
	})
}

// SetUprankReccomendedReasons sets the "uprank_reccomended_reasons" field.
func (u *UpworkFreelancerUpsertOne) SetUprankReccomendedReasons(v string) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetUprankReccomendedReasons(v)
	})
}

// UpdateUprankReccomendedReasons sets the "uprank_reccomended_reasons" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateUprankReccomendedReasons() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateUprankReccomendedReasons()
	})
}

// ClearUprankReccomendedReasons clears the value of the "uprank_reccomended_reasons" field.
func (u *UpworkFreelancerUpsertOne) ClearUprankReccomendedReasons() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.ClearUprankReccomendedReasons()
	})
}

// SetUprankNotEnoughData sets the "uprank_not_enough_data" field.
func (u *UpworkFreelancerUpsertOne) SetUprankNotEnoughData(v bool) *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetUprankNotEnoughData(v)
	})
}

// UpdateUprankNotEnoughData sets the "uprank_not_enough_data" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertOne) UpdateUprankNotEnoughData() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateUprankNotEnoughData()
	})
}

// ClearUprankNotEnoughData clears the value of the "uprank_not_enough_data" field.
func (u *UpworkFreelancerUpsertOne) ClearUprankNotEnoughData() *UpworkFreelancerUpsertOne {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.ClearUprankNotEnoughData()
	})
}

// Exec executes the query.
func (u *UpworkFreelancerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UpworkFreelancerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UpworkFreelancerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *UpworkFreelancerUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: UpworkFreelancerUpsertOne.ID is not supported by MySQL driver. Use UpworkFreelancerUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *UpworkFreelancerUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// UpworkFreelancerCreateBulk is the builder for creating many UpworkFreelancer entities in bulk.
type UpworkFreelancerCreateBulk struct {
	config
	err      error
	builders []*UpworkFreelancerCreate
	conflict []sql.ConflictOption
}

// Save creates the UpworkFreelancer entities in the database.
func (ufcb *UpworkFreelancerCreateBulk) Save(ctx context.Context) ([]*UpworkFreelancer, error) {
	if ufcb.err != nil {
		return nil, ufcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ufcb.builders))
	nodes := make([]*UpworkFreelancer, len(ufcb.builders))
	mutators := make([]Mutator, len(ufcb.builders))
	for i := range ufcb.builders {
		func(i int, root context.Context) {
			builder := ufcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UpworkFreelancerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ufcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ufcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ufcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ufcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ufcb *UpworkFreelancerCreateBulk) SaveX(ctx context.Context) []*UpworkFreelancer {
	v, err := ufcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ufcb *UpworkFreelancerCreateBulk) Exec(ctx context.Context) error {
	_, err := ufcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ufcb *UpworkFreelancerCreateBulk) ExecX(ctx context.Context) {
	if err := ufcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.UpworkFreelancer.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.UpworkFreelancerUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ufcb *UpworkFreelancerCreateBulk) OnConflict(opts ...sql.ConflictOption) *UpworkFreelancerUpsertBulk {
	ufcb.conflict = opts
	return &UpworkFreelancerUpsertBulk{
		create: ufcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.UpworkFreelancer.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ufcb *UpworkFreelancerCreateBulk) OnConflictColumns(columns ...string) *UpworkFreelancerUpsertBulk {
	ufcb.conflict = append(ufcb.conflict, sql.ConflictColumns(columns...))
	return &UpworkFreelancerUpsertBulk{
		create: ufcb,
	}
}

// UpworkFreelancerUpsertBulk is the builder for "upsert"-ing
// a bulk of UpworkFreelancer nodes.
type UpworkFreelancerUpsertBulk struct {
	create *UpworkFreelancerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.UpworkFreelancer.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(upworkfreelancer.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *UpworkFreelancerUpsertBulk) UpdateNewValues() *UpworkFreelancerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(upworkfreelancer.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(upworkfreelancer.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.UpworkFreelancer.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *UpworkFreelancerUpsertBulk) Ignore() *UpworkFreelancerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *UpworkFreelancerUpsertBulk) DoNothing() *UpworkFreelancerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the UpworkFreelancerCreateBulk.OnConflict
// documentation for more info.
func (u *UpworkFreelancerUpsertBulk) Update(set func(*UpworkFreelancerUpsert)) *UpworkFreelancerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&UpworkFreelancerUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *UpworkFreelancerUpsertBulk) SetName(v string) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateName() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateName()
	})
}

// SetTitle sets the "title" field.
func (u *UpworkFreelancerUpsertBulk) SetTitle(v string) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateTitle() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateTitle()
	})
}

// SetDescription sets the "description" field.
func (u *UpworkFreelancerUpsertBulk) SetDescription(v string) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateDescription() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateDescription()
	})
}

// SetCity sets the "city" field.
func (u *UpworkFreelancerUpsertBulk) SetCity(v string) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetCity(v)
	})
}

// UpdateCity sets the "city" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateCity() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateCity()
	})
}

// SetCountry sets the "country" field.
func (u *UpworkFreelancerUpsertBulk) SetCountry(v string) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetCountry(v)
	})
}

// UpdateCountry sets the "country" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateCountry() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateCountry()
	})
}

// SetTimezone sets the "timezone" field.
func (u *UpworkFreelancerUpsertBulk) SetTimezone(v string) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetTimezone(v)
	})
}

// UpdateTimezone sets the "timezone" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateTimezone() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateTimezone()
	})
}

// SetCv sets the "cv" field.
func (u *UpworkFreelancerUpsertBulk) SetCv(v string) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetCv(v)
	})
}

// UpdateCv sets the "cv" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateCv() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateCv()
	})
}

// SetAiReccomended sets the "ai_reccomended" field.
func (u *UpworkFreelancerUpsertBulk) SetAiReccomended(v bool) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetAiReccomended(v)
	})
}

// UpdateAiReccomended sets the "ai_reccomended" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateAiReccomended() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateAiReccomended()
	})
}

// SetFixedChargeAmount sets the "fixed_charge_amount" field.
func (u *UpworkFreelancerUpsertBulk) SetFixedChargeAmount(v float64) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetFixedChargeAmount(v)
	})
}

// AddFixedChargeAmount adds v to the "fixed_charge_amount" field.
func (u *UpworkFreelancerUpsertBulk) AddFixedChargeAmount(v float64) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddFixedChargeAmount(v)
	})
}

// UpdateFixedChargeAmount sets the "fixed_charge_amount" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateFixedChargeAmount() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateFixedChargeAmount()
	})
}

// ClearFixedChargeAmount clears the value of the "fixed_charge_amount" field.
func (u *UpworkFreelancerUpsertBulk) ClearFixedChargeAmount() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.ClearFixedChargeAmount()
	})
}

// SetFixedChargeCurrency sets the "fixed_charge_currency" field.
func (u *UpworkFreelancerUpsertBulk) SetFixedChargeCurrency(v string) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetFixedChargeCurrency(v)
	})
}

// UpdateFixedChargeCurrency sets the "fixed_charge_currency" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateFixedChargeCurrency() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateFixedChargeCurrency()
	})
}

// SetHourlyChargeAmount sets the "hourly_charge_amount" field.
func (u *UpworkFreelancerUpsertBulk) SetHourlyChargeAmount(v float64) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetHourlyChargeAmount(v)
	})
}

// AddHourlyChargeAmount adds v to the "hourly_charge_amount" field.
func (u *UpworkFreelancerUpsertBulk) AddHourlyChargeAmount(v float64) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddHourlyChargeAmount(v)
	})
}

// UpdateHourlyChargeAmount sets the "hourly_charge_amount" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateHourlyChargeAmount() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateHourlyChargeAmount()
	})
}

// ClearHourlyChargeAmount clears the value of the "hourly_charge_amount" field.
func (u *UpworkFreelancerUpsertBulk) ClearHourlyChargeAmount() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.ClearHourlyChargeAmount()
	})
}

// SetHourlyChargeCurrency sets the "hourly_charge_currency" field.
func (u *UpworkFreelancerUpsertBulk) SetHourlyChargeCurrency(v string) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetHourlyChargeCurrency(v)
	})
}

// UpdateHourlyChargeCurrency sets the "hourly_charge_currency" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateHourlyChargeCurrency() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateHourlyChargeCurrency()
	})
}

// SetInvited sets the "invited" field.
func (u *UpworkFreelancerUpsertBulk) SetInvited(v bool) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetInvited(v)
	})
}

// UpdateInvited sets the "invited" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateInvited() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateInvited()
	})
}

// SetPhotoURL sets the "photo_url" field.
func (u *UpworkFreelancerUpsertBulk) SetPhotoURL(v string) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetPhotoURL(v)
	})
}

// UpdatePhotoURL sets the "photo_url" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdatePhotoURL() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdatePhotoURL()
	})
}

// SetRecentHours sets the "recent_hours" field.
func (u *UpworkFreelancerUpsertBulk) SetRecentHours(v float64) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetRecentHours(v)
	})
}

// AddRecentHours adds v to the "recent_hours" field.
func (u *UpworkFreelancerUpsertBulk) AddRecentHours(v float64) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddRecentHours(v)
	})
}

// UpdateRecentHours sets the "recent_hours" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateRecentHours() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateRecentHours()
	})
}

// SetTotalHours sets the "total_hours" field.
func (u *UpworkFreelancerUpsertBulk) SetTotalHours(v float64) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetTotalHours(v)
	})
}

// AddTotalHours adds v to the "total_hours" field.
func (u *UpworkFreelancerUpsertBulk) AddTotalHours(v float64) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddTotalHours(v)
	})
}

// UpdateTotalHours sets the "total_hours" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateTotalHours() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateTotalHours()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *UpworkFreelancerUpsertBulk) SetUpdatedAt(v time.Time) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateUpdatedAt() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetTotalPortfolioItems sets the "total_portfolio_items" field.
func (u *UpworkFreelancerUpsertBulk) SetTotalPortfolioItems(v int) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetTotalPortfolioItems(v)
	})
}

// AddTotalPortfolioItems adds v to the "total_portfolio_items" field.
func (u *UpworkFreelancerUpsertBulk) AddTotalPortfolioItems(v int) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddTotalPortfolioItems(v)
	})
}

// UpdateTotalPortfolioItems sets the "total_portfolio_items" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateTotalPortfolioItems() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateTotalPortfolioItems()
	})
}

// SetTotalPortfolioV2Items sets the "total_portfolio_v2_items" field.
func (u *UpworkFreelancerUpsertBulk) SetTotalPortfolioV2Items(v int) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetTotalPortfolioV2Items(v)
	})
}

// AddTotalPortfolioV2Items adds v to the "total_portfolio_v2_items" field.
func (u *UpworkFreelancerUpsertBulk) AddTotalPortfolioV2Items(v int) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddTotalPortfolioV2Items(v)
	})
}

// UpdateTotalPortfolioV2Items sets the "total_portfolio_v2_items" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateTotalPortfolioV2Items() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateTotalPortfolioV2Items()
	})
}

// SetUpworkTotalFeedback sets the "upwork_total_feedback" field.
func (u *UpworkFreelancerUpsertBulk) SetUpworkTotalFeedback(v float64) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetUpworkTotalFeedback(v)
	})
}

// AddUpworkTotalFeedback adds v to the "upwork_total_feedback" field.
func (u *UpworkFreelancerUpsertBulk) AddUpworkTotalFeedback(v float64) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddUpworkTotalFeedback(v)
	})
}

// UpdateUpworkTotalFeedback sets the "upwork_total_feedback" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateUpworkTotalFeedback() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateUpworkTotalFeedback()
	})
}

// SetUpworkRecentFeedback sets the "upwork_recent_feedback" field.
func (u *UpworkFreelancerUpsertBulk) SetUpworkRecentFeedback(v float64) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetUpworkRecentFeedback(v)
	})
}

// AddUpworkRecentFeedback adds v to the "upwork_recent_feedback" field.
func (u *UpworkFreelancerUpsertBulk) AddUpworkRecentFeedback(v float64) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddUpworkRecentFeedback(v)
	})
}

// UpdateUpworkRecentFeedback sets the "upwork_recent_feedback" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateUpworkRecentFeedback() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateUpworkRecentFeedback()
	})
}

// SetUpworkTopRatedStatus sets the "upwork_top_rated_status" field.
func (u *UpworkFreelancerUpsertBulk) SetUpworkTopRatedStatus(v bool) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetUpworkTopRatedStatus(v)
	})
}

// UpdateUpworkTopRatedStatus sets the "upwork_top_rated_status" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateUpworkTopRatedStatus() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateUpworkTopRatedStatus()
	})
}

// SetUpworkTopRatedPlusStatus sets the "upwork_top_rated_plus_status" field.
func (u *UpworkFreelancerUpsertBulk) SetUpworkTopRatedPlusStatus(v bool) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetUpworkTopRatedPlusStatus(v)
	})
}

// UpdateUpworkTopRatedPlusStatus sets the "upwork_top_rated_plus_status" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateUpworkTopRatedPlusStatus() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateUpworkTopRatedPlusStatus()
	})
}

// SetUpworkSponsored sets the "upwork_sponsored" field.
func (u *UpworkFreelancerUpsertBulk) SetUpworkSponsored(v bool) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetUpworkSponsored(v)
	})
}

// UpdateUpworkSponsored sets the "upwork_sponsored" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateUpworkSponsored() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateUpworkSponsored()
	})
}

// SetUpworkJobSuccessScore sets the "upwork_job_success_score" field.
func (u *UpworkFreelancerUpsertBulk) SetUpworkJobSuccessScore(v float64) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetUpworkJobSuccessScore(v)
	})
}

// AddUpworkJobSuccessScore adds v to the "upwork_job_success_score" field.
func (u *UpworkFreelancerUpsertBulk) AddUpworkJobSuccessScore(v float64) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddUpworkJobSuccessScore(v)
	})
}

// UpdateUpworkJobSuccessScore sets the "upwork_job_success_score" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateUpworkJobSuccessScore() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateUpworkJobSuccessScore()
	})
}

// SetUpworkReccomended sets the "upwork_reccomended" field.
func (u *UpworkFreelancerUpsertBulk) SetUpworkReccomended(v bool) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetUpworkReccomended(v)
	})
}

// UpdateUpworkReccomended sets the "upwork_reccomended" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateUpworkReccomended() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateUpworkReccomended()
	})
}

// SetSkills sets the "skills" field.
func (u *UpworkFreelancerUpsertBulk) SetSkills(v []string) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetSkills(v)
	})
}

// UpdateSkills sets the "skills" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateSkills() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateSkills()
	})
}

// SetAverageRecentEarnings sets the "average_recent_earnings" field.
func (u *UpworkFreelancerUpsertBulk) SetAverageRecentEarnings(v float64) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetAverageRecentEarnings(v)
	})
}

// AddAverageRecentEarnings adds v to the "average_recent_earnings" field.
func (u *UpworkFreelancerUpsertBulk) AddAverageRecentEarnings(v float64) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddAverageRecentEarnings(v)
	})
}

// UpdateAverageRecentEarnings sets the "average_recent_earnings" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateAverageRecentEarnings() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateAverageRecentEarnings()
	})
}

// SetCombinedAverageRecentEarnings sets the "combined_average_recent_earnings" field.
func (u *UpworkFreelancerUpsertBulk) SetCombinedAverageRecentEarnings(v float64) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetCombinedAverageRecentEarnings(v)
	})
}

// AddCombinedAverageRecentEarnings adds v to the "combined_average_recent_earnings" field.
func (u *UpworkFreelancerUpsertBulk) AddCombinedAverageRecentEarnings(v float64) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddCombinedAverageRecentEarnings(v)
	})
}

// UpdateCombinedAverageRecentEarnings sets the "combined_average_recent_earnings" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateCombinedAverageRecentEarnings() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateCombinedAverageRecentEarnings()
	})
}

// SetCombinedRecentEarnings sets the "combined_recent_earnings" field.
func (u *UpworkFreelancerUpsertBulk) SetCombinedRecentEarnings(v float64) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetCombinedRecentEarnings(v)
	})
}

// AddCombinedRecentEarnings adds v to the "combined_recent_earnings" field.
func (u *UpworkFreelancerUpsertBulk) AddCombinedRecentEarnings(v float64) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddCombinedRecentEarnings(v)
	})
}

// UpdateCombinedRecentEarnings sets the "combined_recent_earnings" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateCombinedRecentEarnings() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateCombinedRecentEarnings()
	})
}

// SetCombinedTotalEarnings sets the "combined_total_earnings" field.
func (u *UpworkFreelancerUpsertBulk) SetCombinedTotalEarnings(v float64) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetCombinedTotalEarnings(v)
	})
}

// AddCombinedTotalEarnings adds v to the "combined_total_earnings" field.
func (u *UpworkFreelancerUpsertBulk) AddCombinedTotalEarnings(v float64) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddCombinedTotalEarnings(v)
	})
}

// UpdateCombinedTotalEarnings sets the "combined_total_earnings" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateCombinedTotalEarnings() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateCombinedTotalEarnings()
	})
}

// SetCombinedTotalRevenue sets the "combined_total_revenue" field.
func (u *UpworkFreelancerUpsertBulk) SetCombinedTotalRevenue(v float64) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetCombinedTotalRevenue(v)
	})
}

// AddCombinedTotalRevenue adds v to the "combined_total_revenue" field.
func (u *UpworkFreelancerUpsertBulk) AddCombinedTotalRevenue(v float64) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddCombinedTotalRevenue(v)
	})
}

// UpdateCombinedTotalRevenue sets the "combined_total_revenue" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateCombinedTotalRevenue() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateCombinedTotalRevenue()
	})
}

// SetRecentEarnings sets the "recent_earnings" field.
func (u *UpworkFreelancerUpsertBulk) SetRecentEarnings(v float64) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetRecentEarnings(v)
	})
}

// AddRecentEarnings adds v to the "recent_earnings" field.
func (u *UpworkFreelancerUpsertBulk) AddRecentEarnings(v float64) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddRecentEarnings(v)
	})
}

// UpdateRecentEarnings sets the "recent_earnings" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateRecentEarnings() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateRecentEarnings()
	})
}

// SetTotalRevenue sets the "total_revenue" field.
func (u *UpworkFreelancerUpsertBulk) SetTotalRevenue(v float64) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetTotalRevenue(v)
	})
}

// AddTotalRevenue adds v to the "total_revenue" field.
func (u *UpworkFreelancerUpsertBulk) AddTotalRevenue(v float64) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddTotalRevenue(v)
	})
}

// UpdateTotalRevenue sets the "total_revenue" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateTotalRevenue() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateTotalRevenue()
	})
}

// SetUprankScore sets the "uprank_score" field.
func (u *UpworkFreelancerUpsertBulk) SetUprankScore(v int) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetUprankScore(v)
	})
}

// AddUprankScore adds v to the "uprank_score" field.
func (u *UpworkFreelancerUpsertBulk) AddUprankScore(v int) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.AddUprankScore(v)
	})
}

// UpdateUprankScore sets the "uprank_score" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateUprankScore() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateUprankScore()
	})
}

// ClearUprankScore clears the value of the "uprank_score" field.
func (u *UpworkFreelancerUpsertBulk) ClearUprankScore() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.ClearUprankScore()
	})
}

// SetEmbeddedAt sets the "embedded_at" field.
func (u *UpworkFreelancerUpsertBulk) SetEmbeddedAt(v time.Time) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetEmbeddedAt(v)
	})
}

// UpdateEmbeddedAt sets the "embedded_at" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateEmbeddedAt() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateEmbeddedAt()
	})
}

// ClearEmbeddedAt clears the value of the "embedded_at" field.
func (u *UpworkFreelancerUpsertBulk) ClearEmbeddedAt() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.ClearEmbeddedAt()
	})
}

// SetUprankReccomended sets the "uprank_reccomended" field.
func (u *UpworkFreelancerUpsertBulk) SetUprankReccomended(v bool) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetUprankReccomended(v)
	})
}

// UpdateUprankReccomended sets the "uprank_reccomended" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateUprankReccomended() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateUprankReccomended()
	})
}

// ClearUprankReccomended clears the value of the "uprank_reccomended" field.
func (u *UpworkFreelancerUpsertBulk) ClearUprankReccomended() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.ClearUprankReccomended()
	})
}

// SetUprankReccomendedReasons sets the "uprank_reccomended_reasons" field.
func (u *UpworkFreelancerUpsertBulk) SetUprankReccomendedReasons(v string) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetUprankReccomendedReasons(v)
	})
}

// UpdateUprankReccomendedReasons sets the "uprank_reccomended_reasons" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateUprankReccomendedReasons() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateUprankReccomendedReasons()
	})
}

// ClearUprankReccomendedReasons clears the value of the "uprank_reccomended_reasons" field.
func (u *UpworkFreelancerUpsertBulk) ClearUprankReccomendedReasons() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.ClearUprankReccomendedReasons()
	})
}

// SetUprankNotEnoughData sets the "uprank_not_enough_data" field.
func (u *UpworkFreelancerUpsertBulk) SetUprankNotEnoughData(v bool) *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.SetUprankNotEnoughData(v)
	})
}

// UpdateUprankNotEnoughData sets the "uprank_not_enough_data" field to the value that was provided on create.
func (u *UpworkFreelancerUpsertBulk) UpdateUprankNotEnoughData() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.UpdateUprankNotEnoughData()
	})
}

// ClearUprankNotEnoughData clears the value of the "uprank_not_enough_data" field.
func (u *UpworkFreelancerUpsertBulk) ClearUprankNotEnoughData() *UpworkFreelancerUpsertBulk {
	return u.Update(func(s *UpworkFreelancerUpsert) {
		s.ClearUprankNotEnoughData()
	})
}

// Exec executes the query.
func (u *UpworkFreelancerUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the UpworkFreelancerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for UpworkFreelancerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *UpworkFreelancerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
