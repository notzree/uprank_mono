// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/notzree/uprank_mono/uprank-backend/main-backend/ent/job"
	"github.com/notzree/uprank_mono/uprank-backend/main-backend/ent/predicate"
	"github.com/notzree/uprank_mono/uprank-backend/main-backend/ent/upworkfreelancer"
	"github.com/notzree/uprank_mono/uprank-backend/main-backend/ent/upworkjob"
	"github.com/notzree/uprank_mono/uprank-backend/main-backend/ent/user"
)

// UpworkJobUpdate is the builder for updating UpworkJob entities.
type UpworkJobUpdate struct {
	config
	hooks    []Hook
	mutation *UpworkJobMutation
}

// Where appends a list predicates to the UpworkJobUpdate builder.
func (uju *UpworkJobUpdate) Where(ps ...predicate.UpworkJob) *UpworkJobUpdate {
	uju.mutation.Where(ps...)
	return uju
}

// SetTitle sets the "title" field.
func (uju *UpworkJobUpdate) SetTitle(s string) *UpworkJobUpdate {
	uju.mutation.SetTitle(s)
	return uju
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (uju *UpworkJobUpdate) SetNillableTitle(s *string) *UpworkJobUpdate {
	if s != nil {
		uju.SetTitle(*s)
	}
	return uju
}

// SetCreatedAt sets the "created_at" field.
func (uju *UpworkJobUpdate) SetCreatedAt(t time.Time) *UpworkJobUpdate {
	uju.mutation.SetCreatedAt(t)
	return uju
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uju *UpworkJobUpdate) SetNillableCreatedAt(t *time.Time) *UpworkJobUpdate {
	if t != nil {
		uju.SetCreatedAt(*t)
	}
	return uju
}

// SetUpdatedAt sets the "updated_at" field.
func (uju *UpworkJobUpdate) SetUpdatedAt(t time.Time) *UpworkJobUpdate {
	uju.mutation.SetUpdatedAt(t)
	return uju
}

// SetEmbeddedAt sets the "embedded_at" field.
func (uju *UpworkJobUpdate) SetEmbeddedAt(t time.Time) *UpworkJobUpdate {
	uju.mutation.SetEmbeddedAt(t)
	return uju
}

// SetNillableEmbeddedAt sets the "embedded_at" field if the given value is not nil.
func (uju *UpworkJobUpdate) SetNillableEmbeddedAt(t *time.Time) *UpworkJobUpdate {
	if t != nil {
		uju.SetEmbeddedAt(*t)
	}
	return uju
}

// ClearEmbeddedAt clears the value of the "embedded_at" field.
func (uju *UpworkJobUpdate) ClearEmbeddedAt() *UpworkJobUpdate {
	uju.mutation.ClearEmbeddedAt()
	return uju
}

// SetRankedAt sets the "ranked_at" field.
func (uju *UpworkJobUpdate) SetRankedAt(t time.Time) *UpworkJobUpdate {
	uju.mutation.SetRankedAt(t)
	return uju
}

// SetNillableRankedAt sets the "ranked_at" field if the given value is not nil.
func (uju *UpworkJobUpdate) SetNillableRankedAt(t *time.Time) *UpworkJobUpdate {
	if t != nil {
		uju.SetRankedAt(*t)
	}
	return uju
}

// ClearRankedAt clears the value of the "ranked_at" field.
func (uju *UpworkJobUpdate) ClearRankedAt() *UpworkJobUpdate {
	uju.mutation.ClearRankedAt()
	return uju
}

// SetLocation sets the "location" field.
func (uju *UpworkJobUpdate) SetLocation(s string) *UpworkJobUpdate {
	uju.mutation.SetLocation(s)
	return uju
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (uju *UpworkJobUpdate) SetNillableLocation(s *string) *UpworkJobUpdate {
	if s != nil {
		uju.SetLocation(*s)
	}
	return uju
}

// ClearLocation clears the value of the "location" field.
func (uju *UpworkJobUpdate) ClearLocation() *UpworkJobUpdate {
	uju.mutation.ClearLocation()
	return uju
}

// SetDescription sets the "description" field.
func (uju *UpworkJobUpdate) SetDescription(s string) *UpworkJobUpdate {
	uju.mutation.SetDescription(s)
	return uju
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (uju *UpworkJobUpdate) SetNillableDescription(s *string) *UpworkJobUpdate {
	if s != nil {
		uju.SetDescription(*s)
	}
	return uju
}

// SetSkills sets the "skills" field.
func (uju *UpworkJobUpdate) SetSkills(s []string) *UpworkJobUpdate {
	uju.mutation.SetSkills(s)
	return uju
}

// AppendSkills appends s to the "skills" field.
func (uju *UpworkJobUpdate) AppendSkills(s []string) *UpworkJobUpdate {
	uju.mutation.AppendSkills(s)
	return uju
}

// ClearSkills clears the value of the "skills" field.
func (uju *UpworkJobUpdate) ClearSkills() *UpworkJobUpdate {
	uju.mutation.ClearSkills()
	return uju
}

// SetExperienceLevel sets the "experience_level" field.
func (uju *UpworkJobUpdate) SetExperienceLevel(s string) *UpworkJobUpdate {
	uju.mutation.SetExperienceLevel(s)
	return uju
}

// SetNillableExperienceLevel sets the "experience_level" field if the given value is not nil.
func (uju *UpworkJobUpdate) SetNillableExperienceLevel(s *string) *UpworkJobUpdate {
	if s != nil {
		uju.SetExperienceLevel(*s)
	}
	return uju
}

// ClearExperienceLevel clears the value of the "experience_level" field.
func (uju *UpworkJobUpdate) ClearExperienceLevel() *UpworkJobUpdate {
	uju.mutation.ClearExperienceLevel()
	return uju
}

// SetHourly sets the "hourly" field.
func (uju *UpworkJobUpdate) SetHourly(b bool) *UpworkJobUpdate {
	uju.mutation.SetHourly(b)
	return uju
}

// SetNillableHourly sets the "hourly" field if the given value is not nil.
func (uju *UpworkJobUpdate) SetNillableHourly(b *bool) *UpworkJobUpdate {
	if b != nil {
		uju.SetHourly(*b)
	}
	return uju
}

// SetFixed sets the "fixed" field.
func (uju *UpworkJobUpdate) SetFixed(b bool) *UpworkJobUpdate {
	uju.mutation.SetFixed(b)
	return uju
}

// SetNillableFixed sets the "fixed" field if the given value is not nil.
func (uju *UpworkJobUpdate) SetNillableFixed(b *bool) *UpworkJobUpdate {
	if b != nil {
		uju.SetFixed(*b)
	}
	return uju
}

// SetHourlyRate sets the "hourly_rate" field.
func (uju *UpworkJobUpdate) SetHourlyRate(f []float32) *UpworkJobUpdate {
	uju.mutation.SetHourlyRate(f)
	return uju
}

// AppendHourlyRate appends f to the "hourly_rate" field.
func (uju *UpworkJobUpdate) AppendHourlyRate(f []float32) *UpworkJobUpdate {
	uju.mutation.AppendHourlyRate(f)
	return uju
}

// ClearHourlyRate clears the value of the "hourly_rate" field.
func (uju *UpworkJobUpdate) ClearHourlyRate() *UpworkJobUpdate {
	uju.mutation.ClearHourlyRate()
	return uju
}

// SetFixedRate sets the "fixed_rate" field.
func (uju *UpworkJobUpdate) SetFixedRate(f float64) *UpworkJobUpdate {
	uju.mutation.ResetFixedRate()
	uju.mutation.SetFixedRate(f)
	return uju
}

// SetNillableFixedRate sets the "fixed_rate" field if the given value is not nil.
func (uju *UpworkJobUpdate) SetNillableFixedRate(f *float64) *UpworkJobUpdate {
	if f != nil {
		uju.SetFixedRate(*f)
	}
	return uju
}

// AddFixedRate adds f to the "fixed_rate" field.
func (uju *UpworkJobUpdate) AddFixedRate(f float64) *UpworkJobUpdate {
	uju.mutation.AddFixedRate(f)
	return uju
}

// ClearFixedRate clears the value of the "fixed_rate" field.
func (uju *UpworkJobUpdate) ClearFixedRate() *UpworkJobUpdate {
	uju.mutation.ClearFixedRate()
	return uju
}

// SetAverageUprankScore sets the "average_uprank_score" field.
func (uju *UpworkJobUpdate) SetAverageUprankScore(f float64) *UpworkJobUpdate {
	uju.mutation.ResetAverageUprankScore()
	uju.mutation.SetAverageUprankScore(f)
	return uju
}

// SetNillableAverageUprankScore sets the "average_uprank_score" field if the given value is not nil.
func (uju *UpworkJobUpdate) SetNillableAverageUprankScore(f *float64) *UpworkJobUpdate {
	if f != nil {
		uju.SetAverageUprankScore(*f)
	}
	return uju
}

// AddAverageUprankScore adds f to the "average_uprank_score" field.
func (uju *UpworkJobUpdate) AddAverageUprankScore(f float64) *UpworkJobUpdate {
	uju.mutation.AddAverageUprankScore(f)
	return uju
}

// ClearAverageUprankScore clears the value of the "average_uprank_score" field.
func (uju *UpworkJobUpdate) ClearAverageUprankScore() *UpworkJobUpdate {
	uju.mutation.ClearAverageUprankScore()
	return uju
}

// SetMaxUprankScore sets the "max_uprank_score" field.
func (uju *UpworkJobUpdate) SetMaxUprankScore(f float64) *UpworkJobUpdate {
	uju.mutation.ResetMaxUprankScore()
	uju.mutation.SetMaxUprankScore(f)
	return uju
}

// SetNillableMaxUprankScore sets the "max_uprank_score" field if the given value is not nil.
func (uju *UpworkJobUpdate) SetNillableMaxUprankScore(f *float64) *UpworkJobUpdate {
	if f != nil {
		uju.SetMaxUprankScore(*f)
	}
	return uju
}

// AddMaxUprankScore adds f to the "max_uprank_score" field.
func (uju *UpworkJobUpdate) AddMaxUprankScore(f float64) *UpworkJobUpdate {
	uju.mutation.AddMaxUprankScore(f)
	return uju
}

// ClearMaxUprankScore clears the value of the "max_uprank_score" field.
func (uju *UpworkJobUpdate) ClearMaxUprankScore() *UpworkJobUpdate {
	uju.mutation.ClearMaxUprankScore()
	return uju
}

// SetMinUprankScore sets the "min_uprank_score" field.
func (uju *UpworkJobUpdate) SetMinUprankScore(f float64) *UpworkJobUpdate {
	uju.mutation.ResetMinUprankScore()
	uju.mutation.SetMinUprankScore(f)
	return uju
}

// SetNillableMinUprankScore sets the "min_uprank_score" field if the given value is not nil.
func (uju *UpworkJobUpdate) SetNillableMinUprankScore(f *float64) *UpworkJobUpdate {
	if f != nil {
		uju.SetMinUprankScore(*f)
	}
	return uju
}

// AddMinUprankScore adds f to the "min_uprank_score" field.
func (uju *UpworkJobUpdate) AddMinUprankScore(f float64) *UpworkJobUpdate {
	uju.mutation.AddMinUprankScore(f)
	return uju
}

// ClearMinUprankScore clears the value of the "min_uprank_score" field.
func (uju *UpworkJobUpdate) ClearMinUprankScore() *UpworkJobUpdate {
	uju.mutation.ClearMinUprankScore()
	return uju
}

// AddUpworkfreelancerIDs adds the "upworkfreelancer" edge to the UpworkFreelancer entity by IDs.
func (uju *UpworkJobUpdate) AddUpworkfreelancerIDs(ids ...string) *UpworkJobUpdate {
	uju.mutation.AddUpworkfreelancerIDs(ids...)
	return uju
}

// AddUpworkfreelancer adds the "upworkfreelancer" edges to the UpworkFreelancer entity.
func (uju *UpworkJobUpdate) AddUpworkfreelancer(u ...*UpworkFreelancer) *UpworkJobUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uju.AddUpworkfreelancerIDs(ids...)
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (uju *UpworkJobUpdate) SetJobID(id uuid.UUID) *UpworkJobUpdate {
	uju.mutation.SetJobID(id)
	return uju
}

// SetJob sets the "job" edge to the Job entity.
func (uju *UpworkJobUpdate) SetJob(j *Job) *UpworkJobUpdate {
	return uju.SetJobID(j.ID)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (uju *UpworkJobUpdate) AddUserIDs(ids ...string) *UpworkJobUpdate {
	uju.mutation.AddUserIDs(ids...)
	return uju
}

// AddUser adds the "user" edges to the User entity.
func (uju *UpworkJobUpdate) AddUser(u ...*User) *UpworkJobUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uju.AddUserIDs(ids...)
}

// Mutation returns the UpworkJobMutation object of the builder.
func (uju *UpworkJobUpdate) Mutation() *UpworkJobMutation {
	return uju.mutation
}

// ClearUpworkfreelancer clears all "upworkfreelancer" edges to the UpworkFreelancer entity.
func (uju *UpworkJobUpdate) ClearUpworkfreelancer() *UpworkJobUpdate {
	uju.mutation.ClearUpworkfreelancer()
	return uju
}

// RemoveUpworkfreelancerIDs removes the "upworkfreelancer" edge to UpworkFreelancer entities by IDs.
func (uju *UpworkJobUpdate) RemoveUpworkfreelancerIDs(ids ...string) *UpworkJobUpdate {
	uju.mutation.RemoveUpworkfreelancerIDs(ids...)
	return uju
}

// RemoveUpworkfreelancer removes "upworkfreelancer" edges to UpworkFreelancer entities.
func (uju *UpworkJobUpdate) RemoveUpworkfreelancer(u ...*UpworkFreelancer) *UpworkJobUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uju.RemoveUpworkfreelancerIDs(ids...)
}

// ClearJob clears the "job" edge to the Job entity.
func (uju *UpworkJobUpdate) ClearJob() *UpworkJobUpdate {
	uju.mutation.ClearJob()
	return uju
}

// ClearUser clears all "user" edges to the User entity.
func (uju *UpworkJobUpdate) ClearUser() *UpworkJobUpdate {
	uju.mutation.ClearUser()
	return uju
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (uju *UpworkJobUpdate) RemoveUserIDs(ids ...string) *UpworkJobUpdate {
	uju.mutation.RemoveUserIDs(ids...)
	return uju
}

// RemoveUser removes "user" edges to User entities.
func (uju *UpworkJobUpdate) RemoveUser(u ...*User) *UpworkJobUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return uju.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uju *UpworkJobUpdate) Save(ctx context.Context) (int, error) {
	uju.defaults()
	return withHooks(ctx, uju.sqlSave, uju.mutation, uju.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uju *UpworkJobUpdate) SaveX(ctx context.Context) int {
	affected, err := uju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uju *UpworkJobUpdate) Exec(ctx context.Context) error {
	_, err := uju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uju *UpworkJobUpdate) ExecX(ctx context.Context) {
	if err := uju.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uju *UpworkJobUpdate) defaults() {
	if _, ok := uju.mutation.UpdatedAt(); !ok {
		v := upworkjob.UpdateDefaultUpdatedAt()
		uju.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uju *UpworkJobUpdate) check() error {
	if v, ok := uju.mutation.Title(); ok {
		if err := upworkjob.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "UpworkJob.title": %w`, err)}
		}
	}
	if v, ok := uju.mutation.Description(); ok {
		if err := upworkjob.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "UpworkJob.description": %w`, err)}
		}
	}
	if _, ok := uju.mutation.JobID(); uju.mutation.JobCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UpworkJob.job"`)
	}
	return nil
}

func (uju *UpworkJobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uju.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(upworkjob.Table, upworkjob.Columns, sqlgraph.NewFieldSpec(upworkjob.FieldID, field.TypeString))
	if ps := uju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uju.mutation.Title(); ok {
		_spec.SetField(upworkjob.FieldTitle, field.TypeString, value)
	}
	if value, ok := uju.mutation.CreatedAt(); ok {
		_spec.SetField(upworkjob.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := uju.mutation.UpdatedAt(); ok {
		_spec.SetField(upworkjob.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uju.mutation.EmbeddedAt(); ok {
		_spec.SetField(upworkjob.FieldEmbeddedAt, field.TypeTime, value)
	}
	if uju.mutation.EmbeddedAtCleared() {
		_spec.ClearField(upworkjob.FieldEmbeddedAt, field.TypeTime)
	}
	if value, ok := uju.mutation.RankedAt(); ok {
		_spec.SetField(upworkjob.FieldRankedAt, field.TypeTime, value)
	}
	if uju.mutation.RankedAtCleared() {
		_spec.ClearField(upworkjob.FieldRankedAt, field.TypeTime)
	}
	if value, ok := uju.mutation.Location(); ok {
		_spec.SetField(upworkjob.FieldLocation, field.TypeString, value)
	}
	if uju.mutation.LocationCleared() {
		_spec.ClearField(upworkjob.FieldLocation, field.TypeString)
	}
	if value, ok := uju.mutation.Description(); ok {
		_spec.SetField(upworkjob.FieldDescription, field.TypeString, value)
	}
	if value, ok := uju.mutation.Skills(); ok {
		_spec.SetField(upworkjob.FieldSkills, field.TypeJSON, value)
	}
	if value, ok := uju.mutation.AppendedSkills(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, upworkjob.FieldSkills, value)
		})
	}
	if uju.mutation.SkillsCleared() {
		_spec.ClearField(upworkjob.FieldSkills, field.TypeJSON)
	}
	if value, ok := uju.mutation.ExperienceLevel(); ok {
		_spec.SetField(upworkjob.FieldExperienceLevel, field.TypeString, value)
	}
	if uju.mutation.ExperienceLevelCleared() {
		_spec.ClearField(upworkjob.FieldExperienceLevel, field.TypeString)
	}
	if value, ok := uju.mutation.Hourly(); ok {
		_spec.SetField(upworkjob.FieldHourly, field.TypeBool, value)
	}
	if value, ok := uju.mutation.Fixed(); ok {
		_spec.SetField(upworkjob.FieldFixed, field.TypeBool, value)
	}
	if value, ok := uju.mutation.HourlyRate(); ok {
		_spec.SetField(upworkjob.FieldHourlyRate, field.TypeJSON, value)
	}
	if value, ok := uju.mutation.AppendedHourlyRate(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, upworkjob.FieldHourlyRate, value)
		})
	}
	if uju.mutation.HourlyRateCleared() {
		_spec.ClearField(upworkjob.FieldHourlyRate, field.TypeJSON)
	}
	if value, ok := uju.mutation.FixedRate(); ok {
		_spec.SetField(upworkjob.FieldFixedRate, field.TypeFloat64, value)
	}
	if value, ok := uju.mutation.AddedFixedRate(); ok {
		_spec.AddField(upworkjob.FieldFixedRate, field.TypeFloat64, value)
	}
	if uju.mutation.FixedRateCleared() {
		_spec.ClearField(upworkjob.FieldFixedRate, field.TypeFloat64)
	}
	if value, ok := uju.mutation.AverageUprankScore(); ok {
		_spec.SetField(upworkjob.FieldAverageUprankScore, field.TypeFloat64, value)
	}
	if value, ok := uju.mutation.AddedAverageUprankScore(); ok {
		_spec.AddField(upworkjob.FieldAverageUprankScore, field.TypeFloat64, value)
	}
	if uju.mutation.AverageUprankScoreCleared() {
		_spec.ClearField(upworkjob.FieldAverageUprankScore, field.TypeFloat64)
	}
	if value, ok := uju.mutation.MaxUprankScore(); ok {
		_spec.SetField(upworkjob.FieldMaxUprankScore, field.TypeFloat64, value)
	}
	if value, ok := uju.mutation.AddedMaxUprankScore(); ok {
		_spec.AddField(upworkjob.FieldMaxUprankScore, field.TypeFloat64, value)
	}
	if uju.mutation.MaxUprankScoreCleared() {
		_spec.ClearField(upworkjob.FieldMaxUprankScore, field.TypeFloat64)
	}
	if value, ok := uju.mutation.MinUprankScore(); ok {
		_spec.SetField(upworkjob.FieldMinUprankScore, field.TypeFloat64, value)
	}
	if value, ok := uju.mutation.AddedMinUprankScore(); ok {
		_spec.AddField(upworkjob.FieldMinUprankScore, field.TypeFloat64, value)
	}
	if uju.mutation.MinUprankScoreCleared() {
		_spec.ClearField(upworkjob.FieldMinUprankScore, field.TypeFloat64)
	}
	if uju.mutation.UpworkfreelancerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   upworkjob.UpworkfreelancerTable,
			Columns: upworkjob.UpworkfreelancerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upworkfreelancer.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uju.mutation.RemovedUpworkfreelancerIDs(); len(nodes) > 0 && !uju.mutation.UpworkfreelancerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   upworkjob.UpworkfreelancerTable,
			Columns: upworkjob.UpworkfreelancerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upworkfreelancer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uju.mutation.UpworkfreelancerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   upworkjob.UpworkfreelancerTable,
			Columns: upworkjob.UpworkfreelancerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upworkfreelancer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uju.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   upworkjob.JobTable,
			Columns: []string{upworkjob.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uju.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   upworkjob.JobTable,
			Columns: []string{upworkjob.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uju.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   upworkjob.UserTable,
			Columns: upworkjob.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uju.mutation.RemovedUserIDs(); len(nodes) > 0 && !uju.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   upworkjob.UserTable,
			Columns: upworkjob.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uju.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   upworkjob.UserTable,
			Columns: upworkjob.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upworkjob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uju.mutation.done = true
	return n, nil
}

// UpworkJobUpdateOne is the builder for updating a single UpworkJob entity.
type UpworkJobUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpworkJobMutation
}

// SetTitle sets the "title" field.
func (ujuo *UpworkJobUpdateOne) SetTitle(s string) *UpworkJobUpdateOne {
	ujuo.mutation.SetTitle(s)
	return ujuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (ujuo *UpworkJobUpdateOne) SetNillableTitle(s *string) *UpworkJobUpdateOne {
	if s != nil {
		ujuo.SetTitle(*s)
	}
	return ujuo
}

// SetCreatedAt sets the "created_at" field.
func (ujuo *UpworkJobUpdateOne) SetCreatedAt(t time.Time) *UpworkJobUpdateOne {
	ujuo.mutation.SetCreatedAt(t)
	return ujuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ujuo *UpworkJobUpdateOne) SetNillableCreatedAt(t *time.Time) *UpworkJobUpdateOne {
	if t != nil {
		ujuo.SetCreatedAt(*t)
	}
	return ujuo
}

// SetUpdatedAt sets the "updated_at" field.
func (ujuo *UpworkJobUpdateOne) SetUpdatedAt(t time.Time) *UpworkJobUpdateOne {
	ujuo.mutation.SetUpdatedAt(t)
	return ujuo
}

// SetEmbeddedAt sets the "embedded_at" field.
func (ujuo *UpworkJobUpdateOne) SetEmbeddedAt(t time.Time) *UpworkJobUpdateOne {
	ujuo.mutation.SetEmbeddedAt(t)
	return ujuo
}

// SetNillableEmbeddedAt sets the "embedded_at" field if the given value is not nil.
func (ujuo *UpworkJobUpdateOne) SetNillableEmbeddedAt(t *time.Time) *UpworkJobUpdateOne {
	if t != nil {
		ujuo.SetEmbeddedAt(*t)
	}
	return ujuo
}

// ClearEmbeddedAt clears the value of the "embedded_at" field.
func (ujuo *UpworkJobUpdateOne) ClearEmbeddedAt() *UpworkJobUpdateOne {
	ujuo.mutation.ClearEmbeddedAt()
	return ujuo
}

// SetRankedAt sets the "ranked_at" field.
func (ujuo *UpworkJobUpdateOne) SetRankedAt(t time.Time) *UpworkJobUpdateOne {
	ujuo.mutation.SetRankedAt(t)
	return ujuo
}

// SetNillableRankedAt sets the "ranked_at" field if the given value is not nil.
func (ujuo *UpworkJobUpdateOne) SetNillableRankedAt(t *time.Time) *UpworkJobUpdateOne {
	if t != nil {
		ujuo.SetRankedAt(*t)
	}
	return ujuo
}

// ClearRankedAt clears the value of the "ranked_at" field.
func (ujuo *UpworkJobUpdateOne) ClearRankedAt() *UpworkJobUpdateOne {
	ujuo.mutation.ClearRankedAt()
	return ujuo
}

// SetLocation sets the "location" field.
func (ujuo *UpworkJobUpdateOne) SetLocation(s string) *UpworkJobUpdateOne {
	ujuo.mutation.SetLocation(s)
	return ujuo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (ujuo *UpworkJobUpdateOne) SetNillableLocation(s *string) *UpworkJobUpdateOne {
	if s != nil {
		ujuo.SetLocation(*s)
	}
	return ujuo
}

// ClearLocation clears the value of the "location" field.
func (ujuo *UpworkJobUpdateOne) ClearLocation() *UpworkJobUpdateOne {
	ujuo.mutation.ClearLocation()
	return ujuo
}

// SetDescription sets the "description" field.
func (ujuo *UpworkJobUpdateOne) SetDescription(s string) *UpworkJobUpdateOne {
	ujuo.mutation.SetDescription(s)
	return ujuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ujuo *UpworkJobUpdateOne) SetNillableDescription(s *string) *UpworkJobUpdateOne {
	if s != nil {
		ujuo.SetDescription(*s)
	}
	return ujuo
}

// SetSkills sets the "skills" field.
func (ujuo *UpworkJobUpdateOne) SetSkills(s []string) *UpworkJobUpdateOne {
	ujuo.mutation.SetSkills(s)
	return ujuo
}

// AppendSkills appends s to the "skills" field.
func (ujuo *UpworkJobUpdateOne) AppendSkills(s []string) *UpworkJobUpdateOne {
	ujuo.mutation.AppendSkills(s)
	return ujuo
}

// ClearSkills clears the value of the "skills" field.
func (ujuo *UpworkJobUpdateOne) ClearSkills() *UpworkJobUpdateOne {
	ujuo.mutation.ClearSkills()
	return ujuo
}

// SetExperienceLevel sets the "experience_level" field.
func (ujuo *UpworkJobUpdateOne) SetExperienceLevel(s string) *UpworkJobUpdateOne {
	ujuo.mutation.SetExperienceLevel(s)
	return ujuo
}

// SetNillableExperienceLevel sets the "experience_level" field if the given value is not nil.
func (ujuo *UpworkJobUpdateOne) SetNillableExperienceLevel(s *string) *UpworkJobUpdateOne {
	if s != nil {
		ujuo.SetExperienceLevel(*s)
	}
	return ujuo
}

// ClearExperienceLevel clears the value of the "experience_level" field.
func (ujuo *UpworkJobUpdateOne) ClearExperienceLevel() *UpworkJobUpdateOne {
	ujuo.mutation.ClearExperienceLevel()
	return ujuo
}

// SetHourly sets the "hourly" field.
func (ujuo *UpworkJobUpdateOne) SetHourly(b bool) *UpworkJobUpdateOne {
	ujuo.mutation.SetHourly(b)
	return ujuo
}

// SetNillableHourly sets the "hourly" field if the given value is not nil.
func (ujuo *UpworkJobUpdateOne) SetNillableHourly(b *bool) *UpworkJobUpdateOne {
	if b != nil {
		ujuo.SetHourly(*b)
	}
	return ujuo
}

// SetFixed sets the "fixed" field.
func (ujuo *UpworkJobUpdateOne) SetFixed(b bool) *UpworkJobUpdateOne {
	ujuo.mutation.SetFixed(b)
	return ujuo
}

// SetNillableFixed sets the "fixed" field if the given value is not nil.
func (ujuo *UpworkJobUpdateOne) SetNillableFixed(b *bool) *UpworkJobUpdateOne {
	if b != nil {
		ujuo.SetFixed(*b)
	}
	return ujuo
}

// SetHourlyRate sets the "hourly_rate" field.
func (ujuo *UpworkJobUpdateOne) SetHourlyRate(f []float32) *UpworkJobUpdateOne {
	ujuo.mutation.SetHourlyRate(f)
	return ujuo
}

// AppendHourlyRate appends f to the "hourly_rate" field.
func (ujuo *UpworkJobUpdateOne) AppendHourlyRate(f []float32) *UpworkJobUpdateOne {
	ujuo.mutation.AppendHourlyRate(f)
	return ujuo
}

// ClearHourlyRate clears the value of the "hourly_rate" field.
func (ujuo *UpworkJobUpdateOne) ClearHourlyRate() *UpworkJobUpdateOne {
	ujuo.mutation.ClearHourlyRate()
	return ujuo
}

// SetFixedRate sets the "fixed_rate" field.
func (ujuo *UpworkJobUpdateOne) SetFixedRate(f float64) *UpworkJobUpdateOne {
	ujuo.mutation.ResetFixedRate()
	ujuo.mutation.SetFixedRate(f)
	return ujuo
}

// SetNillableFixedRate sets the "fixed_rate" field if the given value is not nil.
func (ujuo *UpworkJobUpdateOne) SetNillableFixedRate(f *float64) *UpworkJobUpdateOne {
	if f != nil {
		ujuo.SetFixedRate(*f)
	}
	return ujuo
}

// AddFixedRate adds f to the "fixed_rate" field.
func (ujuo *UpworkJobUpdateOne) AddFixedRate(f float64) *UpworkJobUpdateOne {
	ujuo.mutation.AddFixedRate(f)
	return ujuo
}

// ClearFixedRate clears the value of the "fixed_rate" field.
func (ujuo *UpworkJobUpdateOne) ClearFixedRate() *UpworkJobUpdateOne {
	ujuo.mutation.ClearFixedRate()
	return ujuo
}

// SetAverageUprankScore sets the "average_uprank_score" field.
func (ujuo *UpworkJobUpdateOne) SetAverageUprankScore(f float64) *UpworkJobUpdateOne {
	ujuo.mutation.ResetAverageUprankScore()
	ujuo.mutation.SetAverageUprankScore(f)
	return ujuo
}

// SetNillableAverageUprankScore sets the "average_uprank_score" field if the given value is not nil.
func (ujuo *UpworkJobUpdateOne) SetNillableAverageUprankScore(f *float64) *UpworkJobUpdateOne {
	if f != nil {
		ujuo.SetAverageUprankScore(*f)
	}
	return ujuo
}

// AddAverageUprankScore adds f to the "average_uprank_score" field.
func (ujuo *UpworkJobUpdateOne) AddAverageUprankScore(f float64) *UpworkJobUpdateOne {
	ujuo.mutation.AddAverageUprankScore(f)
	return ujuo
}

// ClearAverageUprankScore clears the value of the "average_uprank_score" field.
func (ujuo *UpworkJobUpdateOne) ClearAverageUprankScore() *UpworkJobUpdateOne {
	ujuo.mutation.ClearAverageUprankScore()
	return ujuo
}

// SetMaxUprankScore sets the "max_uprank_score" field.
func (ujuo *UpworkJobUpdateOne) SetMaxUprankScore(f float64) *UpworkJobUpdateOne {
	ujuo.mutation.ResetMaxUprankScore()
	ujuo.mutation.SetMaxUprankScore(f)
	return ujuo
}

// SetNillableMaxUprankScore sets the "max_uprank_score" field if the given value is not nil.
func (ujuo *UpworkJobUpdateOne) SetNillableMaxUprankScore(f *float64) *UpworkJobUpdateOne {
	if f != nil {
		ujuo.SetMaxUprankScore(*f)
	}
	return ujuo
}

// AddMaxUprankScore adds f to the "max_uprank_score" field.
func (ujuo *UpworkJobUpdateOne) AddMaxUprankScore(f float64) *UpworkJobUpdateOne {
	ujuo.mutation.AddMaxUprankScore(f)
	return ujuo
}

// ClearMaxUprankScore clears the value of the "max_uprank_score" field.
func (ujuo *UpworkJobUpdateOne) ClearMaxUprankScore() *UpworkJobUpdateOne {
	ujuo.mutation.ClearMaxUprankScore()
	return ujuo
}

// SetMinUprankScore sets the "min_uprank_score" field.
func (ujuo *UpworkJobUpdateOne) SetMinUprankScore(f float64) *UpworkJobUpdateOne {
	ujuo.mutation.ResetMinUprankScore()
	ujuo.mutation.SetMinUprankScore(f)
	return ujuo
}

// SetNillableMinUprankScore sets the "min_uprank_score" field if the given value is not nil.
func (ujuo *UpworkJobUpdateOne) SetNillableMinUprankScore(f *float64) *UpworkJobUpdateOne {
	if f != nil {
		ujuo.SetMinUprankScore(*f)
	}
	return ujuo
}

// AddMinUprankScore adds f to the "min_uprank_score" field.
func (ujuo *UpworkJobUpdateOne) AddMinUprankScore(f float64) *UpworkJobUpdateOne {
	ujuo.mutation.AddMinUprankScore(f)
	return ujuo
}

// ClearMinUprankScore clears the value of the "min_uprank_score" field.
func (ujuo *UpworkJobUpdateOne) ClearMinUprankScore() *UpworkJobUpdateOne {
	ujuo.mutation.ClearMinUprankScore()
	return ujuo
}

// AddUpworkfreelancerIDs adds the "upworkfreelancer" edge to the UpworkFreelancer entity by IDs.
func (ujuo *UpworkJobUpdateOne) AddUpworkfreelancerIDs(ids ...string) *UpworkJobUpdateOne {
	ujuo.mutation.AddUpworkfreelancerIDs(ids...)
	return ujuo
}

// AddUpworkfreelancer adds the "upworkfreelancer" edges to the UpworkFreelancer entity.
func (ujuo *UpworkJobUpdateOne) AddUpworkfreelancer(u ...*UpworkFreelancer) *UpworkJobUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ujuo.AddUpworkfreelancerIDs(ids...)
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (ujuo *UpworkJobUpdateOne) SetJobID(id uuid.UUID) *UpworkJobUpdateOne {
	ujuo.mutation.SetJobID(id)
	return ujuo
}

// SetJob sets the "job" edge to the Job entity.
func (ujuo *UpworkJobUpdateOne) SetJob(j *Job) *UpworkJobUpdateOne {
	return ujuo.SetJobID(j.ID)
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (ujuo *UpworkJobUpdateOne) AddUserIDs(ids ...string) *UpworkJobUpdateOne {
	ujuo.mutation.AddUserIDs(ids...)
	return ujuo
}

// AddUser adds the "user" edges to the User entity.
func (ujuo *UpworkJobUpdateOne) AddUser(u ...*User) *UpworkJobUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ujuo.AddUserIDs(ids...)
}

// Mutation returns the UpworkJobMutation object of the builder.
func (ujuo *UpworkJobUpdateOne) Mutation() *UpworkJobMutation {
	return ujuo.mutation
}

// ClearUpworkfreelancer clears all "upworkfreelancer" edges to the UpworkFreelancer entity.
func (ujuo *UpworkJobUpdateOne) ClearUpworkfreelancer() *UpworkJobUpdateOne {
	ujuo.mutation.ClearUpworkfreelancer()
	return ujuo
}

// RemoveUpworkfreelancerIDs removes the "upworkfreelancer" edge to UpworkFreelancer entities by IDs.
func (ujuo *UpworkJobUpdateOne) RemoveUpworkfreelancerIDs(ids ...string) *UpworkJobUpdateOne {
	ujuo.mutation.RemoveUpworkfreelancerIDs(ids...)
	return ujuo
}

// RemoveUpworkfreelancer removes "upworkfreelancer" edges to UpworkFreelancer entities.
func (ujuo *UpworkJobUpdateOne) RemoveUpworkfreelancer(u ...*UpworkFreelancer) *UpworkJobUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ujuo.RemoveUpworkfreelancerIDs(ids...)
}

// ClearJob clears the "job" edge to the Job entity.
func (ujuo *UpworkJobUpdateOne) ClearJob() *UpworkJobUpdateOne {
	ujuo.mutation.ClearJob()
	return ujuo
}

// ClearUser clears all "user" edges to the User entity.
func (ujuo *UpworkJobUpdateOne) ClearUser() *UpworkJobUpdateOne {
	ujuo.mutation.ClearUser()
	return ujuo
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (ujuo *UpworkJobUpdateOne) RemoveUserIDs(ids ...string) *UpworkJobUpdateOne {
	ujuo.mutation.RemoveUserIDs(ids...)
	return ujuo
}

// RemoveUser removes "user" edges to User entities.
func (ujuo *UpworkJobUpdateOne) RemoveUser(u ...*User) *UpworkJobUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ujuo.RemoveUserIDs(ids...)
}

// Where appends a list predicates to the UpworkJobUpdate builder.
func (ujuo *UpworkJobUpdateOne) Where(ps ...predicate.UpworkJob) *UpworkJobUpdateOne {
	ujuo.mutation.Where(ps...)
	return ujuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ujuo *UpworkJobUpdateOne) Select(field string, fields ...string) *UpworkJobUpdateOne {
	ujuo.fields = append([]string{field}, fields...)
	return ujuo
}

// Save executes the query and returns the updated UpworkJob entity.
func (ujuo *UpworkJobUpdateOne) Save(ctx context.Context) (*UpworkJob, error) {
	ujuo.defaults()
	return withHooks(ctx, ujuo.sqlSave, ujuo.mutation, ujuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ujuo *UpworkJobUpdateOne) SaveX(ctx context.Context) *UpworkJob {
	node, err := ujuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ujuo *UpworkJobUpdateOne) Exec(ctx context.Context) error {
	_, err := ujuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ujuo *UpworkJobUpdateOne) ExecX(ctx context.Context) {
	if err := ujuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ujuo *UpworkJobUpdateOne) defaults() {
	if _, ok := ujuo.mutation.UpdatedAt(); !ok {
		v := upworkjob.UpdateDefaultUpdatedAt()
		ujuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ujuo *UpworkJobUpdateOne) check() error {
	if v, ok := ujuo.mutation.Title(); ok {
		if err := upworkjob.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "UpworkJob.title": %w`, err)}
		}
	}
	if v, ok := ujuo.mutation.Description(); ok {
		if err := upworkjob.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "UpworkJob.description": %w`, err)}
		}
	}
	if _, ok := ujuo.mutation.JobID(); ujuo.mutation.JobCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UpworkJob.job"`)
	}
	return nil
}

func (ujuo *UpworkJobUpdateOne) sqlSave(ctx context.Context) (_node *UpworkJob, err error) {
	if err := ujuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(upworkjob.Table, upworkjob.Columns, sqlgraph.NewFieldSpec(upworkjob.FieldID, field.TypeString))
	id, ok := ujuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpworkJob.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ujuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upworkjob.FieldID)
		for _, f := range fields {
			if !upworkjob.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upworkjob.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ujuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ujuo.mutation.Title(); ok {
		_spec.SetField(upworkjob.FieldTitle, field.TypeString, value)
	}
	if value, ok := ujuo.mutation.CreatedAt(); ok {
		_spec.SetField(upworkjob.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ujuo.mutation.UpdatedAt(); ok {
		_spec.SetField(upworkjob.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ujuo.mutation.EmbeddedAt(); ok {
		_spec.SetField(upworkjob.FieldEmbeddedAt, field.TypeTime, value)
	}
	if ujuo.mutation.EmbeddedAtCleared() {
		_spec.ClearField(upworkjob.FieldEmbeddedAt, field.TypeTime)
	}
	if value, ok := ujuo.mutation.RankedAt(); ok {
		_spec.SetField(upworkjob.FieldRankedAt, field.TypeTime, value)
	}
	if ujuo.mutation.RankedAtCleared() {
		_spec.ClearField(upworkjob.FieldRankedAt, field.TypeTime)
	}
	if value, ok := ujuo.mutation.Location(); ok {
		_spec.SetField(upworkjob.FieldLocation, field.TypeString, value)
	}
	if ujuo.mutation.LocationCleared() {
		_spec.ClearField(upworkjob.FieldLocation, field.TypeString)
	}
	if value, ok := ujuo.mutation.Description(); ok {
		_spec.SetField(upworkjob.FieldDescription, field.TypeString, value)
	}
	if value, ok := ujuo.mutation.Skills(); ok {
		_spec.SetField(upworkjob.FieldSkills, field.TypeJSON, value)
	}
	if value, ok := ujuo.mutation.AppendedSkills(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, upworkjob.FieldSkills, value)
		})
	}
	if ujuo.mutation.SkillsCleared() {
		_spec.ClearField(upworkjob.FieldSkills, field.TypeJSON)
	}
	if value, ok := ujuo.mutation.ExperienceLevel(); ok {
		_spec.SetField(upworkjob.FieldExperienceLevel, field.TypeString, value)
	}
	if ujuo.mutation.ExperienceLevelCleared() {
		_spec.ClearField(upworkjob.FieldExperienceLevel, field.TypeString)
	}
	if value, ok := ujuo.mutation.Hourly(); ok {
		_spec.SetField(upworkjob.FieldHourly, field.TypeBool, value)
	}
	if value, ok := ujuo.mutation.Fixed(); ok {
		_spec.SetField(upworkjob.FieldFixed, field.TypeBool, value)
	}
	if value, ok := ujuo.mutation.HourlyRate(); ok {
		_spec.SetField(upworkjob.FieldHourlyRate, field.TypeJSON, value)
	}
	if value, ok := ujuo.mutation.AppendedHourlyRate(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, upworkjob.FieldHourlyRate, value)
		})
	}
	if ujuo.mutation.HourlyRateCleared() {
		_spec.ClearField(upworkjob.FieldHourlyRate, field.TypeJSON)
	}
	if value, ok := ujuo.mutation.FixedRate(); ok {
		_spec.SetField(upworkjob.FieldFixedRate, field.TypeFloat64, value)
	}
	if value, ok := ujuo.mutation.AddedFixedRate(); ok {
		_spec.AddField(upworkjob.FieldFixedRate, field.TypeFloat64, value)
	}
	if ujuo.mutation.FixedRateCleared() {
		_spec.ClearField(upworkjob.FieldFixedRate, field.TypeFloat64)
	}
	if value, ok := ujuo.mutation.AverageUprankScore(); ok {
		_spec.SetField(upworkjob.FieldAverageUprankScore, field.TypeFloat64, value)
	}
	if value, ok := ujuo.mutation.AddedAverageUprankScore(); ok {
		_spec.AddField(upworkjob.FieldAverageUprankScore, field.TypeFloat64, value)
	}
	if ujuo.mutation.AverageUprankScoreCleared() {
		_spec.ClearField(upworkjob.FieldAverageUprankScore, field.TypeFloat64)
	}
	if value, ok := ujuo.mutation.MaxUprankScore(); ok {
		_spec.SetField(upworkjob.FieldMaxUprankScore, field.TypeFloat64, value)
	}
	if value, ok := ujuo.mutation.AddedMaxUprankScore(); ok {
		_spec.AddField(upworkjob.FieldMaxUprankScore, field.TypeFloat64, value)
	}
	if ujuo.mutation.MaxUprankScoreCleared() {
		_spec.ClearField(upworkjob.FieldMaxUprankScore, field.TypeFloat64)
	}
	if value, ok := ujuo.mutation.MinUprankScore(); ok {
		_spec.SetField(upworkjob.FieldMinUprankScore, field.TypeFloat64, value)
	}
	if value, ok := ujuo.mutation.AddedMinUprankScore(); ok {
		_spec.AddField(upworkjob.FieldMinUprankScore, field.TypeFloat64, value)
	}
	if ujuo.mutation.MinUprankScoreCleared() {
		_spec.ClearField(upworkjob.FieldMinUprankScore, field.TypeFloat64)
	}
	if ujuo.mutation.UpworkfreelancerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   upworkjob.UpworkfreelancerTable,
			Columns: upworkjob.UpworkfreelancerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upworkfreelancer.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ujuo.mutation.RemovedUpworkfreelancerIDs(); len(nodes) > 0 && !ujuo.mutation.UpworkfreelancerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   upworkjob.UpworkfreelancerTable,
			Columns: upworkjob.UpworkfreelancerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upworkfreelancer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ujuo.mutation.UpworkfreelancerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   upworkjob.UpworkfreelancerTable,
			Columns: upworkjob.UpworkfreelancerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upworkfreelancer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ujuo.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   upworkjob.JobTable,
			Columns: []string{upworkjob.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ujuo.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   upworkjob.JobTable,
			Columns: []string{upworkjob.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ujuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   upworkjob.UserTable,
			Columns: upworkjob.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ujuo.mutation.RemovedUserIDs(); len(nodes) > 0 && !ujuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   upworkjob.UserTable,
			Columns: upworkjob.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ujuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   upworkjob.UserTable,
			Columns: upworkjob.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UpworkJob{config: ujuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ujuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upworkjob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ujuo.mutation.done = true
	return _node, nil
}
