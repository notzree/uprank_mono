// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/notzree/uprank-backend/main-backend/ent/freelancerinferencedata"
	"github.com/notzree/uprank-backend/main-backend/ent/predicate"
)

// FreelancerInferenceDataDelete is the builder for deleting a FreelancerInferenceData entity.
type FreelancerInferenceDataDelete struct {
	config
	hooks    []Hook
	mutation *FreelancerInferenceDataMutation
}

// Where appends a list predicates to the FreelancerInferenceDataDelete builder.
func (fidd *FreelancerInferenceDataDelete) Where(ps ...predicate.FreelancerInferenceData) *FreelancerInferenceDataDelete {
	fidd.mutation.Where(ps...)
	return fidd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (fidd *FreelancerInferenceDataDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, fidd.sqlExec, fidd.mutation, fidd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (fidd *FreelancerInferenceDataDelete) ExecX(ctx context.Context) int {
	n, err := fidd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (fidd *FreelancerInferenceDataDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(freelancerinferencedata.Table, sqlgraph.NewFieldSpec(freelancerinferencedata.FieldID, field.TypeInt))
	if ps := fidd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, fidd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	fidd.mutation.done = true
	return affected, err
}

// FreelancerInferenceDataDeleteOne is the builder for deleting a single FreelancerInferenceData entity.
type FreelancerInferenceDataDeleteOne struct {
	fidd *FreelancerInferenceDataDelete
}

// Where appends a list predicates to the FreelancerInferenceDataDelete builder.
func (fiddo *FreelancerInferenceDataDeleteOne) Where(ps ...predicate.FreelancerInferenceData) *FreelancerInferenceDataDeleteOne {
	fiddo.fidd.mutation.Where(ps...)
	return fiddo
}

// Exec executes the deletion query.
func (fiddo *FreelancerInferenceDataDeleteOne) Exec(ctx context.Context) error {
	n, err := fiddo.fidd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{freelancerinferencedata.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (fiddo *FreelancerInferenceDataDeleteOne) ExecX(ctx context.Context) {
	if err := fiddo.Exec(ctx); err != nil {
		panic(err)
	}
}
