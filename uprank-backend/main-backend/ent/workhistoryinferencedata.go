// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/notzree/uprank-backend/main-backend/ent/workhistory"
	"github.com/notzree/uprank-backend/main-backend/ent/workhistoryinferencedata"
)

// WorkhistoryInferenceData is the model entity for the WorkhistoryInferenceData schema.
type WorkhistoryInferenceData struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FinalizedJobRatingScore holds the value of the "finalized_job_rating_score" field.
	FinalizedJobRatingScore float64 `json:"finalized_job_rating_score,omitempty"`
	// IsWithinBudget holds the value of the "is_within_budget" field.
	IsWithinBudget bool `json:"is_within_budget,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkhistoryInferenceDataQuery when eager-loading is set.
	Edges                                    WorkhistoryInferenceDataEdges `json:"edges"`
	work_history_work_history_inference_data *int
	selectValues                             sql.SelectValues
}

// WorkhistoryInferenceDataEdges holds the relations/edges for other nodes in the graph.
type WorkhistoryInferenceDataEdges struct {
	// WorkHistories holds the value of the work_histories edge.
	WorkHistories *WorkHistory `json:"work_histories,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// WorkHistoriesOrErr returns the WorkHistories value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkhistoryInferenceDataEdges) WorkHistoriesOrErr() (*WorkHistory, error) {
	if e.WorkHistories != nil {
		return e.WorkHistories, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: workhistory.Label}
	}
	return nil, &NotLoadedError{edge: "work_histories"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkhistoryInferenceData) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workhistoryinferencedata.FieldIsWithinBudget:
			values[i] = new(sql.NullBool)
		case workhistoryinferencedata.FieldFinalizedJobRatingScore:
			values[i] = new(sql.NullFloat64)
		case workhistoryinferencedata.FieldID:
			values[i] = new(sql.NullInt64)
		case workhistoryinferencedata.ForeignKeys[0]: // work_history_work_history_inference_data
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkhistoryInferenceData fields.
func (wid *WorkhistoryInferenceData) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workhistoryinferencedata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wid.ID = int(value.Int64)
		case workhistoryinferencedata.FieldFinalizedJobRatingScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field finalized_job_rating_score", values[i])
			} else if value.Valid {
				wid.FinalizedJobRatingScore = value.Float64
			}
		case workhistoryinferencedata.FieldIsWithinBudget:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_within_budget", values[i])
			} else if value.Valid {
				wid.IsWithinBudget = value.Bool
			}
		case workhistoryinferencedata.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field work_history_work_history_inference_data", value)
			} else if value.Valid {
				wid.work_history_work_history_inference_data = new(int)
				*wid.work_history_work_history_inference_data = int(value.Int64)
			}
		default:
			wid.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkhistoryInferenceData.
// This includes values selected through modifiers, order, etc.
func (wid *WorkhistoryInferenceData) Value(name string) (ent.Value, error) {
	return wid.selectValues.Get(name)
}

// QueryWorkHistories queries the "work_histories" edge of the WorkhistoryInferenceData entity.
func (wid *WorkhistoryInferenceData) QueryWorkHistories() *WorkHistoryQuery {
	return NewWorkhistoryInferenceDataClient(wid.config).QueryWorkHistories(wid)
}

// Update returns a builder for updating this WorkhistoryInferenceData.
// Note that you need to call WorkhistoryInferenceData.Unwrap() before calling this method if this WorkhistoryInferenceData
// was returned from a transaction, and the transaction was committed or rolled back.
func (wid *WorkhistoryInferenceData) Update() *WorkhistoryInferenceDataUpdateOne {
	return NewWorkhistoryInferenceDataClient(wid.config).UpdateOne(wid)
}

// Unwrap unwraps the WorkhistoryInferenceData entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wid *WorkhistoryInferenceData) Unwrap() *WorkhistoryInferenceData {
	_tx, ok := wid.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkhistoryInferenceData is not a transactional entity")
	}
	wid.config.driver = _tx.drv
	return wid
}

// String implements the fmt.Stringer.
func (wid *WorkhistoryInferenceData) String() string {
	var builder strings.Builder
	builder.WriteString("WorkhistoryInferenceData(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wid.ID))
	builder.WriteString("finalized_job_rating_score=")
	builder.WriteString(fmt.Sprintf("%v", wid.FinalizedJobRatingScore))
	builder.WriteString(", ")
	builder.WriteString("is_within_budget=")
	builder.WriteString(fmt.Sprintf("%v", wid.IsWithinBudget))
	builder.WriteByte(')')
	return builder.String()
}

// WorkhistoryInferenceDataSlice is a parsable slice of WorkhistoryInferenceData.
type WorkhistoryInferenceDataSlice []*WorkhistoryInferenceData
