// Code generated by ent, DO NOT EDIT.

package workhistoryinferencedata

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the workhistoryinferencedata type in the database.
	Label = "workhistory_inference_data"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFinalizedJobRatingScore holds the string denoting the finalized_job_rating_score field in the database.
	FieldFinalizedJobRatingScore = "finalized_job_rating_score"
	// FieldIsWithinBudget holds the string denoting the is_within_budget field in the database.
	FieldIsWithinBudget = "is_within_budget"
	// EdgeWorkHistories holds the string denoting the work_histories edge name in mutations.
	EdgeWorkHistories = "work_histories"
	// Table holds the table name of the workhistoryinferencedata in the database.
	Table = "workhistory_inference_data"
	// WorkHistoriesTable is the table that holds the work_histories relation/edge.
	WorkHistoriesTable = "workhistory_inference_data"
	// WorkHistoriesInverseTable is the table name for the WorkHistory entity.
	// It exists in this package in order to avoid circular dependency with the "workhistory" package.
	WorkHistoriesInverseTable = "work_histories"
	// WorkHistoriesColumn is the table column denoting the work_histories relation/edge.
	WorkHistoriesColumn = "work_history_work_history_inference_data"
)

// Columns holds all SQL columns for workhistoryinferencedata fields.
var Columns = []string{
	FieldID,
	FieldFinalizedJobRatingScore,
	FieldIsWithinBudget,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "workhistory_inference_data"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"work_history_work_history_inference_data",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the WorkhistoryInferenceData queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFinalizedJobRatingScore orders the results by the finalized_job_rating_score field.
func ByFinalizedJobRatingScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinalizedJobRatingScore, opts...).ToFunc()
}

// ByIsWithinBudget orders the results by the is_within_budget field.
func ByIsWithinBudget(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsWithinBudget, opts...).ToFunc()
}

// ByWorkHistoriesField orders the results by work_histories field.
func ByWorkHistoriesField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkHistoriesStep(), sql.OrderByField(field, opts...))
	}
}
func newWorkHistoriesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkHistoriesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, WorkHistoriesTable, WorkHistoriesColumn),
	)
}
