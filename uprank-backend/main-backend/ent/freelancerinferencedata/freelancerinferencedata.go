// Code generated by ent, DO NOT EDIT.

package freelancerinferencedata

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the freelancerinferencedata type in the database.
	Label = "freelancer_inference_data"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUprankReccomended holds the string denoting the uprank_reccomended field in the database.
	FieldUprankReccomended = "uprank_reccomended"
	// FieldUprankReccomendedReasons holds the string denoting the uprank_reccomended_reasons field in the database.
	FieldUprankReccomendedReasons = "uprank_reccomended_reasons"
	// FieldUprankNotEnoughData holds the string denoting the uprank_not_enough_data field in the database.
	FieldUprankNotEnoughData = "uprank_not_enough_data"
	// FieldFinalizedRatingScore holds the string denoting the finalized_rating_score field in the database.
	FieldFinalizedRatingScore = "finalized_rating_score"
	// FieldAiEstimatedDuration holds the string denoting the ai_estimated_duration field in the database.
	FieldAiEstimatedDuration = "ai_estimated_duration"
	// FieldBudgetAdherencePercentage holds the string denoting the budget_adherence_percentage field in the database.
	FieldBudgetAdherencePercentage = "budget_adherence_percentage"
	// EdgeUpworkfreelancer holds the string denoting the upworkfreelancer edge name in mutations.
	EdgeUpworkfreelancer = "upworkfreelancer"
	// Table holds the table name of the freelancerinferencedata in the database.
	Table = "freelancer_inference_data"
	// UpworkfreelancerTable is the table that holds the upworkfreelancer relation/edge.
	UpworkfreelancerTable = "freelancer_inference_data"
	// UpworkfreelancerInverseTable is the table name for the UpworkFreelancer entity.
	// It exists in this package in order to avoid circular dependency with the "upworkfreelancer" package.
	UpworkfreelancerInverseTable = "upwork_freelancers"
	// UpworkfreelancerColumn is the table column denoting the upworkfreelancer relation/edge.
	UpworkfreelancerColumn = "upwork_freelancer_freelancer_inference_data"
)

// Columns holds all SQL columns for freelancerinferencedata fields.
var Columns = []string{
	FieldID,
	FieldUprankReccomended,
	FieldUprankReccomendedReasons,
	FieldUprankNotEnoughData,
	FieldFinalizedRatingScore,
	FieldAiEstimatedDuration,
	FieldBudgetAdherencePercentage,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "freelancer_inference_data"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"upwork_freelancer_freelancer_inference_data",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUprankReccomended holds the default value on creation for the "uprank_reccomended" field.
	DefaultUprankReccomended bool
	// DefaultUprankNotEnoughData holds the default value on creation for the "uprank_not_enough_data" field.
	DefaultUprankNotEnoughData bool
)

// OrderOption defines the ordering options for the FreelancerInferenceData queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUprankReccomended orders the results by the uprank_reccomended field.
func ByUprankReccomended(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUprankReccomended, opts...).ToFunc()
}

// ByUprankReccomendedReasons orders the results by the uprank_reccomended_reasons field.
func ByUprankReccomendedReasons(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUprankReccomendedReasons, opts...).ToFunc()
}

// ByUprankNotEnoughData orders the results by the uprank_not_enough_data field.
func ByUprankNotEnoughData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUprankNotEnoughData, opts...).ToFunc()
}

// ByFinalizedRatingScore orders the results by the finalized_rating_score field.
func ByFinalizedRatingScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFinalizedRatingScore, opts...).ToFunc()
}

// ByAiEstimatedDuration orders the results by the ai_estimated_duration field.
func ByAiEstimatedDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAiEstimatedDuration, opts...).ToFunc()
}

// ByBudgetAdherencePercentage orders the results by the budget_adherence_percentage field.
func ByBudgetAdherencePercentage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBudgetAdherencePercentage, opts...).ToFunc()
}

// ByUpworkfreelancerField orders the results by upworkfreelancer field.
func ByUpworkfreelancerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUpworkfreelancerStep(), sql.OrderByField(field, opts...))
	}
}
func newUpworkfreelancerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UpworkfreelancerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, UpworkfreelancerTable, UpworkfreelancerColumn),
	)
}
