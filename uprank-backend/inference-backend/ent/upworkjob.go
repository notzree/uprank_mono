// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/notzree/uprank-backend/inference-backend/ent/job"
	"github.com/notzree/uprank-backend/inference-backend/ent/upworkjob"
)

// UpworkJob is the model entity for the UpworkJob schema.
type UpworkJob struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Skills holds the value of the "skills" field.
	Skills []string `json:"skills,omitempty"`
	// ExperienceLevel holds the value of the "experience_level" field.
	ExperienceLevel string `json:"experience_level,omitempty"`
	// Hourly holds the value of the "hourly" field.
	Hourly bool `json:"hourly,omitempty"`
	// Fixed holds the value of the "fixed" field.
	Fixed bool `json:"fixed,omitempty"`
	// HourlyRate holds the value of the "hourly_rate" field.
	HourlyRate []float32 `json:"hourly_rate,omitempty"`
	// FixedRate holds the value of the "fixed_rate" field.
	FixedRate float64 `json:"fixed_rate,omitempty"`
	// AverageUprankScore holds the value of the "average_uprank_score" field.
	AverageUprankScore float64 `json:"average_uprank_score,omitempty"`
	// MaxUprankScore holds the value of the "max_uprank_score" field.
	MaxUprankScore float64 `json:"max_uprank_score,omitempty"`
	// MinUprankScore holds the value of the "min_uprank_score" field.
	MinUprankScore float64 `json:"min_uprank_score,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UpworkJobQuery when eager-loading is set.
	Edges         UpworkJobEdges `json:"edges"`
	job_upworkjob *uuid.UUID
	selectValues  sql.SelectValues
}

// UpworkJobEdges holds the relations/edges for other nodes in the graph.
type UpworkJobEdges struct {
	// Upworkfreelancer holds the value of the upworkfreelancer edge.
	Upworkfreelancer []*UpworkFreelancer `json:"upworkfreelancer,omitempty"`
	// Job holds the value of the job edge.
	Job *Job `json:"job,omitempty"`
	// User holds the value of the user edge.
	User []*User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UpworkfreelancerOrErr returns the Upworkfreelancer value or an error if the edge
// was not loaded in eager-loading.
func (e UpworkJobEdges) UpworkfreelancerOrErr() ([]*UpworkFreelancer, error) {
	if e.loadedTypes[0] {
		return e.Upworkfreelancer, nil
	}
	return nil, &NotLoadedError{edge: "upworkfreelancer"}
}

// JobOrErr returns the Job value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UpworkJobEdges) JobOrErr() (*Job, error) {
	if e.Job != nil {
		return e.Job, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: job.Label}
	}
	return nil, &NotLoadedError{edge: "job"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading.
func (e UpworkJobEdges) UserOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UpworkJob) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case upworkjob.FieldSkills, upworkjob.FieldHourlyRate:
			values[i] = new([]byte)
		case upworkjob.FieldHourly, upworkjob.FieldFixed:
			values[i] = new(sql.NullBool)
		case upworkjob.FieldFixedRate, upworkjob.FieldAverageUprankScore, upworkjob.FieldMaxUprankScore, upworkjob.FieldMinUprankScore:
			values[i] = new(sql.NullFloat64)
		case upworkjob.FieldID, upworkjob.FieldTitle, upworkjob.FieldLocation, upworkjob.FieldDescription, upworkjob.FieldExperienceLevel:
			values[i] = new(sql.NullString)
		case upworkjob.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case upworkjob.ForeignKeys[0]: // job_upworkjob
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UpworkJob fields.
func (uj *UpworkJob) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case upworkjob.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				uj.ID = value.String
			}
		case upworkjob.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				uj.Title = value.String
			}
		case upworkjob.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				uj.CreatedAt = value.Time
			}
		case upworkjob.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				uj.Location = value.String
			}
		case upworkjob.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				uj.Description = value.String
			}
		case upworkjob.FieldSkills:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field skills", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &uj.Skills); err != nil {
					return fmt.Errorf("unmarshal field skills: %w", err)
				}
			}
		case upworkjob.FieldExperienceLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field experience_level", values[i])
			} else if value.Valid {
				uj.ExperienceLevel = value.String
			}
		case upworkjob.FieldHourly:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field hourly", values[i])
			} else if value.Valid {
				uj.Hourly = value.Bool
			}
		case upworkjob.FieldFixed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field fixed", values[i])
			} else if value.Valid {
				uj.Fixed = value.Bool
			}
		case upworkjob.FieldHourlyRate:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field hourly_rate", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &uj.HourlyRate); err != nil {
					return fmt.Errorf("unmarshal field hourly_rate: %w", err)
				}
			}
		case upworkjob.FieldFixedRate:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field fixed_rate", values[i])
			} else if value.Valid {
				uj.FixedRate = value.Float64
			}
		case upworkjob.FieldAverageUprankScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field average_uprank_score", values[i])
			} else if value.Valid {
				uj.AverageUprankScore = value.Float64
			}
		case upworkjob.FieldMaxUprankScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field max_uprank_score", values[i])
			} else if value.Valid {
				uj.MaxUprankScore = value.Float64
			}
		case upworkjob.FieldMinUprankScore:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field min_uprank_score", values[i])
			} else if value.Valid {
				uj.MinUprankScore = value.Float64
			}
		case upworkjob.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field job_upworkjob", values[i])
			} else if value.Valid {
				uj.job_upworkjob = new(uuid.UUID)
				*uj.job_upworkjob = *value.S.(*uuid.UUID)
			}
		default:
			uj.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the UpworkJob.
// This includes values selected through modifiers, order, etc.
func (uj *UpworkJob) Value(name string) (ent.Value, error) {
	return uj.selectValues.Get(name)
}

// QueryUpworkfreelancer queries the "upworkfreelancer" edge of the UpworkJob entity.
func (uj *UpworkJob) QueryUpworkfreelancer() *UpworkFreelancerQuery {
	return NewUpworkJobClient(uj.config).QueryUpworkfreelancer(uj)
}

// QueryJob queries the "job" edge of the UpworkJob entity.
func (uj *UpworkJob) QueryJob() *JobQuery {
	return NewUpworkJobClient(uj.config).QueryJob(uj)
}

// QueryUser queries the "user" edge of the UpworkJob entity.
func (uj *UpworkJob) QueryUser() *UserQuery {
	return NewUpworkJobClient(uj.config).QueryUser(uj)
}

// Update returns a builder for updating this UpworkJob.
// Note that you need to call UpworkJob.Unwrap() before calling this method if this UpworkJob
// was returned from a transaction, and the transaction was committed or rolled back.
func (uj *UpworkJob) Update() *UpworkJobUpdateOne {
	return NewUpworkJobClient(uj.config).UpdateOne(uj)
}

// Unwrap unwraps the UpworkJob entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (uj *UpworkJob) Unwrap() *UpworkJob {
	_tx, ok := uj.config.driver.(*txDriver)
	if !ok {
		panic("ent: UpworkJob is not a transactional entity")
	}
	uj.config.driver = _tx.drv
	return uj
}

// String implements the fmt.Stringer.
func (uj *UpworkJob) String() string {
	var builder strings.Builder
	builder.WriteString("UpworkJob(")
	builder.WriteString(fmt.Sprintf("id=%v, ", uj.ID))
	builder.WriteString("title=")
	builder.WriteString(uj.Title)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(uj.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(uj.Location)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(uj.Description)
	builder.WriteString(", ")
	builder.WriteString("skills=")
	builder.WriteString(fmt.Sprintf("%v", uj.Skills))
	builder.WriteString(", ")
	builder.WriteString("experience_level=")
	builder.WriteString(uj.ExperienceLevel)
	builder.WriteString(", ")
	builder.WriteString("hourly=")
	builder.WriteString(fmt.Sprintf("%v", uj.Hourly))
	builder.WriteString(", ")
	builder.WriteString("fixed=")
	builder.WriteString(fmt.Sprintf("%v", uj.Fixed))
	builder.WriteString(", ")
	builder.WriteString("hourly_rate=")
	builder.WriteString(fmt.Sprintf("%v", uj.HourlyRate))
	builder.WriteString(", ")
	builder.WriteString("fixed_rate=")
	builder.WriteString(fmt.Sprintf("%v", uj.FixedRate))
	builder.WriteString(", ")
	builder.WriteString("average_uprank_score=")
	builder.WriteString(fmt.Sprintf("%v", uj.AverageUprankScore))
	builder.WriteString(", ")
	builder.WriteString("max_uprank_score=")
	builder.WriteString(fmt.Sprintf("%v", uj.MaxUprankScore))
	builder.WriteString(", ")
	builder.WriteString("min_uprank_score=")
	builder.WriteString(fmt.Sprintf("%v", uj.MinUprankScore))
	builder.WriteByte(')')
	return builder.String()
}

// UpworkJobs is a parsable slice of UpworkJob.
type UpworkJobs []*UpworkJob
