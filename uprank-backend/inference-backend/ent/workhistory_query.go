// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/notzree/uprank-backend/inference-backend/ent/predicate"
	"github.com/notzree/uprank-backend/inference-backend/ent/upworkfreelancer"
	"github.com/notzree/uprank-backend/inference-backend/ent/workhistory"
)

// WorkHistoryQuery is the builder for querying WorkHistory entities.
type WorkHistoryQuery struct {
	config
	ctx            *QueryContext
	order          []workhistory.OrderOption
	inters         []Interceptor
	predicates     []predicate.WorkHistory
	withFreelancer *UpworkFreelancerQuery
	withFKs        bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WorkHistoryQuery builder.
func (whq *WorkHistoryQuery) Where(ps ...predicate.WorkHistory) *WorkHistoryQuery {
	whq.predicates = append(whq.predicates, ps...)
	return whq
}

// Limit the number of records to be returned by this query.
func (whq *WorkHistoryQuery) Limit(limit int) *WorkHistoryQuery {
	whq.ctx.Limit = &limit
	return whq
}

// Offset to start from.
func (whq *WorkHistoryQuery) Offset(offset int) *WorkHistoryQuery {
	whq.ctx.Offset = &offset
	return whq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (whq *WorkHistoryQuery) Unique(unique bool) *WorkHistoryQuery {
	whq.ctx.Unique = &unique
	return whq
}

// Order specifies how the records should be ordered.
func (whq *WorkHistoryQuery) Order(o ...workhistory.OrderOption) *WorkHistoryQuery {
	whq.order = append(whq.order, o...)
	return whq
}

// QueryFreelancer chains the current query on the "freelancer" edge.
func (whq *WorkHistoryQuery) QueryFreelancer() *UpworkFreelancerQuery {
	query := (&UpworkFreelancerClient{config: whq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := whq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := whq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(workhistory.Table, workhistory.FieldID, selector),
			sqlgraph.To(upworkfreelancer.Table, upworkfreelancer.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, workhistory.FreelancerTable, workhistory.FreelancerColumn),
		)
		fromU = sqlgraph.SetNeighbors(whq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first WorkHistory entity from the query.
// Returns a *NotFoundError when no WorkHistory was found.
func (whq *WorkHistoryQuery) First(ctx context.Context) (*WorkHistory, error) {
	nodes, err := whq.Limit(1).All(setContextOp(ctx, whq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{workhistory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (whq *WorkHistoryQuery) FirstX(ctx context.Context) *WorkHistory {
	node, err := whq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first WorkHistory ID from the query.
// Returns a *NotFoundError when no WorkHistory ID was found.
func (whq *WorkHistoryQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = whq.Limit(1).IDs(setContextOp(ctx, whq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{workhistory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (whq *WorkHistoryQuery) FirstIDX(ctx context.Context) int {
	id, err := whq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single WorkHistory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one WorkHistory entity is found.
// Returns a *NotFoundError when no WorkHistory entities are found.
func (whq *WorkHistoryQuery) Only(ctx context.Context) (*WorkHistory, error) {
	nodes, err := whq.Limit(2).All(setContextOp(ctx, whq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{workhistory.Label}
	default:
		return nil, &NotSingularError{workhistory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (whq *WorkHistoryQuery) OnlyX(ctx context.Context) *WorkHistory {
	node, err := whq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only WorkHistory ID in the query.
// Returns a *NotSingularError when more than one WorkHistory ID is found.
// Returns a *NotFoundError when no entities are found.
func (whq *WorkHistoryQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = whq.Limit(2).IDs(setContextOp(ctx, whq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{workhistory.Label}
	default:
		err = &NotSingularError{workhistory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (whq *WorkHistoryQuery) OnlyIDX(ctx context.Context) int {
	id, err := whq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of WorkHistories.
func (whq *WorkHistoryQuery) All(ctx context.Context) ([]*WorkHistory, error) {
	ctx = setContextOp(ctx, whq.ctx, "All")
	if err := whq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*WorkHistory, *WorkHistoryQuery]()
	return withInterceptors[[]*WorkHistory](ctx, whq, qr, whq.inters)
}

// AllX is like All, but panics if an error occurs.
func (whq *WorkHistoryQuery) AllX(ctx context.Context) []*WorkHistory {
	nodes, err := whq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of WorkHistory IDs.
func (whq *WorkHistoryQuery) IDs(ctx context.Context) (ids []int, err error) {
	if whq.ctx.Unique == nil && whq.path != nil {
		whq.Unique(true)
	}
	ctx = setContextOp(ctx, whq.ctx, "IDs")
	if err = whq.Select(workhistory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (whq *WorkHistoryQuery) IDsX(ctx context.Context) []int {
	ids, err := whq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (whq *WorkHistoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, whq.ctx, "Count")
	if err := whq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, whq, querierCount[*WorkHistoryQuery](), whq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (whq *WorkHistoryQuery) CountX(ctx context.Context) int {
	count, err := whq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (whq *WorkHistoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, whq.ctx, "Exist")
	switch _, err := whq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (whq *WorkHistoryQuery) ExistX(ctx context.Context) bool {
	exist, err := whq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WorkHistoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (whq *WorkHistoryQuery) Clone() *WorkHistoryQuery {
	if whq == nil {
		return nil
	}
	return &WorkHistoryQuery{
		config:         whq.config,
		ctx:            whq.ctx.Clone(),
		order:          append([]workhistory.OrderOption{}, whq.order...),
		inters:         append([]Interceptor{}, whq.inters...),
		predicates:     append([]predicate.WorkHistory{}, whq.predicates...),
		withFreelancer: whq.withFreelancer.Clone(),
		// clone intermediate query.
		sql:  whq.sql.Clone(),
		path: whq.path,
	}
}

// WithFreelancer tells the query-builder to eager-load the nodes that are connected to
// the "freelancer" edge. The optional arguments are used to configure the query builder of the edge.
func (whq *WorkHistoryQuery) WithFreelancer(opts ...func(*UpworkFreelancerQuery)) *WorkHistoryQuery {
	query := (&UpworkFreelancerClient{config: whq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	whq.withFreelancer = query
	return whq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Title string `json:"title,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.WorkHistory.Query().
//		GroupBy(workhistory.FieldTitle).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (whq *WorkHistoryQuery) GroupBy(field string, fields ...string) *WorkHistoryGroupBy {
	whq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &WorkHistoryGroupBy{build: whq}
	grbuild.flds = &whq.ctx.Fields
	grbuild.label = workhistory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Title string `json:"title,omitempty"`
//	}
//
//	client.WorkHistory.Query().
//		Select(workhistory.FieldTitle).
//		Scan(ctx, &v)
func (whq *WorkHistoryQuery) Select(fields ...string) *WorkHistorySelect {
	whq.ctx.Fields = append(whq.ctx.Fields, fields...)
	sbuild := &WorkHistorySelect{WorkHistoryQuery: whq}
	sbuild.label = workhistory.Label
	sbuild.flds, sbuild.scan = &whq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a WorkHistorySelect configured with the given aggregations.
func (whq *WorkHistoryQuery) Aggregate(fns ...AggregateFunc) *WorkHistorySelect {
	return whq.Select().Aggregate(fns...)
}

func (whq *WorkHistoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range whq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, whq); err != nil {
				return err
			}
		}
	}
	for _, f := range whq.ctx.Fields {
		if !workhistory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if whq.path != nil {
		prev, err := whq.path(ctx)
		if err != nil {
			return err
		}
		whq.sql = prev
	}
	return nil
}

func (whq *WorkHistoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*WorkHistory, error) {
	var (
		nodes       = []*WorkHistory{}
		withFKs     = whq.withFKs
		_spec       = whq.querySpec()
		loadedTypes = [1]bool{
			whq.withFreelancer != nil,
		}
	)
	if whq.withFreelancer != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, workhistory.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*WorkHistory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &WorkHistory{config: whq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, whq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := whq.withFreelancer; query != nil {
		if err := whq.loadFreelancer(ctx, query, nodes, nil,
			func(n *WorkHistory, e *UpworkFreelancer) { n.Edges.Freelancer = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (whq *WorkHistoryQuery) loadFreelancer(ctx context.Context, query *UpworkFreelancerQuery, nodes []*WorkHistory, init func(*WorkHistory), assign func(*WorkHistory, *UpworkFreelancer)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*WorkHistory)
	for i := range nodes {
		if nodes[i].upwork_freelancer_work_histories == nil {
			continue
		}
		fk := *nodes[i].upwork_freelancer_work_histories
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(upworkfreelancer.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "upwork_freelancer_work_histories" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (whq *WorkHistoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := whq.querySpec()
	_spec.Node.Columns = whq.ctx.Fields
	if len(whq.ctx.Fields) > 0 {
		_spec.Unique = whq.ctx.Unique != nil && *whq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, whq.driver, _spec)
}

func (whq *WorkHistoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(workhistory.Table, workhistory.Columns, sqlgraph.NewFieldSpec(workhistory.FieldID, field.TypeInt))
	_spec.From = whq.sql
	if unique := whq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if whq.path != nil {
		_spec.Unique = true
	}
	if fields := whq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workhistory.FieldID)
		for i := range fields {
			if fields[i] != workhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := whq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := whq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := whq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := whq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (whq *WorkHistoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(whq.driver.Dialect())
	t1 := builder.Table(workhistory.Table)
	columns := whq.ctx.Fields
	if len(columns) == 0 {
		columns = workhistory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if whq.sql != nil {
		selector = whq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if whq.ctx.Unique != nil && *whq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range whq.predicates {
		p(selector)
	}
	for _, p := range whq.order {
		p(selector)
	}
	if offset := whq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := whq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WorkHistoryGroupBy is the group-by builder for WorkHistory entities.
type WorkHistoryGroupBy struct {
	selector
	build *WorkHistoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (whgb *WorkHistoryGroupBy) Aggregate(fns ...AggregateFunc) *WorkHistoryGroupBy {
	whgb.fns = append(whgb.fns, fns...)
	return whgb
}

// Scan applies the selector query and scans the result into the given value.
func (whgb *WorkHistoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, whgb.build.ctx, "GroupBy")
	if err := whgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WorkHistoryQuery, *WorkHistoryGroupBy](ctx, whgb.build, whgb, whgb.build.inters, v)
}

func (whgb *WorkHistoryGroupBy) sqlScan(ctx context.Context, root *WorkHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(whgb.fns))
	for _, fn := range whgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*whgb.flds)+len(whgb.fns))
		for _, f := range *whgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*whgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := whgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// WorkHistorySelect is the builder for selecting fields of WorkHistory entities.
type WorkHistorySelect struct {
	*WorkHistoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (whs *WorkHistorySelect) Aggregate(fns ...AggregateFunc) *WorkHistorySelect {
	whs.fns = append(whs.fns, fns...)
	return whs
}

// Scan applies the selector query and scans the result into the given value.
func (whs *WorkHistorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, whs.ctx, "Select")
	if err := whs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WorkHistoryQuery, *WorkHistorySelect](ctx, whs.WorkHistoryQuery, whs, whs.inters, v)
}

func (whs *WorkHistorySelect) sqlScan(ctx context.Context, root *WorkHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(whs.fns))
	for _, fn := range whs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*whs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := whs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
