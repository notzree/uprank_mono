// Code generated by ent, DO NOT EDIT.

package workhistory

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the workhistory type in the database.
	Label = "work_history"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldClientFeedback holds the string denoting the client_feedback field in the database.
	FieldClientFeedback = "client_feedback"
	// FieldOverallRating holds the string denoting the overall_rating field in the database.
	FieldOverallRating = "overall_rating"
	// FieldFreelancerEarnings holds the string denoting the freelancer_earnings field in the database.
	FieldFreelancerEarnings = "freelancer_earnings"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldEndDate holds the string denoting the end_date field in the database.
	FieldEndDate = "end_date"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldBudget holds the string denoting the budget field in the database.
	FieldBudget = "budget"
	// FieldClientRating holds the string denoting the client_rating field in the database.
	FieldClientRating = "client_rating"
	// FieldClientReviewCount holds the string denoting the client_review_count field in the database.
	FieldClientReviewCount = "client_review_count"
	// FieldClientCountry holds the string denoting the client_country field in the database.
	FieldClientCountry = "client_country"
	// FieldClientTotalJobsPosted holds the string denoting the client_total_jobs_posted field in the database.
	FieldClientTotalJobsPosted = "client_total_jobs_posted"
	// FieldClientTotalSpend holds the string denoting the client_total_spend field in the database.
	FieldClientTotalSpend = "client_total_spend"
	// FieldClientTotalHires holds the string denoting the client_total_hires field in the database.
	FieldClientTotalHires = "client_total_hires"
	// FieldClientActiveHires holds the string denoting the client_active_hires field in the database.
	FieldClientActiveHires = "client_active_hires"
	// FieldClientTotalPaidHours holds the string denoting the client_total_paid_hours field in the database.
	FieldClientTotalPaidHours = "client_total_paid_hours"
	// FieldClientAverageHourlyRatePaid holds the string denoting the client_average_hourly_rate_paid field in the database.
	FieldClientAverageHourlyRatePaid = "client_average_hourly_rate_paid"
	// FieldClientCompanyCategory holds the string denoting the client_company_category field in the database.
	FieldClientCompanyCategory = "client_company_category"
	// FieldClientCompanySize holds the string denoting the client_company_size field in the database.
	FieldClientCompanySize = "client_company_size"
	// FieldTotalProposals holds the string denoting the total_proposals field in the database.
	FieldTotalProposals = "total_proposals"
	// FieldNumberOfInterviews holds the string denoting the number_of_interviews field in the database.
	FieldNumberOfInterviews = "number_of_interviews"
	// FieldSkills holds the string denoting the skills field in the database.
	FieldSkills = "skills"
	// EdgeFreelancer holds the string denoting the freelancer edge name in mutations.
	EdgeFreelancer = "freelancer"
	// Table holds the table name of the workhistory in the database.
	Table = "work_histories"
	// FreelancerTable is the table that holds the freelancer relation/edge.
	FreelancerTable = "work_histories"
	// FreelancerInverseTable is the table name for the UpworkFreelancer entity.
	// It exists in this package in order to avoid circular dependency with the "upworkfreelancer" package.
	FreelancerInverseTable = "upwork_freelancers"
	// FreelancerColumn is the table column denoting the freelancer relation/edge.
	FreelancerColumn = "upwork_freelancer_work_histories"
)

// Columns holds all SQL columns for workhistory fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldClientFeedback,
	FieldOverallRating,
	FieldFreelancerEarnings,
	FieldStartDate,
	FieldEndDate,
	FieldDescription,
	FieldBudget,
	FieldClientRating,
	FieldClientReviewCount,
	FieldClientCountry,
	FieldClientTotalJobsPosted,
	FieldClientTotalSpend,
	FieldClientTotalHires,
	FieldClientActiveHires,
	FieldClientTotalPaidHours,
	FieldClientAverageHourlyRatePaid,
	FieldClientCompanyCategory,
	FieldClientCompanySize,
	FieldTotalProposals,
	FieldNumberOfInterviews,
	FieldSkills,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "work_histories"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"upwork_freelancer_work_histories",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the WorkHistory queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByClientFeedback orders the results by the client_feedback field.
func ByClientFeedback(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientFeedback, opts...).ToFunc()
}

// ByOverallRating orders the results by the overall_rating field.
func ByOverallRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOverallRating, opts...).ToFunc()
}

// ByFreelancerEarnings orders the results by the freelancer_earnings field.
func ByFreelancerEarnings(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFreelancerEarnings, opts...).ToFunc()
}

// ByStartDate orders the results by the start_date field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByEndDate orders the results by the end_date field.
func ByEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndDate, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByBudget orders the results by the budget field.
func ByBudget(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBudget, opts...).ToFunc()
}

// ByClientRating orders the results by the client_rating field.
func ByClientRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientRating, opts...).ToFunc()
}

// ByClientReviewCount orders the results by the client_review_count field.
func ByClientReviewCount(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientReviewCount, opts...).ToFunc()
}

// ByClientCountry orders the results by the client_country field.
func ByClientCountry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientCountry, opts...).ToFunc()
}

// ByClientTotalJobsPosted orders the results by the client_total_jobs_posted field.
func ByClientTotalJobsPosted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientTotalJobsPosted, opts...).ToFunc()
}

// ByClientTotalSpend orders the results by the client_total_spend field.
func ByClientTotalSpend(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientTotalSpend, opts...).ToFunc()
}

// ByClientTotalHires orders the results by the client_total_hires field.
func ByClientTotalHires(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientTotalHires, opts...).ToFunc()
}

// ByClientActiveHires orders the results by the client_active_hires field.
func ByClientActiveHires(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientActiveHires, opts...).ToFunc()
}

// ByClientTotalPaidHours orders the results by the client_total_paid_hours field.
func ByClientTotalPaidHours(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientTotalPaidHours, opts...).ToFunc()
}

// ByClientAverageHourlyRatePaid orders the results by the client_average_hourly_rate_paid field.
func ByClientAverageHourlyRatePaid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientAverageHourlyRatePaid, opts...).ToFunc()
}

// ByClientCompanyCategory orders the results by the client_company_category field.
func ByClientCompanyCategory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientCompanyCategory, opts...).ToFunc()
}

// ByClientCompanySize orders the results by the client_company_size field.
func ByClientCompanySize(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientCompanySize, opts...).ToFunc()
}

// ByTotalProposals orders the results by the total_proposals field.
func ByTotalProposals(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalProposals, opts...).ToFunc()
}

// ByNumberOfInterviews orders the results by the number_of_interviews field.
func ByNumberOfInterviews(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNumberOfInterviews, opts...).ToFunc()
}

// ByFreelancerField orders the results by freelancer field.
func ByFreelancerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFreelancerStep(), sql.OrderByField(field, opts...))
	}
}
func newFreelancerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FreelancerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, FreelancerTable, FreelancerColumn),
	)
}
