// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/notzree/uprank-backend/inference-backend/ent/job"
	"github.com/notzree/uprank-backend/inference-backend/ent/schema"
	"github.com/notzree/uprank-backend/inference-backend/ent/user"
)

// Job is the model entity for the Job schema.
type Job struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// OriginPlatform holds the value of the "origin_platform" field.
	OriginPlatform schema.Platform `json:"origin_platform,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobQuery when eager-loading is set.
	Edges        JobEdges `json:"edges"`
	user_job     *string
	selectValues sql.SelectValues
}

// JobEdges holds the relations/edges for other nodes in the graph.
type JobEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Upworkjob holds the value of the upworkjob edge.
	Upworkjob []*UpworkJob `json:"upworkjob,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// UpworkjobOrErr returns the Upworkjob value or an error if the edge
// was not loaded in eager-loading.
func (e JobEdges) UpworkjobOrErr() ([]*UpworkJob, error) {
	if e.loadedTypes[1] {
		return e.Upworkjob, nil
	}
	return nil, &NotLoadedError{edge: "upworkjob"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Job) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case job.FieldOriginPlatform:
			values[i] = new(sql.NullString)
		case job.FieldID:
			values[i] = new(uuid.UUID)
		case job.ForeignKeys[0]: // user_job
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Job fields.
func (j *Job) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case job.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				j.ID = *value
			}
		case job.FieldOriginPlatform:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field origin_platform", values[i])
			} else if value.Valid {
				j.OriginPlatform = schema.Platform(value.String)
			}
		case job.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_job", values[i])
			} else if value.Valid {
				j.user_job = new(string)
				*j.user_job = value.String
			}
		default:
			j.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Job.
// This includes values selected through modifiers, order, etc.
func (j *Job) Value(name string) (ent.Value, error) {
	return j.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Job entity.
func (j *Job) QueryUser() *UserQuery {
	return NewJobClient(j.config).QueryUser(j)
}

// QueryUpworkjob queries the "upworkjob" edge of the Job entity.
func (j *Job) QueryUpworkjob() *UpworkJobQuery {
	return NewJobClient(j.config).QueryUpworkjob(j)
}

// Update returns a builder for updating this Job.
// Note that you need to call Job.Unwrap() before calling this method if this Job
// was returned from a transaction, and the transaction was committed or rolled back.
func (j *Job) Update() *JobUpdateOne {
	return NewJobClient(j.config).UpdateOne(j)
}

// Unwrap unwraps the Job entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (j *Job) Unwrap() *Job {
	_tx, ok := j.config.driver.(*txDriver)
	if !ok {
		panic("ent: Job is not a transactional entity")
	}
	j.config.driver = _tx.drv
	return j
}

// String implements the fmt.Stringer.
func (j *Job) String() string {
	var builder strings.Builder
	builder.WriteString("Job(")
	builder.WriteString(fmt.Sprintf("id=%v, ", j.ID))
	builder.WriteString("origin_platform=")
	builder.WriteString(fmt.Sprintf("%v", j.OriginPlatform))
	builder.WriteByte(')')
	return builder.String()
}

// Jobs is a parsable slice of Job.
type Jobs []*Job
