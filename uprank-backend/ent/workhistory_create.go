// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/notzree/uprank-backend/ent/freelancer"
	"github.com/notzree/uprank-backend/ent/workhistory"
)

// WorkHistoryCreate is the builder for creating a WorkHistory entity.
type WorkHistoryCreate struct {
	config
	mutation *WorkHistoryMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (whc *WorkHistoryCreate) SetTitle(s string) *WorkHistoryCreate {
	whc.mutation.SetTitle(s)
	return whc
}

// SetClientFeedback sets the "client_feedback" field.
func (whc *WorkHistoryCreate) SetClientFeedback(s string) *WorkHistoryCreate {
	whc.mutation.SetClientFeedback(s)
	return whc
}

// SetOverallRating sets the "overall_rating" field.
func (whc *WorkHistoryCreate) SetOverallRating(f float64) *WorkHistoryCreate {
	whc.mutation.SetOverallRating(f)
	return whc
}

// SetFixedChargeAmount sets the "fixed_charge_amount" field.
func (whc *WorkHistoryCreate) SetFixedChargeAmount(i int) *WorkHistoryCreate {
	whc.mutation.SetFixedChargeAmount(i)
	return whc
}

// SetNillableFixedChargeAmount sets the "fixed_charge_amount" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableFixedChargeAmount(i *int) *WorkHistoryCreate {
	if i != nil {
		whc.SetFixedChargeAmount(*i)
	}
	return whc
}

// SetFixedChargeCurrency sets the "fixed_charge_currency" field.
func (whc *WorkHistoryCreate) SetFixedChargeCurrency(s string) *WorkHistoryCreate {
	whc.mutation.SetFixedChargeCurrency(s)
	return whc
}

// SetNillableFixedChargeCurrency sets the "fixed_charge_currency" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableFixedChargeCurrency(s *string) *WorkHistoryCreate {
	if s != nil {
		whc.SetFixedChargeCurrency(*s)
	}
	return whc
}

// SetHourlyChargeAmount sets the "hourly_charge_amount" field.
func (whc *WorkHistoryCreate) SetHourlyChargeAmount(i int) *WorkHistoryCreate {
	whc.mutation.SetHourlyChargeAmount(i)
	return whc
}

// SetNillableHourlyChargeAmount sets the "hourly_charge_amount" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableHourlyChargeAmount(i *int) *WorkHistoryCreate {
	if i != nil {
		whc.SetHourlyChargeAmount(*i)
	}
	return whc
}

// SetHourlyChargeCurrency sets the "hourly_charge_currency" field.
func (whc *WorkHistoryCreate) SetHourlyChargeCurrency(s string) *WorkHistoryCreate {
	whc.mutation.SetHourlyChargeCurrency(s)
	return whc
}

// SetNillableHourlyChargeCurrency sets the "hourly_charge_currency" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableHourlyChargeCurrency(s *string) *WorkHistoryCreate {
	if s != nil {
		whc.SetHourlyChargeCurrency(*s)
	}
	return whc
}

// SetStartDate sets the "start_date" field.
func (whc *WorkHistoryCreate) SetStartDate(t time.Time) *WorkHistoryCreate {
	whc.mutation.SetStartDate(t)
	return whc
}

// SetEndDate sets the "end_date" field.
func (whc *WorkHistoryCreate) SetEndDate(t time.Time) *WorkHistoryCreate {
	whc.mutation.SetEndDate(t)
	return whc
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableEndDate(t *time.Time) *WorkHistoryCreate {
	if t != nil {
		whc.SetEndDate(*t)
	}
	return whc
}

// SetJobDescription sets the "job_description" field.
func (whc *WorkHistoryCreate) SetJobDescription(s string) *WorkHistoryCreate {
	whc.mutation.SetJobDescription(s)
	return whc
}

// SetTotalProposals sets the "total_proposals" field.
func (whc *WorkHistoryCreate) SetTotalProposals(i int) *WorkHistoryCreate {
	whc.mutation.SetTotalProposals(i)
	return whc
}

// SetNumberOfInterviews sets the "number_of_interviews" field.
func (whc *WorkHistoryCreate) SetNumberOfInterviews(i int) *WorkHistoryCreate {
	whc.mutation.SetNumberOfInterviews(i)
	return whc
}

// SetSkills sets the "skills" field.
func (whc *WorkHistoryCreate) SetSkills(s []string) *WorkHistoryCreate {
	whc.mutation.SetSkills(s)
	return whc
}

// SetClientRating sets the "client_rating" field.
func (whc *WorkHistoryCreate) SetClientRating(f float64) *WorkHistoryCreate {
	whc.mutation.SetClientRating(f)
	return whc
}

// SetClientReviewCount sets the "client_review_count" field.
func (whc *WorkHistoryCreate) SetClientReviewCount(i int) *WorkHistoryCreate {
	whc.mutation.SetClientReviewCount(i)
	return whc
}

// SetClientCountry sets the "client_country" field.
func (whc *WorkHistoryCreate) SetClientCountry(s string) *WorkHistoryCreate {
	whc.mutation.SetClientCountry(s)
	return whc
}

// SetClientTotalJobsPosted sets the "client_total_jobs_posted" field.
func (whc *WorkHistoryCreate) SetClientTotalJobsPosted(i int) *WorkHistoryCreate {
	whc.mutation.SetClientTotalJobsPosted(i)
	return whc
}

// SetClientTotalSpend sets the "client_total_spend" field.
func (whc *WorkHistoryCreate) SetClientTotalSpend(f float64) *WorkHistoryCreate {
	whc.mutation.SetClientTotalSpend(f)
	return whc
}

// SetClientTotalHires sets the "client_total_hires" field.
func (whc *WorkHistoryCreate) SetClientTotalHires(i int) *WorkHistoryCreate {
	whc.mutation.SetClientTotalHires(i)
	return whc
}

// SetNillableClientTotalHires sets the "client_total_hires" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableClientTotalHires(i *int) *WorkHistoryCreate {
	if i != nil {
		whc.SetClientTotalHires(*i)
	}
	return whc
}

// SetClientTotalPaidHours sets the "client_total_paid_hours" field.
func (whc *WorkHistoryCreate) SetClientTotalPaidHours(i int) *WorkHistoryCreate {
	whc.mutation.SetClientTotalPaidHours(i)
	return whc
}

// SetNillableClientTotalPaidHours sets the "client_total_paid_hours" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableClientTotalPaidHours(i *int) *WorkHistoryCreate {
	if i != nil {
		whc.SetClientTotalPaidHours(*i)
	}
	return whc
}

// SetClientAverageHourlyRatePaid sets the "client_average_hourly_rate_paid" field.
func (whc *WorkHistoryCreate) SetClientAverageHourlyRatePaid(f float64) *WorkHistoryCreate {
	whc.mutation.SetClientAverageHourlyRatePaid(f)
	return whc
}

// SetNillableClientAverageHourlyRatePaid sets the "client_average_hourly_rate_paid" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableClientAverageHourlyRatePaid(f *float64) *WorkHistoryCreate {
	if f != nil {
		whc.SetClientAverageHourlyRatePaid(*f)
	}
	return whc
}

// SetClientCompanyCategory sets the "client_company_category" field.
func (whc *WorkHistoryCreate) SetClientCompanyCategory(s string) *WorkHistoryCreate {
	whc.mutation.SetClientCompanyCategory(s)
	return whc
}

// SetNillableClientCompanyCategory sets the "client_company_category" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableClientCompanyCategory(s *string) *WorkHistoryCreate {
	if s != nil {
		whc.SetClientCompanyCategory(*s)
	}
	return whc
}

// SetClientCompanySize sets the "client_company_size" field.
func (whc *WorkHistoryCreate) SetClientCompanySize(s string) *WorkHistoryCreate {
	whc.mutation.SetClientCompanySize(s)
	return whc
}

// SetNillableClientCompanySize sets the "client_company_size" field if the given value is not nil.
func (whc *WorkHistoryCreate) SetNillableClientCompanySize(s *string) *WorkHistoryCreate {
	if s != nil {
		whc.SetClientCompanySize(*s)
	}
	return whc
}

// SetUpworkFreelancerProposalID sets the "upwork_Freelancer_Proposal" edge to the Freelancer entity by ID.
func (whc *WorkHistoryCreate) SetUpworkFreelancerProposalID(id uuid.UUID) *WorkHistoryCreate {
	whc.mutation.SetUpworkFreelancerProposalID(id)
	return whc
}

// SetUpworkFreelancerProposal sets the "upwork_Freelancer_Proposal" edge to the Freelancer entity.
func (whc *WorkHistoryCreate) SetUpworkFreelancerProposal(f *Freelancer) *WorkHistoryCreate {
	return whc.SetUpworkFreelancerProposalID(f.ID)
}

// Mutation returns the WorkHistoryMutation object of the builder.
func (whc *WorkHistoryCreate) Mutation() *WorkHistoryMutation {
	return whc.mutation
}

// Save creates the WorkHistory in the database.
func (whc *WorkHistoryCreate) Save(ctx context.Context) (*WorkHistory, error) {
	return withHooks(ctx, whc.sqlSave, whc.mutation, whc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (whc *WorkHistoryCreate) SaveX(ctx context.Context) *WorkHistory {
	v, err := whc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (whc *WorkHistoryCreate) Exec(ctx context.Context) error {
	_, err := whc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (whc *WorkHistoryCreate) ExecX(ctx context.Context) {
	if err := whc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (whc *WorkHistoryCreate) check() error {
	if _, ok := whc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "WorkHistory.title"`)}
	}
	if _, ok := whc.mutation.ClientFeedback(); !ok {
		return &ValidationError{Name: "client_feedback", err: errors.New(`ent: missing required field "WorkHistory.client_feedback"`)}
	}
	if _, ok := whc.mutation.OverallRating(); !ok {
		return &ValidationError{Name: "overall_rating", err: errors.New(`ent: missing required field "WorkHistory.overall_rating"`)}
	}
	if _, ok := whc.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`ent: missing required field "WorkHistory.start_date"`)}
	}
	if _, ok := whc.mutation.JobDescription(); !ok {
		return &ValidationError{Name: "job_description", err: errors.New(`ent: missing required field "WorkHistory.job_description"`)}
	}
	if _, ok := whc.mutation.TotalProposals(); !ok {
		return &ValidationError{Name: "total_proposals", err: errors.New(`ent: missing required field "WorkHistory.total_proposals"`)}
	}
	if _, ok := whc.mutation.NumberOfInterviews(); !ok {
		return &ValidationError{Name: "number_of_interviews", err: errors.New(`ent: missing required field "WorkHistory.number_of_interviews"`)}
	}
	if _, ok := whc.mutation.Skills(); !ok {
		return &ValidationError{Name: "skills", err: errors.New(`ent: missing required field "WorkHistory.skills"`)}
	}
	if _, ok := whc.mutation.ClientRating(); !ok {
		return &ValidationError{Name: "client_rating", err: errors.New(`ent: missing required field "WorkHistory.client_rating"`)}
	}
	if _, ok := whc.mutation.ClientReviewCount(); !ok {
		return &ValidationError{Name: "client_review_count", err: errors.New(`ent: missing required field "WorkHistory.client_review_count"`)}
	}
	if _, ok := whc.mutation.ClientCountry(); !ok {
		return &ValidationError{Name: "client_country", err: errors.New(`ent: missing required field "WorkHistory.client_country"`)}
	}
	if _, ok := whc.mutation.ClientTotalJobsPosted(); !ok {
		return &ValidationError{Name: "client_total_jobs_posted", err: errors.New(`ent: missing required field "WorkHistory.client_total_jobs_posted"`)}
	}
	if _, ok := whc.mutation.ClientTotalSpend(); !ok {
		return &ValidationError{Name: "client_total_spend", err: errors.New(`ent: missing required field "WorkHistory.client_total_spend"`)}
	}
	if _, ok := whc.mutation.UpworkFreelancerProposalID(); !ok {
		return &ValidationError{Name: "upwork_Freelancer_Proposal", err: errors.New(`ent: missing required edge "WorkHistory.upwork_Freelancer_Proposal"`)}
	}
	return nil
}

func (whc *WorkHistoryCreate) sqlSave(ctx context.Context) (*WorkHistory, error) {
	if err := whc.check(); err != nil {
		return nil, err
	}
	_node, _spec := whc.createSpec()
	if err := sqlgraph.CreateNode(ctx, whc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	whc.mutation.id = &_node.ID
	whc.mutation.done = true
	return _node, nil
}

func (whc *WorkHistoryCreate) createSpec() (*WorkHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkHistory{config: whc.config}
		_spec = sqlgraph.NewCreateSpec(workhistory.Table, sqlgraph.NewFieldSpec(workhistory.FieldID, field.TypeInt))
	)
	if value, ok := whc.mutation.Title(); ok {
		_spec.SetField(workhistory.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := whc.mutation.ClientFeedback(); ok {
		_spec.SetField(workhistory.FieldClientFeedback, field.TypeString, value)
		_node.ClientFeedback = value
	}
	if value, ok := whc.mutation.OverallRating(); ok {
		_spec.SetField(workhistory.FieldOverallRating, field.TypeFloat64, value)
		_node.OverallRating = value
	}
	if value, ok := whc.mutation.FixedChargeAmount(); ok {
		_spec.SetField(workhistory.FieldFixedChargeAmount, field.TypeInt, value)
		_node.FixedChargeAmount = value
	}
	if value, ok := whc.mutation.FixedChargeCurrency(); ok {
		_spec.SetField(workhistory.FieldFixedChargeCurrency, field.TypeString, value)
		_node.FixedChargeCurrency = value
	}
	if value, ok := whc.mutation.HourlyChargeAmount(); ok {
		_spec.SetField(workhistory.FieldHourlyChargeAmount, field.TypeInt, value)
		_node.HourlyChargeAmount = value
	}
	if value, ok := whc.mutation.HourlyChargeCurrency(); ok {
		_spec.SetField(workhistory.FieldHourlyChargeCurrency, field.TypeString, value)
		_node.HourlyChargeCurrency = value
	}
	if value, ok := whc.mutation.StartDate(); ok {
		_spec.SetField(workhistory.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := whc.mutation.EndDate(); ok {
		_spec.SetField(workhistory.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := whc.mutation.JobDescription(); ok {
		_spec.SetField(workhistory.FieldJobDescription, field.TypeString, value)
		_node.JobDescription = value
	}
	if value, ok := whc.mutation.TotalProposals(); ok {
		_spec.SetField(workhistory.FieldTotalProposals, field.TypeInt, value)
		_node.TotalProposals = value
	}
	if value, ok := whc.mutation.NumberOfInterviews(); ok {
		_spec.SetField(workhistory.FieldNumberOfInterviews, field.TypeInt, value)
		_node.NumberOfInterviews = value
	}
	if value, ok := whc.mutation.Skills(); ok {
		_spec.SetField(workhistory.FieldSkills, field.TypeJSON, value)
		_node.Skills = value
	}
	if value, ok := whc.mutation.ClientRating(); ok {
		_spec.SetField(workhistory.FieldClientRating, field.TypeFloat64, value)
		_node.ClientRating = value
	}
	if value, ok := whc.mutation.ClientReviewCount(); ok {
		_spec.SetField(workhistory.FieldClientReviewCount, field.TypeInt, value)
		_node.ClientReviewCount = value
	}
	if value, ok := whc.mutation.ClientCountry(); ok {
		_spec.SetField(workhistory.FieldClientCountry, field.TypeString, value)
		_node.ClientCountry = value
	}
	if value, ok := whc.mutation.ClientTotalJobsPosted(); ok {
		_spec.SetField(workhistory.FieldClientTotalJobsPosted, field.TypeInt, value)
		_node.ClientTotalJobsPosted = value
	}
	if value, ok := whc.mutation.ClientTotalSpend(); ok {
		_spec.SetField(workhistory.FieldClientTotalSpend, field.TypeFloat64, value)
		_node.ClientTotalSpend = value
	}
	if value, ok := whc.mutation.ClientTotalHires(); ok {
		_spec.SetField(workhistory.FieldClientTotalHires, field.TypeInt, value)
		_node.ClientTotalHires = value
	}
	if value, ok := whc.mutation.ClientTotalPaidHours(); ok {
		_spec.SetField(workhistory.FieldClientTotalPaidHours, field.TypeInt, value)
		_node.ClientTotalPaidHours = value
	}
	if value, ok := whc.mutation.ClientAverageHourlyRatePaid(); ok {
		_spec.SetField(workhistory.FieldClientAverageHourlyRatePaid, field.TypeFloat64, value)
		_node.ClientAverageHourlyRatePaid = value
	}
	if value, ok := whc.mutation.ClientCompanyCategory(); ok {
		_spec.SetField(workhistory.FieldClientCompanyCategory, field.TypeString, value)
		_node.ClientCompanyCategory = value
	}
	if value, ok := whc.mutation.ClientCompanySize(); ok {
		_spec.SetField(workhistory.FieldClientCompanySize, field.TypeString, value)
		_node.ClientCompanySize = value
	}
	if nodes := whc.mutation.UpworkFreelancerProposalIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workhistory.UpworkFreelancerProposalTable,
			Columns: []string{workhistory.UpworkFreelancerProposalColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(freelancer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.freelancer_work_histories = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WorkHistoryCreateBulk is the builder for creating many WorkHistory entities in bulk.
type WorkHistoryCreateBulk struct {
	config
	err      error
	builders []*WorkHistoryCreate
}

// Save creates the WorkHistory entities in the database.
func (whcb *WorkHistoryCreateBulk) Save(ctx context.Context) ([]*WorkHistory, error) {
	if whcb.err != nil {
		return nil, whcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(whcb.builders))
	nodes := make([]*WorkHistory, len(whcb.builders))
	mutators := make([]Mutator, len(whcb.builders))
	for i := range whcb.builders {
		func(i int, root context.Context) {
			builder := whcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, whcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, whcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, whcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (whcb *WorkHistoryCreateBulk) SaveX(ctx context.Context) []*WorkHistory {
	v, err := whcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (whcb *WorkHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := whcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (whcb *WorkHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := whcb.Exec(ctx); err != nil {
		panic(err)
	}
}
