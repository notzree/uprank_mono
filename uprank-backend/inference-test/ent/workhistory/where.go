// Code generated by ent, DO NOT EDIT.

package workhistory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/notzree/uprank-backend/inference-backend/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldTitle, v))
}

// ClientFeedback applies equality check predicate on the "client_feedback" field. It's identical to ClientFeedbackEQ.
func ClientFeedback(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldClientFeedback, v))
}

// OverallRating applies equality check predicate on the "overall_rating" field. It's identical to OverallRatingEQ.
func OverallRating(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldOverallRating, v))
}

// FreelancerEarnings applies equality check predicate on the "freelancer_earnings" field. It's identical to FreelancerEarningsEQ.
func FreelancerEarnings(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldFreelancerEarnings, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldEndDate, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldDescription, v))
}

// Budget applies equality check predicate on the "budget" field. It's identical to BudgetEQ.
func Budget(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldBudget, v))
}

// ClientRating applies equality check predicate on the "client_rating" field. It's identical to ClientRatingEQ.
func ClientRating(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldClientRating, v))
}

// ClientReviewCount applies equality check predicate on the "client_review_count" field. It's identical to ClientReviewCountEQ.
func ClientReviewCount(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldClientReviewCount, v))
}

// ClientCountry applies equality check predicate on the "client_country" field. It's identical to ClientCountryEQ.
func ClientCountry(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldClientCountry, v))
}

// ClientTotalJobsPosted applies equality check predicate on the "client_total_jobs_posted" field. It's identical to ClientTotalJobsPostedEQ.
func ClientTotalJobsPosted(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldClientTotalJobsPosted, v))
}

// ClientTotalSpend applies equality check predicate on the "client_total_spend" field. It's identical to ClientTotalSpendEQ.
func ClientTotalSpend(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldClientTotalSpend, v))
}

// ClientTotalHires applies equality check predicate on the "client_total_hires" field. It's identical to ClientTotalHiresEQ.
func ClientTotalHires(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldClientTotalHires, v))
}

// ClientActiveHires applies equality check predicate on the "client_active_hires" field. It's identical to ClientActiveHiresEQ.
func ClientActiveHires(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldClientActiveHires, v))
}

// ClientTotalPaidHours applies equality check predicate on the "client_total_paid_hours" field. It's identical to ClientTotalPaidHoursEQ.
func ClientTotalPaidHours(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldClientTotalPaidHours, v))
}

// ClientAverageHourlyRatePaid applies equality check predicate on the "client_average_hourly_rate_paid" field. It's identical to ClientAverageHourlyRatePaidEQ.
func ClientAverageHourlyRatePaid(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldClientAverageHourlyRatePaid, v))
}

// ClientCompanyCategory applies equality check predicate on the "client_company_category" field. It's identical to ClientCompanyCategoryEQ.
func ClientCompanyCategory(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldClientCompanyCategory, v))
}

// ClientCompanySize applies equality check predicate on the "client_company_size" field. It's identical to ClientCompanySizeEQ.
func ClientCompanySize(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldClientCompanySize, v))
}

// TotalProposals applies equality check predicate on the "total_proposals" field. It's identical to TotalProposalsEQ.
func TotalProposals(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldTotalProposals, v))
}

// NumberOfInterviews applies equality check predicate on the "number_of_interviews" field. It's identical to NumberOfInterviewsEQ.
func NumberOfInterviews(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldNumberOfInterviews, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldContainsFold(FieldTitle, v))
}

// ClientFeedbackEQ applies the EQ predicate on the "client_feedback" field.
func ClientFeedbackEQ(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldClientFeedback, v))
}

// ClientFeedbackNEQ applies the NEQ predicate on the "client_feedback" field.
func ClientFeedbackNEQ(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNEQ(FieldClientFeedback, v))
}

// ClientFeedbackIn applies the In predicate on the "client_feedback" field.
func ClientFeedbackIn(vs ...string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIn(FieldClientFeedback, vs...))
}

// ClientFeedbackNotIn applies the NotIn predicate on the "client_feedback" field.
func ClientFeedbackNotIn(vs ...string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotIn(FieldClientFeedback, vs...))
}

// ClientFeedbackGT applies the GT predicate on the "client_feedback" field.
func ClientFeedbackGT(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGT(FieldClientFeedback, v))
}

// ClientFeedbackGTE applies the GTE predicate on the "client_feedback" field.
func ClientFeedbackGTE(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGTE(FieldClientFeedback, v))
}

// ClientFeedbackLT applies the LT predicate on the "client_feedback" field.
func ClientFeedbackLT(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLT(FieldClientFeedback, v))
}

// ClientFeedbackLTE applies the LTE predicate on the "client_feedback" field.
func ClientFeedbackLTE(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLTE(FieldClientFeedback, v))
}

// ClientFeedbackContains applies the Contains predicate on the "client_feedback" field.
func ClientFeedbackContains(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldContains(FieldClientFeedback, v))
}

// ClientFeedbackHasPrefix applies the HasPrefix predicate on the "client_feedback" field.
func ClientFeedbackHasPrefix(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldHasPrefix(FieldClientFeedback, v))
}

// ClientFeedbackHasSuffix applies the HasSuffix predicate on the "client_feedback" field.
func ClientFeedbackHasSuffix(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldHasSuffix(FieldClientFeedback, v))
}

// ClientFeedbackIsNil applies the IsNil predicate on the "client_feedback" field.
func ClientFeedbackIsNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIsNull(FieldClientFeedback))
}

// ClientFeedbackNotNil applies the NotNil predicate on the "client_feedback" field.
func ClientFeedbackNotNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotNull(FieldClientFeedback))
}

// ClientFeedbackEqualFold applies the EqualFold predicate on the "client_feedback" field.
func ClientFeedbackEqualFold(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEqualFold(FieldClientFeedback, v))
}

// ClientFeedbackContainsFold applies the ContainsFold predicate on the "client_feedback" field.
func ClientFeedbackContainsFold(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldContainsFold(FieldClientFeedback, v))
}

// OverallRatingEQ applies the EQ predicate on the "overall_rating" field.
func OverallRatingEQ(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldOverallRating, v))
}

// OverallRatingNEQ applies the NEQ predicate on the "overall_rating" field.
func OverallRatingNEQ(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNEQ(FieldOverallRating, v))
}

// OverallRatingIn applies the In predicate on the "overall_rating" field.
func OverallRatingIn(vs ...float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIn(FieldOverallRating, vs...))
}

// OverallRatingNotIn applies the NotIn predicate on the "overall_rating" field.
func OverallRatingNotIn(vs ...float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotIn(FieldOverallRating, vs...))
}

// OverallRatingGT applies the GT predicate on the "overall_rating" field.
func OverallRatingGT(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGT(FieldOverallRating, v))
}

// OverallRatingGTE applies the GTE predicate on the "overall_rating" field.
func OverallRatingGTE(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGTE(FieldOverallRating, v))
}

// OverallRatingLT applies the LT predicate on the "overall_rating" field.
func OverallRatingLT(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLT(FieldOverallRating, v))
}

// OverallRatingLTE applies the LTE predicate on the "overall_rating" field.
func OverallRatingLTE(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLTE(FieldOverallRating, v))
}

// OverallRatingIsNil applies the IsNil predicate on the "overall_rating" field.
func OverallRatingIsNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIsNull(FieldOverallRating))
}

// OverallRatingNotNil applies the NotNil predicate on the "overall_rating" field.
func OverallRatingNotNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotNull(FieldOverallRating))
}

// FreelancerEarningsEQ applies the EQ predicate on the "freelancer_earnings" field.
func FreelancerEarningsEQ(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldFreelancerEarnings, v))
}

// FreelancerEarningsNEQ applies the NEQ predicate on the "freelancer_earnings" field.
func FreelancerEarningsNEQ(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNEQ(FieldFreelancerEarnings, v))
}

// FreelancerEarningsIn applies the In predicate on the "freelancer_earnings" field.
func FreelancerEarningsIn(vs ...float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIn(FieldFreelancerEarnings, vs...))
}

// FreelancerEarningsNotIn applies the NotIn predicate on the "freelancer_earnings" field.
func FreelancerEarningsNotIn(vs ...float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotIn(FieldFreelancerEarnings, vs...))
}

// FreelancerEarningsGT applies the GT predicate on the "freelancer_earnings" field.
func FreelancerEarningsGT(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGT(FieldFreelancerEarnings, v))
}

// FreelancerEarningsGTE applies the GTE predicate on the "freelancer_earnings" field.
func FreelancerEarningsGTE(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGTE(FieldFreelancerEarnings, v))
}

// FreelancerEarningsLT applies the LT predicate on the "freelancer_earnings" field.
func FreelancerEarningsLT(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLT(FieldFreelancerEarnings, v))
}

// FreelancerEarningsLTE applies the LTE predicate on the "freelancer_earnings" field.
func FreelancerEarningsLTE(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLTE(FieldFreelancerEarnings, v))
}

// FreelancerEarningsIsNil applies the IsNil predicate on the "freelancer_earnings" field.
func FreelancerEarningsIsNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIsNull(FieldFreelancerEarnings))
}

// FreelancerEarningsNotNil applies the NotNil predicate on the "freelancer_earnings" field.
func FreelancerEarningsNotNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotNull(FieldFreelancerEarnings))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLTE(FieldStartDate, v))
}

// StartDateIsNil applies the IsNil predicate on the "start_date" field.
func StartDateIsNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIsNull(FieldStartDate))
}

// StartDateNotNil applies the NotNil predicate on the "start_date" field.
func StartDateNotNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotNull(FieldStartDate))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLTE(FieldEndDate, v))
}

// EndDateIsNil applies the IsNil predicate on the "end_date" field.
func EndDateIsNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIsNull(FieldEndDate))
}

// EndDateNotNil applies the NotNil predicate on the "end_date" field.
func EndDateNotNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotNull(FieldEndDate))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldContainsFold(FieldDescription, v))
}

// BudgetEQ applies the EQ predicate on the "budget" field.
func BudgetEQ(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldBudget, v))
}

// BudgetNEQ applies the NEQ predicate on the "budget" field.
func BudgetNEQ(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNEQ(FieldBudget, v))
}

// BudgetIn applies the In predicate on the "budget" field.
func BudgetIn(vs ...float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIn(FieldBudget, vs...))
}

// BudgetNotIn applies the NotIn predicate on the "budget" field.
func BudgetNotIn(vs ...float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotIn(FieldBudget, vs...))
}

// BudgetGT applies the GT predicate on the "budget" field.
func BudgetGT(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGT(FieldBudget, v))
}

// BudgetGTE applies the GTE predicate on the "budget" field.
func BudgetGTE(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGTE(FieldBudget, v))
}

// BudgetLT applies the LT predicate on the "budget" field.
func BudgetLT(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLT(FieldBudget, v))
}

// BudgetLTE applies the LTE predicate on the "budget" field.
func BudgetLTE(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLTE(FieldBudget, v))
}

// BudgetIsNil applies the IsNil predicate on the "budget" field.
func BudgetIsNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIsNull(FieldBudget))
}

// BudgetNotNil applies the NotNil predicate on the "budget" field.
func BudgetNotNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotNull(FieldBudget))
}

// ClientRatingEQ applies the EQ predicate on the "client_rating" field.
func ClientRatingEQ(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldClientRating, v))
}

// ClientRatingNEQ applies the NEQ predicate on the "client_rating" field.
func ClientRatingNEQ(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNEQ(FieldClientRating, v))
}

// ClientRatingIn applies the In predicate on the "client_rating" field.
func ClientRatingIn(vs ...float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIn(FieldClientRating, vs...))
}

// ClientRatingNotIn applies the NotIn predicate on the "client_rating" field.
func ClientRatingNotIn(vs ...float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotIn(FieldClientRating, vs...))
}

// ClientRatingGT applies the GT predicate on the "client_rating" field.
func ClientRatingGT(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGT(FieldClientRating, v))
}

// ClientRatingGTE applies the GTE predicate on the "client_rating" field.
func ClientRatingGTE(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGTE(FieldClientRating, v))
}

// ClientRatingLT applies the LT predicate on the "client_rating" field.
func ClientRatingLT(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLT(FieldClientRating, v))
}

// ClientRatingLTE applies the LTE predicate on the "client_rating" field.
func ClientRatingLTE(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLTE(FieldClientRating, v))
}

// ClientRatingIsNil applies the IsNil predicate on the "client_rating" field.
func ClientRatingIsNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIsNull(FieldClientRating))
}

// ClientRatingNotNil applies the NotNil predicate on the "client_rating" field.
func ClientRatingNotNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotNull(FieldClientRating))
}

// ClientReviewCountEQ applies the EQ predicate on the "client_review_count" field.
func ClientReviewCountEQ(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldClientReviewCount, v))
}

// ClientReviewCountNEQ applies the NEQ predicate on the "client_review_count" field.
func ClientReviewCountNEQ(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNEQ(FieldClientReviewCount, v))
}

// ClientReviewCountIn applies the In predicate on the "client_review_count" field.
func ClientReviewCountIn(vs ...int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIn(FieldClientReviewCount, vs...))
}

// ClientReviewCountNotIn applies the NotIn predicate on the "client_review_count" field.
func ClientReviewCountNotIn(vs ...int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotIn(FieldClientReviewCount, vs...))
}

// ClientReviewCountGT applies the GT predicate on the "client_review_count" field.
func ClientReviewCountGT(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGT(FieldClientReviewCount, v))
}

// ClientReviewCountGTE applies the GTE predicate on the "client_review_count" field.
func ClientReviewCountGTE(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGTE(FieldClientReviewCount, v))
}

// ClientReviewCountLT applies the LT predicate on the "client_review_count" field.
func ClientReviewCountLT(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLT(FieldClientReviewCount, v))
}

// ClientReviewCountLTE applies the LTE predicate on the "client_review_count" field.
func ClientReviewCountLTE(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLTE(FieldClientReviewCount, v))
}

// ClientReviewCountIsNil applies the IsNil predicate on the "client_review_count" field.
func ClientReviewCountIsNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIsNull(FieldClientReviewCount))
}

// ClientReviewCountNotNil applies the NotNil predicate on the "client_review_count" field.
func ClientReviewCountNotNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotNull(FieldClientReviewCount))
}

// ClientCountryEQ applies the EQ predicate on the "client_country" field.
func ClientCountryEQ(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldClientCountry, v))
}

// ClientCountryNEQ applies the NEQ predicate on the "client_country" field.
func ClientCountryNEQ(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNEQ(FieldClientCountry, v))
}

// ClientCountryIn applies the In predicate on the "client_country" field.
func ClientCountryIn(vs ...string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIn(FieldClientCountry, vs...))
}

// ClientCountryNotIn applies the NotIn predicate on the "client_country" field.
func ClientCountryNotIn(vs ...string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotIn(FieldClientCountry, vs...))
}

// ClientCountryGT applies the GT predicate on the "client_country" field.
func ClientCountryGT(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGT(FieldClientCountry, v))
}

// ClientCountryGTE applies the GTE predicate on the "client_country" field.
func ClientCountryGTE(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGTE(FieldClientCountry, v))
}

// ClientCountryLT applies the LT predicate on the "client_country" field.
func ClientCountryLT(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLT(FieldClientCountry, v))
}

// ClientCountryLTE applies the LTE predicate on the "client_country" field.
func ClientCountryLTE(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLTE(FieldClientCountry, v))
}

// ClientCountryContains applies the Contains predicate on the "client_country" field.
func ClientCountryContains(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldContains(FieldClientCountry, v))
}

// ClientCountryHasPrefix applies the HasPrefix predicate on the "client_country" field.
func ClientCountryHasPrefix(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldHasPrefix(FieldClientCountry, v))
}

// ClientCountryHasSuffix applies the HasSuffix predicate on the "client_country" field.
func ClientCountryHasSuffix(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldHasSuffix(FieldClientCountry, v))
}

// ClientCountryIsNil applies the IsNil predicate on the "client_country" field.
func ClientCountryIsNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIsNull(FieldClientCountry))
}

// ClientCountryNotNil applies the NotNil predicate on the "client_country" field.
func ClientCountryNotNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotNull(FieldClientCountry))
}

// ClientCountryEqualFold applies the EqualFold predicate on the "client_country" field.
func ClientCountryEqualFold(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEqualFold(FieldClientCountry, v))
}

// ClientCountryContainsFold applies the ContainsFold predicate on the "client_country" field.
func ClientCountryContainsFold(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldContainsFold(FieldClientCountry, v))
}

// ClientTotalJobsPostedEQ applies the EQ predicate on the "client_total_jobs_posted" field.
func ClientTotalJobsPostedEQ(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldClientTotalJobsPosted, v))
}

// ClientTotalJobsPostedNEQ applies the NEQ predicate on the "client_total_jobs_posted" field.
func ClientTotalJobsPostedNEQ(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNEQ(FieldClientTotalJobsPosted, v))
}

// ClientTotalJobsPostedIn applies the In predicate on the "client_total_jobs_posted" field.
func ClientTotalJobsPostedIn(vs ...int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIn(FieldClientTotalJobsPosted, vs...))
}

// ClientTotalJobsPostedNotIn applies the NotIn predicate on the "client_total_jobs_posted" field.
func ClientTotalJobsPostedNotIn(vs ...int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotIn(FieldClientTotalJobsPosted, vs...))
}

// ClientTotalJobsPostedGT applies the GT predicate on the "client_total_jobs_posted" field.
func ClientTotalJobsPostedGT(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGT(FieldClientTotalJobsPosted, v))
}

// ClientTotalJobsPostedGTE applies the GTE predicate on the "client_total_jobs_posted" field.
func ClientTotalJobsPostedGTE(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGTE(FieldClientTotalJobsPosted, v))
}

// ClientTotalJobsPostedLT applies the LT predicate on the "client_total_jobs_posted" field.
func ClientTotalJobsPostedLT(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLT(FieldClientTotalJobsPosted, v))
}

// ClientTotalJobsPostedLTE applies the LTE predicate on the "client_total_jobs_posted" field.
func ClientTotalJobsPostedLTE(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLTE(FieldClientTotalJobsPosted, v))
}

// ClientTotalJobsPostedIsNil applies the IsNil predicate on the "client_total_jobs_posted" field.
func ClientTotalJobsPostedIsNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIsNull(FieldClientTotalJobsPosted))
}

// ClientTotalJobsPostedNotNil applies the NotNil predicate on the "client_total_jobs_posted" field.
func ClientTotalJobsPostedNotNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotNull(FieldClientTotalJobsPosted))
}

// ClientTotalSpendEQ applies the EQ predicate on the "client_total_spend" field.
func ClientTotalSpendEQ(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldClientTotalSpend, v))
}

// ClientTotalSpendNEQ applies the NEQ predicate on the "client_total_spend" field.
func ClientTotalSpendNEQ(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNEQ(FieldClientTotalSpend, v))
}

// ClientTotalSpendIn applies the In predicate on the "client_total_spend" field.
func ClientTotalSpendIn(vs ...float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIn(FieldClientTotalSpend, vs...))
}

// ClientTotalSpendNotIn applies the NotIn predicate on the "client_total_spend" field.
func ClientTotalSpendNotIn(vs ...float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotIn(FieldClientTotalSpend, vs...))
}

// ClientTotalSpendGT applies the GT predicate on the "client_total_spend" field.
func ClientTotalSpendGT(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGT(FieldClientTotalSpend, v))
}

// ClientTotalSpendGTE applies the GTE predicate on the "client_total_spend" field.
func ClientTotalSpendGTE(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGTE(FieldClientTotalSpend, v))
}

// ClientTotalSpendLT applies the LT predicate on the "client_total_spend" field.
func ClientTotalSpendLT(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLT(FieldClientTotalSpend, v))
}

// ClientTotalSpendLTE applies the LTE predicate on the "client_total_spend" field.
func ClientTotalSpendLTE(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLTE(FieldClientTotalSpend, v))
}

// ClientTotalSpendIsNil applies the IsNil predicate on the "client_total_spend" field.
func ClientTotalSpendIsNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIsNull(FieldClientTotalSpend))
}

// ClientTotalSpendNotNil applies the NotNil predicate on the "client_total_spend" field.
func ClientTotalSpendNotNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotNull(FieldClientTotalSpend))
}

// ClientTotalHiresEQ applies the EQ predicate on the "client_total_hires" field.
func ClientTotalHiresEQ(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldClientTotalHires, v))
}

// ClientTotalHiresNEQ applies the NEQ predicate on the "client_total_hires" field.
func ClientTotalHiresNEQ(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNEQ(FieldClientTotalHires, v))
}

// ClientTotalHiresIn applies the In predicate on the "client_total_hires" field.
func ClientTotalHiresIn(vs ...int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIn(FieldClientTotalHires, vs...))
}

// ClientTotalHiresNotIn applies the NotIn predicate on the "client_total_hires" field.
func ClientTotalHiresNotIn(vs ...int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotIn(FieldClientTotalHires, vs...))
}

// ClientTotalHiresGT applies the GT predicate on the "client_total_hires" field.
func ClientTotalHiresGT(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGT(FieldClientTotalHires, v))
}

// ClientTotalHiresGTE applies the GTE predicate on the "client_total_hires" field.
func ClientTotalHiresGTE(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGTE(FieldClientTotalHires, v))
}

// ClientTotalHiresLT applies the LT predicate on the "client_total_hires" field.
func ClientTotalHiresLT(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLT(FieldClientTotalHires, v))
}

// ClientTotalHiresLTE applies the LTE predicate on the "client_total_hires" field.
func ClientTotalHiresLTE(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLTE(FieldClientTotalHires, v))
}

// ClientTotalHiresIsNil applies the IsNil predicate on the "client_total_hires" field.
func ClientTotalHiresIsNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIsNull(FieldClientTotalHires))
}

// ClientTotalHiresNotNil applies the NotNil predicate on the "client_total_hires" field.
func ClientTotalHiresNotNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotNull(FieldClientTotalHires))
}

// ClientActiveHiresEQ applies the EQ predicate on the "client_active_hires" field.
func ClientActiveHiresEQ(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldClientActiveHires, v))
}

// ClientActiveHiresNEQ applies the NEQ predicate on the "client_active_hires" field.
func ClientActiveHiresNEQ(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNEQ(FieldClientActiveHires, v))
}

// ClientActiveHiresIn applies the In predicate on the "client_active_hires" field.
func ClientActiveHiresIn(vs ...int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIn(FieldClientActiveHires, vs...))
}

// ClientActiveHiresNotIn applies the NotIn predicate on the "client_active_hires" field.
func ClientActiveHiresNotIn(vs ...int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotIn(FieldClientActiveHires, vs...))
}

// ClientActiveHiresGT applies the GT predicate on the "client_active_hires" field.
func ClientActiveHiresGT(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGT(FieldClientActiveHires, v))
}

// ClientActiveHiresGTE applies the GTE predicate on the "client_active_hires" field.
func ClientActiveHiresGTE(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGTE(FieldClientActiveHires, v))
}

// ClientActiveHiresLT applies the LT predicate on the "client_active_hires" field.
func ClientActiveHiresLT(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLT(FieldClientActiveHires, v))
}

// ClientActiveHiresLTE applies the LTE predicate on the "client_active_hires" field.
func ClientActiveHiresLTE(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLTE(FieldClientActiveHires, v))
}

// ClientActiveHiresIsNil applies the IsNil predicate on the "client_active_hires" field.
func ClientActiveHiresIsNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIsNull(FieldClientActiveHires))
}

// ClientActiveHiresNotNil applies the NotNil predicate on the "client_active_hires" field.
func ClientActiveHiresNotNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotNull(FieldClientActiveHires))
}

// ClientTotalPaidHoursEQ applies the EQ predicate on the "client_total_paid_hours" field.
func ClientTotalPaidHoursEQ(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldClientTotalPaidHours, v))
}

// ClientTotalPaidHoursNEQ applies the NEQ predicate on the "client_total_paid_hours" field.
func ClientTotalPaidHoursNEQ(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNEQ(FieldClientTotalPaidHours, v))
}

// ClientTotalPaidHoursIn applies the In predicate on the "client_total_paid_hours" field.
func ClientTotalPaidHoursIn(vs ...int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIn(FieldClientTotalPaidHours, vs...))
}

// ClientTotalPaidHoursNotIn applies the NotIn predicate on the "client_total_paid_hours" field.
func ClientTotalPaidHoursNotIn(vs ...int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotIn(FieldClientTotalPaidHours, vs...))
}

// ClientTotalPaidHoursGT applies the GT predicate on the "client_total_paid_hours" field.
func ClientTotalPaidHoursGT(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGT(FieldClientTotalPaidHours, v))
}

// ClientTotalPaidHoursGTE applies the GTE predicate on the "client_total_paid_hours" field.
func ClientTotalPaidHoursGTE(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGTE(FieldClientTotalPaidHours, v))
}

// ClientTotalPaidHoursLT applies the LT predicate on the "client_total_paid_hours" field.
func ClientTotalPaidHoursLT(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLT(FieldClientTotalPaidHours, v))
}

// ClientTotalPaidHoursLTE applies the LTE predicate on the "client_total_paid_hours" field.
func ClientTotalPaidHoursLTE(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLTE(FieldClientTotalPaidHours, v))
}

// ClientTotalPaidHoursIsNil applies the IsNil predicate on the "client_total_paid_hours" field.
func ClientTotalPaidHoursIsNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIsNull(FieldClientTotalPaidHours))
}

// ClientTotalPaidHoursNotNil applies the NotNil predicate on the "client_total_paid_hours" field.
func ClientTotalPaidHoursNotNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotNull(FieldClientTotalPaidHours))
}

// ClientAverageHourlyRatePaidEQ applies the EQ predicate on the "client_average_hourly_rate_paid" field.
func ClientAverageHourlyRatePaidEQ(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldClientAverageHourlyRatePaid, v))
}

// ClientAverageHourlyRatePaidNEQ applies the NEQ predicate on the "client_average_hourly_rate_paid" field.
func ClientAverageHourlyRatePaidNEQ(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNEQ(FieldClientAverageHourlyRatePaid, v))
}

// ClientAverageHourlyRatePaidIn applies the In predicate on the "client_average_hourly_rate_paid" field.
func ClientAverageHourlyRatePaidIn(vs ...float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIn(FieldClientAverageHourlyRatePaid, vs...))
}

// ClientAverageHourlyRatePaidNotIn applies the NotIn predicate on the "client_average_hourly_rate_paid" field.
func ClientAverageHourlyRatePaidNotIn(vs ...float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotIn(FieldClientAverageHourlyRatePaid, vs...))
}

// ClientAverageHourlyRatePaidGT applies the GT predicate on the "client_average_hourly_rate_paid" field.
func ClientAverageHourlyRatePaidGT(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGT(FieldClientAverageHourlyRatePaid, v))
}

// ClientAverageHourlyRatePaidGTE applies the GTE predicate on the "client_average_hourly_rate_paid" field.
func ClientAverageHourlyRatePaidGTE(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGTE(FieldClientAverageHourlyRatePaid, v))
}

// ClientAverageHourlyRatePaidLT applies the LT predicate on the "client_average_hourly_rate_paid" field.
func ClientAverageHourlyRatePaidLT(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLT(FieldClientAverageHourlyRatePaid, v))
}

// ClientAverageHourlyRatePaidLTE applies the LTE predicate on the "client_average_hourly_rate_paid" field.
func ClientAverageHourlyRatePaidLTE(v float64) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLTE(FieldClientAverageHourlyRatePaid, v))
}

// ClientAverageHourlyRatePaidIsNil applies the IsNil predicate on the "client_average_hourly_rate_paid" field.
func ClientAverageHourlyRatePaidIsNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIsNull(FieldClientAverageHourlyRatePaid))
}

// ClientAverageHourlyRatePaidNotNil applies the NotNil predicate on the "client_average_hourly_rate_paid" field.
func ClientAverageHourlyRatePaidNotNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotNull(FieldClientAverageHourlyRatePaid))
}

// ClientCompanyCategoryEQ applies the EQ predicate on the "client_company_category" field.
func ClientCompanyCategoryEQ(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldClientCompanyCategory, v))
}

// ClientCompanyCategoryNEQ applies the NEQ predicate on the "client_company_category" field.
func ClientCompanyCategoryNEQ(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNEQ(FieldClientCompanyCategory, v))
}

// ClientCompanyCategoryIn applies the In predicate on the "client_company_category" field.
func ClientCompanyCategoryIn(vs ...string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIn(FieldClientCompanyCategory, vs...))
}

// ClientCompanyCategoryNotIn applies the NotIn predicate on the "client_company_category" field.
func ClientCompanyCategoryNotIn(vs ...string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotIn(FieldClientCompanyCategory, vs...))
}

// ClientCompanyCategoryGT applies the GT predicate on the "client_company_category" field.
func ClientCompanyCategoryGT(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGT(FieldClientCompanyCategory, v))
}

// ClientCompanyCategoryGTE applies the GTE predicate on the "client_company_category" field.
func ClientCompanyCategoryGTE(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGTE(FieldClientCompanyCategory, v))
}

// ClientCompanyCategoryLT applies the LT predicate on the "client_company_category" field.
func ClientCompanyCategoryLT(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLT(FieldClientCompanyCategory, v))
}

// ClientCompanyCategoryLTE applies the LTE predicate on the "client_company_category" field.
func ClientCompanyCategoryLTE(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLTE(FieldClientCompanyCategory, v))
}

// ClientCompanyCategoryContains applies the Contains predicate on the "client_company_category" field.
func ClientCompanyCategoryContains(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldContains(FieldClientCompanyCategory, v))
}

// ClientCompanyCategoryHasPrefix applies the HasPrefix predicate on the "client_company_category" field.
func ClientCompanyCategoryHasPrefix(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldHasPrefix(FieldClientCompanyCategory, v))
}

// ClientCompanyCategoryHasSuffix applies the HasSuffix predicate on the "client_company_category" field.
func ClientCompanyCategoryHasSuffix(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldHasSuffix(FieldClientCompanyCategory, v))
}

// ClientCompanyCategoryIsNil applies the IsNil predicate on the "client_company_category" field.
func ClientCompanyCategoryIsNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIsNull(FieldClientCompanyCategory))
}

// ClientCompanyCategoryNotNil applies the NotNil predicate on the "client_company_category" field.
func ClientCompanyCategoryNotNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotNull(FieldClientCompanyCategory))
}

// ClientCompanyCategoryEqualFold applies the EqualFold predicate on the "client_company_category" field.
func ClientCompanyCategoryEqualFold(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEqualFold(FieldClientCompanyCategory, v))
}

// ClientCompanyCategoryContainsFold applies the ContainsFold predicate on the "client_company_category" field.
func ClientCompanyCategoryContainsFold(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldContainsFold(FieldClientCompanyCategory, v))
}

// ClientCompanySizeEQ applies the EQ predicate on the "client_company_size" field.
func ClientCompanySizeEQ(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldClientCompanySize, v))
}

// ClientCompanySizeNEQ applies the NEQ predicate on the "client_company_size" field.
func ClientCompanySizeNEQ(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNEQ(FieldClientCompanySize, v))
}

// ClientCompanySizeIn applies the In predicate on the "client_company_size" field.
func ClientCompanySizeIn(vs ...string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIn(FieldClientCompanySize, vs...))
}

// ClientCompanySizeNotIn applies the NotIn predicate on the "client_company_size" field.
func ClientCompanySizeNotIn(vs ...string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotIn(FieldClientCompanySize, vs...))
}

// ClientCompanySizeGT applies the GT predicate on the "client_company_size" field.
func ClientCompanySizeGT(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGT(FieldClientCompanySize, v))
}

// ClientCompanySizeGTE applies the GTE predicate on the "client_company_size" field.
func ClientCompanySizeGTE(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGTE(FieldClientCompanySize, v))
}

// ClientCompanySizeLT applies the LT predicate on the "client_company_size" field.
func ClientCompanySizeLT(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLT(FieldClientCompanySize, v))
}

// ClientCompanySizeLTE applies the LTE predicate on the "client_company_size" field.
func ClientCompanySizeLTE(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLTE(FieldClientCompanySize, v))
}

// ClientCompanySizeContains applies the Contains predicate on the "client_company_size" field.
func ClientCompanySizeContains(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldContains(FieldClientCompanySize, v))
}

// ClientCompanySizeHasPrefix applies the HasPrefix predicate on the "client_company_size" field.
func ClientCompanySizeHasPrefix(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldHasPrefix(FieldClientCompanySize, v))
}

// ClientCompanySizeHasSuffix applies the HasSuffix predicate on the "client_company_size" field.
func ClientCompanySizeHasSuffix(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldHasSuffix(FieldClientCompanySize, v))
}

// ClientCompanySizeIsNil applies the IsNil predicate on the "client_company_size" field.
func ClientCompanySizeIsNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIsNull(FieldClientCompanySize))
}

// ClientCompanySizeNotNil applies the NotNil predicate on the "client_company_size" field.
func ClientCompanySizeNotNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotNull(FieldClientCompanySize))
}

// ClientCompanySizeEqualFold applies the EqualFold predicate on the "client_company_size" field.
func ClientCompanySizeEqualFold(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEqualFold(FieldClientCompanySize, v))
}

// ClientCompanySizeContainsFold applies the ContainsFold predicate on the "client_company_size" field.
func ClientCompanySizeContainsFold(v string) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldContainsFold(FieldClientCompanySize, v))
}

// TotalProposalsEQ applies the EQ predicate on the "total_proposals" field.
func TotalProposalsEQ(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldTotalProposals, v))
}

// TotalProposalsNEQ applies the NEQ predicate on the "total_proposals" field.
func TotalProposalsNEQ(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNEQ(FieldTotalProposals, v))
}

// TotalProposalsIn applies the In predicate on the "total_proposals" field.
func TotalProposalsIn(vs ...int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIn(FieldTotalProposals, vs...))
}

// TotalProposalsNotIn applies the NotIn predicate on the "total_proposals" field.
func TotalProposalsNotIn(vs ...int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotIn(FieldTotalProposals, vs...))
}

// TotalProposalsGT applies the GT predicate on the "total_proposals" field.
func TotalProposalsGT(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGT(FieldTotalProposals, v))
}

// TotalProposalsGTE applies the GTE predicate on the "total_proposals" field.
func TotalProposalsGTE(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGTE(FieldTotalProposals, v))
}

// TotalProposalsLT applies the LT predicate on the "total_proposals" field.
func TotalProposalsLT(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLT(FieldTotalProposals, v))
}

// TotalProposalsLTE applies the LTE predicate on the "total_proposals" field.
func TotalProposalsLTE(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLTE(FieldTotalProposals, v))
}

// TotalProposalsIsNil applies the IsNil predicate on the "total_proposals" field.
func TotalProposalsIsNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIsNull(FieldTotalProposals))
}

// TotalProposalsNotNil applies the NotNil predicate on the "total_proposals" field.
func TotalProposalsNotNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotNull(FieldTotalProposals))
}

// NumberOfInterviewsEQ applies the EQ predicate on the "number_of_interviews" field.
func NumberOfInterviewsEQ(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldEQ(FieldNumberOfInterviews, v))
}

// NumberOfInterviewsNEQ applies the NEQ predicate on the "number_of_interviews" field.
func NumberOfInterviewsNEQ(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNEQ(FieldNumberOfInterviews, v))
}

// NumberOfInterviewsIn applies the In predicate on the "number_of_interviews" field.
func NumberOfInterviewsIn(vs ...int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIn(FieldNumberOfInterviews, vs...))
}

// NumberOfInterviewsNotIn applies the NotIn predicate on the "number_of_interviews" field.
func NumberOfInterviewsNotIn(vs ...int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotIn(FieldNumberOfInterviews, vs...))
}

// NumberOfInterviewsGT applies the GT predicate on the "number_of_interviews" field.
func NumberOfInterviewsGT(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGT(FieldNumberOfInterviews, v))
}

// NumberOfInterviewsGTE applies the GTE predicate on the "number_of_interviews" field.
func NumberOfInterviewsGTE(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldGTE(FieldNumberOfInterviews, v))
}

// NumberOfInterviewsLT applies the LT predicate on the "number_of_interviews" field.
func NumberOfInterviewsLT(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLT(FieldNumberOfInterviews, v))
}

// NumberOfInterviewsLTE applies the LTE predicate on the "number_of_interviews" field.
func NumberOfInterviewsLTE(v int) predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldLTE(FieldNumberOfInterviews, v))
}

// NumberOfInterviewsIsNil applies the IsNil predicate on the "number_of_interviews" field.
func NumberOfInterviewsIsNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIsNull(FieldNumberOfInterviews))
}

// NumberOfInterviewsNotNil applies the NotNil predicate on the "number_of_interviews" field.
func NumberOfInterviewsNotNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotNull(FieldNumberOfInterviews))
}

// SkillsIsNil applies the IsNil predicate on the "skills" field.
func SkillsIsNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldIsNull(FieldSkills))
}

// SkillsNotNil applies the NotNil predicate on the "skills" field.
func SkillsNotNil() predicate.WorkHistory {
	return predicate.WorkHistory(sql.FieldNotNull(FieldSkills))
}

// HasFreelancer applies the HasEdge predicate on the "freelancer" edge.
func HasFreelancer() predicate.WorkHistory {
	return predicate.WorkHistory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, FreelancerTable, FreelancerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasFreelancerWith applies the HasEdge predicate on the "freelancer" edge with a given conditions (other predicates).
func HasFreelancerWith(preds ...predicate.UpworkFreelancer) predicate.WorkHistory {
	return predicate.WorkHistory(func(s *sql.Selector) {
		step := newFreelancerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WorkHistory) predicate.WorkHistory {
	return predicate.WorkHistory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WorkHistory) predicate.WorkHistory {
	return predicate.WorkHistory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WorkHistory) predicate.WorkHistory {
	return predicate.WorkHistory(sql.NotPredicates(p))
}
