// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/notzree/uprank-backend/inference-backend/ent/predicate"
	"github.com/notzree/uprank-backend/inference-backend/ent/upworkjob"
)

// UpworkJobDelete is the builder for deleting a UpworkJob entity.
type UpworkJobDelete struct {
	config
	hooks    []Hook
	mutation *UpworkJobMutation
}

// Where appends a list predicates to the UpworkJobDelete builder.
func (ujd *UpworkJobDelete) Where(ps ...predicate.UpworkJob) *UpworkJobDelete {
	ujd.mutation.Where(ps...)
	return ujd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ujd *UpworkJobDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ujd.sqlExec, ujd.mutation, ujd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ujd *UpworkJobDelete) ExecX(ctx context.Context) int {
	n, err := ujd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ujd *UpworkJobDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(upworkjob.Table, sqlgraph.NewFieldSpec(upworkjob.FieldID, field.TypeString))
	if ps := ujd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ujd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ujd.mutation.done = true
	return affected, err
}

// UpworkJobDeleteOne is the builder for deleting a single UpworkJob entity.
type UpworkJobDeleteOne struct {
	ujd *UpworkJobDelete
}

// Where appends a list predicates to the UpworkJobDelete builder.
func (ujdo *UpworkJobDeleteOne) Where(ps ...predicate.UpworkJob) *UpworkJobDeleteOne {
	ujdo.ujd.mutation.Where(ps...)
	return ujdo
}

// Exec executes the deletion query.
func (ujdo *UpworkJobDeleteOne) Exec(ctx context.Context) error {
	n, err := ujdo.ujd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{upworkjob.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ujdo *UpworkJobDeleteOne) ExecX(ctx context.Context) {
	if err := ujdo.Exec(ctx); err != nil {
		panic(err)
	}
}
