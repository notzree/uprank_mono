//Boilerplate code
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String    @id // Clerk user.data.id
  first_name   String?
  company_name String
  email        String    @unique
  created_at    DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  last_login   DateTime?
  Job          Job[]
}

model Job {
  id                   String   @id
  title                String
  user_id              String
  created_at            DateTime @default(now()) //When the job was added to the database
  location             String
  description          String
  skills               String[]
  experience_level     String
  hourly               Boolean
  fixed                Boolean
  hourly_rate          Int[]
  fixed_rate           Int
  average_uprank_score Int?
  max_uprank_score     Int?
  min_uprank_score     Int?

  user        User                       @relation(fields: [user_id], references: [id])
  Freelancers UpworkFreelancerProposal[]
}

//Represents a freelancer that has applied to a job
model UpworkFreelancerProposal {
  url                           String    @id
  name                          String
  title                         String
  description                   String
  city                          String
  country                       String
  timezone                      String
  cv                            String    @db.Text
  ai_reccomended                 Boolean
  fixed_charge_amount             Int?
  fixed_charge_currency           String
  hourly_charge_amount            Int?
  hourly_charge_currency          String
  invited                       Boolean
  photo_url                      String
  recent_hours                   Int
  total_hours                    Int
  total_portfolio_items           Int
  total_portfolio_v2_items         Int
  upwork_total_feedback          Float //Star rating out of 5
  upwork_recent_feedback         Float //Star rating out of 5
  upwork_top_rated_status         Boolean
  upwork_top_rated_plus_status     Boolean
  upwork_sponsored              Boolean
  upwork_job_success_score        Float //percent job success
  upwork_reccomended            Boolean
  skills                        String[]
  average_recent_earnings         Float
  combined_average_recent_earnings Float
  combined_recent_earnings        Float
  combined_total_earnings         Decimal
  combined_total_revenue          Float
  recent_earnings                Float
  total_revenue                  Float
  uprank_score                  Float?     @default(0)
  uprank_updated_at             DateTime?
  uprank_reccomended            Boolean?   @default(false)
  uprank_reccomended_reasons    String?
  uprank_not_enough_data        Boolean?   @default(false)
  //Still have to add all of the individual fields used to calculate the total score but won't know that until I write out the api

  Job          Job              @relation(fields: [job_id], references: [id])
  job_id        String
  Attachements AttachementRef[]
}

model AttachementRef {
  id                          Int                       @id @default(autoincrement())
  name                        String
  url                         String
  Upwork_Freelancer_Proposal    UpworkFreelancerProposal? @relation(fields: [upwork_Freelancer_Proposal_Url], references: [url])
  upwork_Freelancer_Proposal_Url String?
}
