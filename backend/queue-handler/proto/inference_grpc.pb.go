// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: proto/inference.proto

package inference_backend

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Inference_EmbedText_FullMethodName    = "/inference.Inference/EmbedText"
	Inference_UpsertVector_FullMethodName = "/inference.Inference/UpsertVector"
	Inference_QueryVector_FullMethodName  = "/inference.Inference/QueryVector"
	Inference_DeleteVector_FullMethodName = "/inference.Inference/DeleteVector"
)

// InferenceClient is the client API for Inference service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InferenceClient interface {
	EmbedText(ctx context.Context, in *EmbedTextRequest, opts ...grpc.CallOption) (*EmbedTextResponse, error)
	// rpc Embed()
	UpsertVector(ctx context.Context, in *UpsertVectorRequest, opts ...grpc.CallOption) (*UpsertVectorResponse, error)
	QueryVector(ctx context.Context, in *QueryVectorRequest, opts ...grpc.CallOption) (*QueryVectorResponse, error)
	DeleteVector(ctx context.Context, in *DeleteVectorRequest, opts ...grpc.CallOption) (*DeleteVectorResponse, error)
}

type inferenceClient struct {
	cc grpc.ClientConnInterface
}

func NewInferenceClient(cc grpc.ClientConnInterface) InferenceClient {
	return &inferenceClient{cc}
}

func (c *inferenceClient) EmbedText(ctx context.Context, in *EmbedTextRequest, opts ...grpc.CallOption) (*EmbedTextResponse, error) {
	out := new(EmbedTextResponse)
	err := c.cc.Invoke(ctx, Inference_EmbedText_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inferenceClient) UpsertVector(ctx context.Context, in *UpsertVectorRequest, opts ...grpc.CallOption) (*UpsertVectorResponse, error) {
	out := new(UpsertVectorResponse)
	err := c.cc.Invoke(ctx, Inference_UpsertVector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inferenceClient) QueryVector(ctx context.Context, in *QueryVectorRequest, opts ...grpc.CallOption) (*QueryVectorResponse, error) {
	out := new(QueryVectorResponse)
	err := c.cc.Invoke(ctx, Inference_QueryVector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inferenceClient) DeleteVector(ctx context.Context, in *DeleteVectorRequest, opts ...grpc.CallOption) (*DeleteVectorResponse, error) {
	out := new(DeleteVectorResponse)
	err := c.cc.Invoke(ctx, Inference_DeleteVector_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InferenceServer is the server API for Inference service.
// All implementations must embed UnimplementedInferenceServer
// for forward compatibility
type InferenceServer interface {
	EmbedText(context.Context, *EmbedTextRequest) (*EmbedTextResponse, error)
	// rpc Embed()
	UpsertVector(context.Context, *UpsertVectorRequest) (*UpsertVectorResponse, error)
	QueryVector(context.Context, *QueryVectorRequest) (*QueryVectorResponse, error)
	DeleteVector(context.Context, *DeleteVectorRequest) (*DeleteVectorResponse, error)
	mustEmbedUnimplementedInferenceServer()
}

// UnimplementedInferenceServer must be embedded to have forward compatible implementations.
type UnimplementedInferenceServer struct {
}

func (UnimplementedInferenceServer) EmbedText(context.Context, *EmbedTextRequest) (*EmbedTextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmbedText not implemented")
}
func (UnimplementedInferenceServer) UpsertVector(context.Context, *UpsertVectorRequest) (*UpsertVectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertVector not implemented")
}
func (UnimplementedInferenceServer) QueryVector(context.Context, *QueryVectorRequest) (*QueryVectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryVector not implemented")
}
func (UnimplementedInferenceServer) DeleteVector(context.Context, *DeleteVectorRequest) (*DeleteVectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVector not implemented")
}
func (UnimplementedInferenceServer) mustEmbedUnimplementedInferenceServer() {}

// UnsafeInferenceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InferenceServer will
// result in compilation errors.
type UnsafeInferenceServer interface {
	mustEmbedUnimplementedInferenceServer()
}

func RegisterInferenceServer(s grpc.ServiceRegistrar, srv InferenceServer) {
	s.RegisterService(&Inference_ServiceDesc, srv)
}

func _Inference_EmbedText_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbedTextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InferenceServer).EmbedText(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inference_EmbedText_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InferenceServer).EmbedText(ctx, req.(*EmbedTextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inference_UpsertVector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertVectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InferenceServer).UpsertVector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inference_UpsertVector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InferenceServer).UpsertVector(ctx, req.(*UpsertVectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inference_QueryVector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InferenceServer).QueryVector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inference_QueryVector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InferenceServer).QueryVector(ctx, req.(*QueryVectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Inference_DeleteVector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InferenceServer).DeleteVector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Inference_DeleteVector_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InferenceServer).DeleteVector(ctx, req.(*DeleteVectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Inference_ServiceDesc is the grpc.ServiceDesc for Inference service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Inference_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inference.Inference",
	HandlerType: (*InferenceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EmbedText",
			Handler:    _Inference_EmbedText_Handler,
		},
		{
			MethodName: "UpsertVector",
			Handler:    _Inference_UpsertVector_Handler,
		},
		{
			MethodName: "QueryVector",
			Handler:    _Inference_QueryVector_Handler,
		},
		{
			MethodName: "DeleteVector",
			Handler:    _Inference_DeleteVector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/inference.proto",
}
