// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/jackc/pgtype"
	"github.com/notzree/uprank_mono/uprank-backend/main-backend/ent/freelancerinferencedata"
	"github.com/notzree/uprank_mono/uprank-backend/main-backend/ent/upworkfreelancer"
)

// FreelancerInferenceDataCreate is the builder for creating a FreelancerInferenceData entity.
type FreelancerInferenceDataCreate struct {
	config
	mutation *FreelancerInferenceDataMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUprankReccomended sets the "uprank_reccomended" field.
func (fidc *FreelancerInferenceDataCreate) SetUprankReccomended(b bool) *FreelancerInferenceDataCreate {
	fidc.mutation.SetUprankReccomended(b)
	return fidc
}

// SetNillableUprankReccomended sets the "uprank_reccomended" field if the given value is not nil.
func (fidc *FreelancerInferenceDataCreate) SetNillableUprankReccomended(b *bool) *FreelancerInferenceDataCreate {
	if b != nil {
		fidc.SetUprankReccomended(*b)
	}
	return fidc
}

// SetUprankReccomendedReasons sets the "uprank_reccomended_reasons" field.
func (fidc *FreelancerInferenceDataCreate) SetUprankReccomendedReasons(s string) *FreelancerInferenceDataCreate {
	fidc.mutation.SetUprankReccomendedReasons(s)
	return fidc
}

// SetNillableUprankReccomendedReasons sets the "uprank_reccomended_reasons" field if the given value is not nil.
func (fidc *FreelancerInferenceDataCreate) SetNillableUprankReccomendedReasons(s *string) *FreelancerInferenceDataCreate {
	if s != nil {
		fidc.SetUprankReccomendedReasons(*s)
	}
	return fidc
}

// SetUprankNotEnoughData sets the "uprank_not_enough_data" field.
func (fidc *FreelancerInferenceDataCreate) SetUprankNotEnoughData(b bool) *FreelancerInferenceDataCreate {
	fidc.mutation.SetUprankNotEnoughData(b)
	return fidc
}

// SetNillableUprankNotEnoughData sets the "uprank_not_enough_data" field if the given value is not nil.
func (fidc *FreelancerInferenceDataCreate) SetNillableUprankNotEnoughData(b *bool) *FreelancerInferenceDataCreate {
	if b != nil {
		fidc.SetUprankNotEnoughData(*b)
	}
	return fidc
}

// SetFinalizedRatingScore sets the "finalized_rating_score" field.
func (fidc *FreelancerInferenceDataCreate) SetFinalizedRatingScore(f float64) *FreelancerInferenceDataCreate {
	fidc.mutation.SetFinalizedRatingScore(f)
	return fidc
}

// SetRawRatingScore sets the "raw_rating_score" field.
func (fidc *FreelancerInferenceDataCreate) SetRawRatingScore(f float64) *FreelancerInferenceDataCreate {
	fidc.mutation.SetRawRatingScore(f)
	return fidc
}

// SetNillableRawRatingScore sets the "raw_rating_score" field if the given value is not nil.
func (fidc *FreelancerInferenceDataCreate) SetNillableRawRatingScore(f *float64) *FreelancerInferenceDataCreate {
	if f != nil {
		fidc.SetRawRatingScore(*f)
	}
	return fidc
}

// SetAiEstimatedDuration sets the "ai_estimated_duration" field.
func (fidc *FreelancerInferenceDataCreate) SetAiEstimatedDuration(pg *pgtype.Interval) *FreelancerInferenceDataCreate {
	fidc.mutation.SetAiEstimatedDuration(pg)
	return fidc
}

// SetBudgetAdherencePercentage sets the "budget_adherence_percentage" field.
func (fidc *FreelancerInferenceDataCreate) SetBudgetAdherencePercentage(f float64) *FreelancerInferenceDataCreate {
	fidc.mutation.SetBudgetAdherencePercentage(f)
	return fidc
}

// SetNillableBudgetAdherencePercentage sets the "budget_adherence_percentage" field if the given value is not nil.
func (fidc *FreelancerInferenceDataCreate) SetNillableBudgetAdherencePercentage(f *float64) *FreelancerInferenceDataCreate {
	if f != nil {
		fidc.SetBudgetAdherencePercentage(*f)
	}
	return fidc
}

// SetBudgetOverrunPercentage sets the "budget_overrun_percentage" field.
func (fidc *FreelancerInferenceDataCreate) SetBudgetOverrunPercentage(f float64) *FreelancerInferenceDataCreate {
	fidc.mutation.SetBudgetOverrunPercentage(f)
	return fidc
}

// SetNillableBudgetOverrunPercentage sets the "budget_overrun_percentage" field if the given value is not nil.
func (fidc *FreelancerInferenceDataCreate) SetNillableBudgetOverrunPercentage(f *float64) *FreelancerInferenceDataCreate {
	if f != nil {
		fidc.SetBudgetOverrunPercentage(*f)
	}
	return fidc
}

// SetUpworkfreelancerID sets the "upworkfreelancer" edge to the UpworkFreelancer entity by ID.
func (fidc *FreelancerInferenceDataCreate) SetUpworkfreelancerID(id string) *FreelancerInferenceDataCreate {
	fidc.mutation.SetUpworkfreelancerID(id)
	return fidc
}

// SetUpworkfreelancer sets the "upworkfreelancer" edge to the UpworkFreelancer entity.
func (fidc *FreelancerInferenceDataCreate) SetUpworkfreelancer(u *UpworkFreelancer) *FreelancerInferenceDataCreate {
	return fidc.SetUpworkfreelancerID(u.ID)
}

// Mutation returns the FreelancerInferenceDataMutation object of the builder.
func (fidc *FreelancerInferenceDataCreate) Mutation() *FreelancerInferenceDataMutation {
	return fidc.mutation
}

// Save creates the FreelancerInferenceData in the database.
func (fidc *FreelancerInferenceDataCreate) Save(ctx context.Context) (*FreelancerInferenceData, error) {
	fidc.defaults()
	return withHooks(ctx, fidc.sqlSave, fidc.mutation, fidc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fidc *FreelancerInferenceDataCreate) SaveX(ctx context.Context) *FreelancerInferenceData {
	v, err := fidc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fidc *FreelancerInferenceDataCreate) Exec(ctx context.Context) error {
	_, err := fidc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fidc *FreelancerInferenceDataCreate) ExecX(ctx context.Context) {
	if err := fidc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fidc *FreelancerInferenceDataCreate) defaults() {
	if _, ok := fidc.mutation.UprankReccomended(); !ok {
		v := freelancerinferencedata.DefaultUprankReccomended
		fidc.mutation.SetUprankReccomended(v)
	}
	if _, ok := fidc.mutation.UprankNotEnoughData(); !ok {
		v := freelancerinferencedata.DefaultUprankNotEnoughData
		fidc.mutation.SetUprankNotEnoughData(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fidc *FreelancerInferenceDataCreate) check() error {
	if _, ok := fidc.mutation.FinalizedRatingScore(); !ok {
		return &ValidationError{Name: "finalized_rating_score", err: errors.New(`ent: missing required field "FreelancerInferenceData.finalized_rating_score"`)}
	}
	if _, ok := fidc.mutation.UpworkfreelancerID(); !ok {
		return &ValidationError{Name: "upworkfreelancer", err: errors.New(`ent: missing required edge "FreelancerInferenceData.upworkfreelancer"`)}
	}
	return nil
}

func (fidc *FreelancerInferenceDataCreate) sqlSave(ctx context.Context) (*FreelancerInferenceData, error) {
	if err := fidc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fidc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fidc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fidc.mutation.id = &_node.ID
	fidc.mutation.done = true
	return _node, nil
}

func (fidc *FreelancerInferenceDataCreate) createSpec() (*FreelancerInferenceData, *sqlgraph.CreateSpec) {
	var (
		_node = &FreelancerInferenceData{config: fidc.config}
		_spec = sqlgraph.NewCreateSpec(freelancerinferencedata.Table, sqlgraph.NewFieldSpec(freelancerinferencedata.FieldID, field.TypeInt))
	)
	_spec.OnConflict = fidc.conflict
	if value, ok := fidc.mutation.UprankReccomended(); ok {
		_spec.SetField(freelancerinferencedata.FieldUprankReccomended, field.TypeBool, value)
		_node.UprankReccomended = value
	}
	if value, ok := fidc.mutation.UprankReccomendedReasons(); ok {
		_spec.SetField(freelancerinferencedata.FieldUprankReccomendedReasons, field.TypeString, value)
		_node.UprankReccomendedReasons = value
	}
	if value, ok := fidc.mutation.UprankNotEnoughData(); ok {
		_spec.SetField(freelancerinferencedata.FieldUprankNotEnoughData, field.TypeBool, value)
		_node.UprankNotEnoughData = value
	}
	if value, ok := fidc.mutation.FinalizedRatingScore(); ok {
		_spec.SetField(freelancerinferencedata.FieldFinalizedRatingScore, field.TypeFloat64, value)
		_node.FinalizedRatingScore = value
	}
	if value, ok := fidc.mutation.RawRatingScore(); ok {
		_spec.SetField(freelancerinferencedata.FieldRawRatingScore, field.TypeFloat64, value)
		_node.RawRatingScore = value
	}
	if value, ok := fidc.mutation.AiEstimatedDuration(); ok {
		_spec.SetField(freelancerinferencedata.FieldAiEstimatedDuration, field.TypeOther, value)
		_node.AiEstimatedDuration = value
	}
	if value, ok := fidc.mutation.BudgetAdherencePercentage(); ok {
		_spec.SetField(freelancerinferencedata.FieldBudgetAdherencePercentage, field.TypeFloat64, value)
		_node.BudgetAdherencePercentage = value
	}
	if value, ok := fidc.mutation.BudgetOverrunPercentage(); ok {
		_spec.SetField(freelancerinferencedata.FieldBudgetOverrunPercentage, field.TypeFloat64, value)
		_node.BudgetOverrunPercentage = value
	}
	if nodes := fidc.mutation.UpworkfreelancerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   freelancerinferencedata.UpworkfreelancerTable,
			Columns: []string{freelancerinferencedata.UpworkfreelancerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(upworkfreelancer.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.upwork_freelancer_freelancer_inference_data = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FreelancerInferenceData.Create().
//		SetUprankReccomended(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FreelancerInferenceDataUpsert) {
//			SetUprankReccomended(v+v).
//		}).
//		Exec(ctx)
func (fidc *FreelancerInferenceDataCreate) OnConflict(opts ...sql.ConflictOption) *FreelancerInferenceDataUpsertOne {
	fidc.conflict = opts
	return &FreelancerInferenceDataUpsertOne{
		create: fidc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FreelancerInferenceData.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fidc *FreelancerInferenceDataCreate) OnConflictColumns(columns ...string) *FreelancerInferenceDataUpsertOne {
	fidc.conflict = append(fidc.conflict, sql.ConflictColumns(columns...))
	return &FreelancerInferenceDataUpsertOne{
		create: fidc,
	}
}

type (
	// FreelancerInferenceDataUpsertOne is the builder for "upsert"-ing
	//  one FreelancerInferenceData node.
	FreelancerInferenceDataUpsertOne struct {
		create *FreelancerInferenceDataCreate
	}

	// FreelancerInferenceDataUpsert is the "OnConflict" setter.
	FreelancerInferenceDataUpsert struct {
		*sql.UpdateSet
	}
)

// SetUprankReccomended sets the "uprank_reccomended" field.
func (u *FreelancerInferenceDataUpsert) SetUprankReccomended(v bool) *FreelancerInferenceDataUpsert {
	u.Set(freelancerinferencedata.FieldUprankReccomended, v)
	return u
}

// UpdateUprankReccomended sets the "uprank_reccomended" field to the value that was provided on create.
func (u *FreelancerInferenceDataUpsert) UpdateUprankReccomended() *FreelancerInferenceDataUpsert {
	u.SetExcluded(freelancerinferencedata.FieldUprankReccomended)
	return u
}

// ClearUprankReccomended clears the value of the "uprank_reccomended" field.
func (u *FreelancerInferenceDataUpsert) ClearUprankReccomended() *FreelancerInferenceDataUpsert {
	u.SetNull(freelancerinferencedata.FieldUprankReccomended)
	return u
}

// SetUprankReccomendedReasons sets the "uprank_reccomended_reasons" field.
func (u *FreelancerInferenceDataUpsert) SetUprankReccomendedReasons(v string) *FreelancerInferenceDataUpsert {
	u.Set(freelancerinferencedata.FieldUprankReccomendedReasons, v)
	return u
}

// UpdateUprankReccomendedReasons sets the "uprank_reccomended_reasons" field to the value that was provided on create.
func (u *FreelancerInferenceDataUpsert) UpdateUprankReccomendedReasons() *FreelancerInferenceDataUpsert {
	u.SetExcluded(freelancerinferencedata.FieldUprankReccomendedReasons)
	return u
}

// ClearUprankReccomendedReasons clears the value of the "uprank_reccomended_reasons" field.
func (u *FreelancerInferenceDataUpsert) ClearUprankReccomendedReasons() *FreelancerInferenceDataUpsert {
	u.SetNull(freelancerinferencedata.FieldUprankReccomendedReasons)
	return u
}

// SetUprankNotEnoughData sets the "uprank_not_enough_data" field.
func (u *FreelancerInferenceDataUpsert) SetUprankNotEnoughData(v bool) *FreelancerInferenceDataUpsert {
	u.Set(freelancerinferencedata.FieldUprankNotEnoughData, v)
	return u
}

// UpdateUprankNotEnoughData sets the "uprank_not_enough_data" field to the value that was provided on create.
func (u *FreelancerInferenceDataUpsert) UpdateUprankNotEnoughData() *FreelancerInferenceDataUpsert {
	u.SetExcluded(freelancerinferencedata.FieldUprankNotEnoughData)
	return u
}

// ClearUprankNotEnoughData clears the value of the "uprank_not_enough_data" field.
func (u *FreelancerInferenceDataUpsert) ClearUprankNotEnoughData() *FreelancerInferenceDataUpsert {
	u.SetNull(freelancerinferencedata.FieldUprankNotEnoughData)
	return u
}

// SetFinalizedRatingScore sets the "finalized_rating_score" field.
func (u *FreelancerInferenceDataUpsert) SetFinalizedRatingScore(v float64) *FreelancerInferenceDataUpsert {
	u.Set(freelancerinferencedata.FieldFinalizedRatingScore, v)
	return u
}

// UpdateFinalizedRatingScore sets the "finalized_rating_score" field to the value that was provided on create.
func (u *FreelancerInferenceDataUpsert) UpdateFinalizedRatingScore() *FreelancerInferenceDataUpsert {
	u.SetExcluded(freelancerinferencedata.FieldFinalizedRatingScore)
	return u
}

// AddFinalizedRatingScore adds v to the "finalized_rating_score" field.
func (u *FreelancerInferenceDataUpsert) AddFinalizedRatingScore(v float64) *FreelancerInferenceDataUpsert {
	u.Add(freelancerinferencedata.FieldFinalizedRatingScore, v)
	return u
}

// SetRawRatingScore sets the "raw_rating_score" field.
func (u *FreelancerInferenceDataUpsert) SetRawRatingScore(v float64) *FreelancerInferenceDataUpsert {
	u.Set(freelancerinferencedata.FieldRawRatingScore, v)
	return u
}

// UpdateRawRatingScore sets the "raw_rating_score" field to the value that was provided on create.
func (u *FreelancerInferenceDataUpsert) UpdateRawRatingScore() *FreelancerInferenceDataUpsert {
	u.SetExcluded(freelancerinferencedata.FieldRawRatingScore)
	return u
}

// AddRawRatingScore adds v to the "raw_rating_score" field.
func (u *FreelancerInferenceDataUpsert) AddRawRatingScore(v float64) *FreelancerInferenceDataUpsert {
	u.Add(freelancerinferencedata.FieldRawRatingScore, v)
	return u
}

// ClearRawRatingScore clears the value of the "raw_rating_score" field.
func (u *FreelancerInferenceDataUpsert) ClearRawRatingScore() *FreelancerInferenceDataUpsert {
	u.SetNull(freelancerinferencedata.FieldRawRatingScore)
	return u
}

// SetAiEstimatedDuration sets the "ai_estimated_duration" field.
func (u *FreelancerInferenceDataUpsert) SetAiEstimatedDuration(v *pgtype.Interval) *FreelancerInferenceDataUpsert {
	u.Set(freelancerinferencedata.FieldAiEstimatedDuration, v)
	return u
}

// UpdateAiEstimatedDuration sets the "ai_estimated_duration" field to the value that was provided on create.
func (u *FreelancerInferenceDataUpsert) UpdateAiEstimatedDuration() *FreelancerInferenceDataUpsert {
	u.SetExcluded(freelancerinferencedata.FieldAiEstimatedDuration)
	return u
}

// ClearAiEstimatedDuration clears the value of the "ai_estimated_duration" field.
func (u *FreelancerInferenceDataUpsert) ClearAiEstimatedDuration() *FreelancerInferenceDataUpsert {
	u.SetNull(freelancerinferencedata.FieldAiEstimatedDuration)
	return u
}

// SetBudgetAdherencePercentage sets the "budget_adherence_percentage" field.
func (u *FreelancerInferenceDataUpsert) SetBudgetAdherencePercentage(v float64) *FreelancerInferenceDataUpsert {
	u.Set(freelancerinferencedata.FieldBudgetAdherencePercentage, v)
	return u
}

// UpdateBudgetAdherencePercentage sets the "budget_adherence_percentage" field to the value that was provided on create.
func (u *FreelancerInferenceDataUpsert) UpdateBudgetAdherencePercentage() *FreelancerInferenceDataUpsert {
	u.SetExcluded(freelancerinferencedata.FieldBudgetAdherencePercentage)
	return u
}

// AddBudgetAdherencePercentage adds v to the "budget_adherence_percentage" field.
func (u *FreelancerInferenceDataUpsert) AddBudgetAdherencePercentage(v float64) *FreelancerInferenceDataUpsert {
	u.Add(freelancerinferencedata.FieldBudgetAdherencePercentage, v)
	return u
}

// ClearBudgetAdherencePercentage clears the value of the "budget_adherence_percentage" field.
func (u *FreelancerInferenceDataUpsert) ClearBudgetAdherencePercentage() *FreelancerInferenceDataUpsert {
	u.SetNull(freelancerinferencedata.FieldBudgetAdherencePercentage)
	return u
}

// SetBudgetOverrunPercentage sets the "budget_overrun_percentage" field.
func (u *FreelancerInferenceDataUpsert) SetBudgetOverrunPercentage(v float64) *FreelancerInferenceDataUpsert {
	u.Set(freelancerinferencedata.FieldBudgetOverrunPercentage, v)
	return u
}

// UpdateBudgetOverrunPercentage sets the "budget_overrun_percentage" field to the value that was provided on create.
func (u *FreelancerInferenceDataUpsert) UpdateBudgetOverrunPercentage() *FreelancerInferenceDataUpsert {
	u.SetExcluded(freelancerinferencedata.FieldBudgetOverrunPercentage)
	return u
}

// AddBudgetOverrunPercentage adds v to the "budget_overrun_percentage" field.
func (u *FreelancerInferenceDataUpsert) AddBudgetOverrunPercentage(v float64) *FreelancerInferenceDataUpsert {
	u.Add(freelancerinferencedata.FieldBudgetOverrunPercentage, v)
	return u
}

// ClearBudgetOverrunPercentage clears the value of the "budget_overrun_percentage" field.
func (u *FreelancerInferenceDataUpsert) ClearBudgetOverrunPercentage() *FreelancerInferenceDataUpsert {
	u.SetNull(freelancerinferencedata.FieldBudgetOverrunPercentage)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.FreelancerInferenceData.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FreelancerInferenceDataUpsertOne) UpdateNewValues() *FreelancerInferenceDataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FreelancerInferenceData.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FreelancerInferenceDataUpsertOne) Ignore() *FreelancerInferenceDataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FreelancerInferenceDataUpsertOne) DoNothing() *FreelancerInferenceDataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FreelancerInferenceDataCreate.OnConflict
// documentation for more info.
func (u *FreelancerInferenceDataUpsertOne) Update(set func(*FreelancerInferenceDataUpsert)) *FreelancerInferenceDataUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FreelancerInferenceDataUpsert{UpdateSet: update})
	}))
	return u
}

// SetUprankReccomended sets the "uprank_reccomended" field.
func (u *FreelancerInferenceDataUpsertOne) SetUprankReccomended(v bool) *FreelancerInferenceDataUpsertOne {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.SetUprankReccomended(v)
	})
}

// UpdateUprankReccomended sets the "uprank_reccomended" field to the value that was provided on create.
func (u *FreelancerInferenceDataUpsertOne) UpdateUprankReccomended() *FreelancerInferenceDataUpsertOne {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.UpdateUprankReccomended()
	})
}

// ClearUprankReccomended clears the value of the "uprank_reccomended" field.
func (u *FreelancerInferenceDataUpsertOne) ClearUprankReccomended() *FreelancerInferenceDataUpsertOne {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.ClearUprankReccomended()
	})
}

// SetUprankReccomendedReasons sets the "uprank_reccomended_reasons" field.
func (u *FreelancerInferenceDataUpsertOne) SetUprankReccomendedReasons(v string) *FreelancerInferenceDataUpsertOne {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.SetUprankReccomendedReasons(v)
	})
}

// UpdateUprankReccomendedReasons sets the "uprank_reccomended_reasons" field to the value that was provided on create.
func (u *FreelancerInferenceDataUpsertOne) UpdateUprankReccomendedReasons() *FreelancerInferenceDataUpsertOne {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.UpdateUprankReccomendedReasons()
	})
}

// ClearUprankReccomendedReasons clears the value of the "uprank_reccomended_reasons" field.
func (u *FreelancerInferenceDataUpsertOne) ClearUprankReccomendedReasons() *FreelancerInferenceDataUpsertOne {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.ClearUprankReccomendedReasons()
	})
}

// SetUprankNotEnoughData sets the "uprank_not_enough_data" field.
func (u *FreelancerInferenceDataUpsertOne) SetUprankNotEnoughData(v bool) *FreelancerInferenceDataUpsertOne {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.SetUprankNotEnoughData(v)
	})
}

// UpdateUprankNotEnoughData sets the "uprank_not_enough_data" field to the value that was provided on create.
func (u *FreelancerInferenceDataUpsertOne) UpdateUprankNotEnoughData() *FreelancerInferenceDataUpsertOne {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.UpdateUprankNotEnoughData()
	})
}

// ClearUprankNotEnoughData clears the value of the "uprank_not_enough_data" field.
func (u *FreelancerInferenceDataUpsertOne) ClearUprankNotEnoughData() *FreelancerInferenceDataUpsertOne {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.ClearUprankNotEnoughData()
	})
}

// SetFinalizedRatingScore sets the "finalized_rating_score" field.
func (u *FreelancerInferenceDataUpsertOne) SetFinalizedRatingScore(v float64) *FreelancerInferenceDataUpsertOne {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.SetFinalizedRatingScore(v)
	})
}

// AddFinalizedRatingScore adds v to the "finalized_rating_score" field.
func (u *FreelancerInferenceDataUpsertOne) AddFinalizedRatingScore(v float64) *FreelancerInferenceDataUpsertOne {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.AddFinalizedRatingScore(v)
	})
}

// UpdateFinalizedRatingScore sets the "finalized_rating_score" field to the value that was provided on create.
func (u *FreelancerInferenceDataUpsertOne) UpdateFinalizedRatingScore() *FreelancerInferenceDataUpsertOne {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.UpdateFinalizedRatingScore()
	})
}

// SetRawRatingScore sets the "raw_rating_score" field.
func (u *FreelancerInferenceDataUpsertOne) SetRawRatingScore(v float64) *FreelancerInferenceDataUpsertOne {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.SetRawRatingScore(v)
	})
}

// AddRawRatingScore adds v to the "raw_rating_score" field.
func (u *FreelancerInferenceDataUpsertOne) AddRawRatingScore(v float64) *FreelancerInferenceDataUpsertOne {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.AddRawRatingScore(v)
	})
}

// UpdateRawRatingScore sets the "raw_rating_score" field to the value that was provided on create.
func (u *FreelancerInferenceDataUpsertOne) UpdateRawRatingScore() *FreelancerInferenceDataUpsertOne {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.UpdateRawRatingScore()
	})
}

// ClearRawRatingScore clears the value of the "raw_rating_score" field.
func (u *FreelancerInferenceDataUpsertOne) ClearRawRatingScore() *FreelancerInferenceDataUpsertOne {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.ClearRawRatingScore()
	})
}

// SetAiEstimatedDuration sets the "ai_estimated_duration" field.
func (u *FreelancerInferenceDataUpsertOne) SetAiEstimatedDuration(v *pgtype.Interval) *FreelancerInferenceDataUpsertOne {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.SetAiEstimatedDuration(v)
	})
}

// UpdateAiEstimatedDuration sets the "ai_estimated_duration" field to the value that was provided on create.
func (u *FreelancerInferenceDataUpsertOne) UpdateAiEstimatedDuration() *FreelancerInferenceDataUpsertOne {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.UpdateAiEstimatedDuration()
	})
}

// ClearAiEstimatedDuration clears the value of the "ai_estimated_duration" field.
func (u *FreelancerInferenceDataUpsertOne) ClearAiEstimatedDuration() *FreelancerInferenceDataUpsertOne {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.ClearAiEstimatedDuration()
	})
}

// SetBudgetAdherencePercentage sets the "budget_adherence_percentage" field.
func (u *FreelancerInferenceDataUpsertOne) SetBudgetAdherencePercentage(v float64) *FreelancerInferenceDataUpsertOne {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.SetBudgetAdherencePercentage(v)
	})
}

// AddBudgetAdherencePercentage adds v to the "budget_adherence_percentage" field.
func (u *FreelancerInferenceDataUpsertOne) AddBudgetAdherencePercentage(v float64) *FreelancerInferenceDataUpsertOne {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.AddBudgetAdherencePercentage(v)
	})
}

// UpdateBudgetAdherencePercentage sets the "budget_adherence_percentage" field to the value that was provided on create.
func (u *FreelancerInferenceDataUpsertOne) UpdateBudgetAdherencePercentage() *FreelancerInferenceDataUpsertOne {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.UpdateBudgetAdherencePercentage()
	})
}

// ClearBudgetAdherencePercentage clears the value of the "budget_adherence_percentage" field.
func (u *FreelancerInferenceDataUpsertOne) ClearBudgetAdherencePercentage() *FreelancerInferenceDataUpsertOne {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.ClearBudgetAdherencePercentage()
	})
}

// SetBudgetOverrunPercentage sets the "budget_overrun_percentage" field.
func (u *FreelancerInferenceDataUpsertOne) SetBudgetOverrunPercentage(v float64) *FreelancerInferenceDataUpsertOne {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.SetBudgetOverrunPercentage(v)
	})
}

// AddBudgetOverrunPercentage adds v to the "budget_overrun_percentage" field.
func (u *FreelancerInferenceDataUpsertOne) AddBudgetOverrunPercentage(v float64) *FreelancerInferenceDataUpsertOne {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.AddBudgetOverrunPercentage(v)
	})
}

// UpdateBudgetOverrunPercentage sets the "budget_overrun_percentage" field to the value that was provided on create.
func (u *FreelancerInferenceDataUpsertOne) UpdateBudgetOverrunPercentage() *FreelancerInferenceDataUpsertOne {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.UpdateBudgetOverrunPercentage()
	})
}

// ClearBudgetOverrunPercentage clears the value of the "budget_overrun_percentage" field.
func (u *FreelancerInferenceDataUpsertOne) ClearBudgetOverrunPercentage() *FreelancerInferenceDataUpsertOne {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.ClearBudgetOverrunPercentage()
	})
}

// Exec executes the query.
func (u *FreelancerInferenceDataUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FreelancerInferenceDataCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FreelancerInferenceDataUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FreelancerInferenceDataUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FreelancerInferenceDataUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FreelancerInferenceDataCreateBulk is the builder for creating many FreelancerInferenceData entities in bulk.
type FreelancerInferenceDataCreateBulk struct {
	config
	err      error
	builders []*FreelancerInferenceDataCreate
	conflict []sql.ConflictOption
}

// Save creates the FreelancerInferenceData entities in the database.
func (fidcb *FreelancerInferenceDataCreateBulk) Save(ctx context.Context) ([]*FreelancerInferenceData, error) {
	if fidcb.err != nil {
		return nil, fidcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fidcb.builders))
	nodes := make([]*FreelancerInferenceData, len(fidcb.builders))
	mutators := make([]Mutator, len(fidcb.builders))
	for i := range fidcb.builders {
		func(i int, root context.Context) {
			builder := fidcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FreelancerInferenceDataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fidcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fidcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fidcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fidcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fidcb *FreelancerInferenceDataCreateBulk) SaveX(ctx context.Context) []*FreelancerInferenceData {
	v, err := fidcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fidcb *FreelancerInferenceDataCreateBulk) Exec(ctx context.Context) error {
	_, err := fidcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fidcb *FreelancerInferenceDataCreateBulk) ExecX(ctx context.Context) {
	if err := fidcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FreelancerInferenceData.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FreelancerInferenceDataUpsert) {
//			SetUprankReccomended(v+v).
//		}).
//		Exec(ctx)
func (fidcb *FreelancerInferenceDataCreateBulk) OnConflict(opts ...sql.ConflictOption) *FreelancerInferenceDataUpsertBulk {
	fidcb.conflict = opts
	return &FreelancerInferenceDataUpsertBulk{
		create: fidcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FreelancerInferenceData.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fidcb *FreelancerInferenceDataCreateBulk) OnConflictColumns(columns ...string) *FreelancerInferenceDataUpsertBulk {
	fidcb.conflict = append(fidcb.conflict, sql.ConflictColumns(columns...))
	return &FreelancerInferenceDataUpsertBulk{
		create: fidcb,
	}
}

// FreelancerInferenceDataUpsertBulk is the builder for "upsert"-ing
// a bulk of FreelancerInferenceData nodes.
type FreelancerInferenceDataUpsertBulk struct {
	create *FreelancerInferenceDataCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FreelancerInferenceData.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FreelancerInferenceDataUpsertBulk) UpdateNewValues() *FreelancerInferenceDataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FreelancerInferenceData.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FreelancerInferenceDataUpsertBulk) Ignore() *FreelancerInferenceDataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FreelancerInferenceDataUpsertBulk) DoNothing() *FreelancerInferenceDataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FreelancerInferenceDataCreateBulk.OnConflict
// documentation for more info.
func (u *FreelancerInferenceDataUpsertBulk) Update(set func(*FreelancerInferenceDataUpsert)) *FreelancerInferenceDataUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FreelancerInferenceDataUpsert{UpdateSet: update})
	}))
	return u
}

// SetUprankReccomended sets the "uprank_reccomended" field.
func (u *FreelancerInferenceDataUpsertBulk) SetUprankReccomended(v bool) *FreelancerInferenceDataUpsertBulk {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.SetUprankReccomended(v)
	})
}

// UpdateUprankReccomended sets the "uprank_reccomended" field to the value that was provided on create.
func (u *FreelancerInferenceDataUpsertBulk) UpdateUprankReccomended() *FreelancerInferenceDataUpsertBulk {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.UpdateUprankReccomended()
	})
}

// ClearUprankReccomended clears the value of the "uprank_reccomended" field.
func (u *FreelancerInferenceDataUpsertBulk) ClearUprankReccomended() *FreelancerInferenceDataUpsertBulk {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.ClearUprankReccomended()
	})
}

// SetUprankReccomendedReasons sets the "uprank_reccomended_reasons" field.
func (u *FreelancerInferenceDataUpsertBulk) SetUprankReccomendedReasons(v string) *FreelancerInferenceDataUpsertBulk {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.SetUprankReccomendedReasons(v)
	})
}

// UpdateUprankReccomendedReasons sets the "uprank_reccomended_reasons" field to the value that was provided on create.
func (u *FreelancerInferenceDataUpsertBulk) UpdateUprankReccomendedReasons() *FreelancerInferenceDataUpsertBulk {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.UpdateUprankReccomendedReasons()
	})
}

// ClearUprankReccomendedReasons clears the value of the "uprank_reccomended_reasons" field.
func (u *FreelancerInferenceDataUpsertBulk) ClearUprankReccomendedReasons() *FreelancerInferenceDataUpsertBulk {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.ClearUprankReccomendedReasons()
	})
}

// SetUprankNotEnoughData sets the "uprank_not_enough_data" field.
func (u *FreelancerInferenceDataUpsertBulk) SetUprankNotEnoughData(v bool) *FreelancerInferenceDataUpsertBulk {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.SetUprankNotEnoughData(v)
	})
}

// UpdateUprankNotEnoughData sets the "uprank_not_enough_data" field to the value that was provided on create.
func (u *FreelancerInferenceDataUpsertBulk) UpdateUprankNotEnoughData() *FreelancerInferenceDataUpsertBulk {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.UpdateUprankNotEnoughData()
	})
}

// ClearUprankNotEnoughData clears the value of the "uprank_not_enough_data" field.
func (u *FreelancerInferenceDataUpsertBulk) ClearUprankNotEnoughData() *FreelancerInferenceDataUpsertBulk {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.ClearUprankNotEnoughData()
	})
}

// SetFinalizedRatingScore sets the "finalized_rating_score" field.
func (u *FreelancerInferenceDataUpsertBulk) SetFinalizedRatingScore(v float64) *FreelancerInferenceDataUpsertBulk {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.SetFinalizedRatingScore(v)
	})
}

// AddFinalizedRatingScore adds v to the "finalized_rating_score" field.
func (u *FreelancerInferenceDataUpsertBulk) AddFinalizedRatingScore(v float64) *FreelancerInferenceDataUpsertBulk {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.AddFinalizedRatingScore(v)
	})
}

// UpdateFinalizedRatingScore sets the "finalized_rating_score" field to the value that was provided on create.
func (u *FreelancerInferenceDataUpsertBulk) UpdateFinalizedRatingScore() *FreelancerInferenceDataUpsertBulk {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.UpdateFinalizedRatingScore()
	})
}

// SetRawRatingScore sets the "raw_rating_score" field.
func (u *FreelancerInferenceDataUpsertBulk) SetRawRatingScore(v float64) *FreelancerInferenceDataUpsertBulk {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.SetRawRatingScore(v)
	})
}

// AddRawRatingScore adds v to the "raw_rating_score" field.
func (u *FreelancerInferenceDataUpsertBulk) AddRawRatingScore(v float64) *FreelancerInferenceDataUpsertBulk {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.AddRawRatingScore(v)
	})
}

// UpdateRawRatingScore sets the "raw_rating_score" field to the value that was provided on create.
func (u *FreelancerInferenceDataUpsertBulk) UpdateRawRatingScore() *FreelancerInferenceDataUpsertBulk {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.UpdateRawRatingScore()
	})
}

// ClearRawRatingScore clears the value of the "raw_rating_score" field.
func (u *FreelancerInferenceDataUpsertBulk) ClearRawRatingScore() *FreelancerInferenceDataUpsertBulk {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.ClearRawRatingScore()
	})
}

// SetAiEstimatedDuration sets the "ai_estimated_duration" field.
func (u *FreelancerInferenceDataUpsertBulk) SetAiEstimatedDuration(v *pgtype.Interval) *FreelancerInferenceDataUpsertBulk {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.SetAiEstimatedDuration(v)
	})
}

// UpdateAiEstimatedDuration sets the "ai_estimated_duration" field to the value that was provided on create.
func (u *FreelancerInferenceDataUpsertBulk) UpdateAiEstimatedDuration() *FreelancerInferenceDataUpsertBulk {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.UpdateAiEstimatedDuration()
	})
}

// ClearAiEstimatedDuration clears the value of the "ai_estimated_duration" field.
func (u *FreelancerInferenceDataUpsertBulk) ClearAiEstimatedDuration() *FreelancerInferenceDataUpsertBulk {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.ClearAiEstimatedDuration()
	})
}

// SetBudgetAdherencePercentage sets the "budget_adherence_percentage" field.
func (u *FreelancerInferenceDataUpsertBulk) SetBudgetAdherencePercentage(v float64) *FreelancerInferenceDataUpsertBulk {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.SetBudgetAdherencePercentage(v)
	})
}

// AddBudgetAdherencePercentage adds v to the "budget_adherence_percentage" field.
func (u *FreelancerInferenceDataUpsertBulk) AddBudgetAdherencePercentage(v float64) *FreelancerInferenceDataUpsertBulk {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.AddBudgetAdherencePercentage(v)
	})
}

// UpdateBudgetAdherencePercentage sets the "budget_adherence_percentage" field to the value that was provided on create.
func (u *FreelancerInferenceDataUpsertBulk) UpdateBudgetAdherencePercentage() *FreelancerInferenceDataUpsertBulk {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.UpdateBudgetAdherencePercentage()
	})
}

// ClearBudgetAdherencePercentage clears the value of the "budget_adherence_percentage" field.
func (u *FreelancerInferenceDataUpsertBulk) ClearBudgetAdherencePercentage() *FreelancerInferenceDataUpsertBulk {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.ClearBudgetAdherencePercentage()
	})
}

// SetBudgetOverrunPercentage sets the "budget_overrun_percentage" field.
func (u *FreelancerInferenceDataUpsertBulk) SetBudgetOverrunPercentage(v float64) *FreelancerInferenceDataUpsertBulk {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.SetBudgetOverrunPercentage(v)
	})
}

// AddBudgetOverrunPercentage adds v to the "budget_overrun_percentage" field.
func (u *FreelancerInferenceDataUpsertBulk) AddBudgetOverrunPercentage(v float64) *FreelancerInferenceDataUpsertBulk {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.AddBudgetOverrunPercentage(v)
	})
}

// UpdateBudgetOverrunPercentage sets the "budget_overrun_percentage" field to the value that was provided on create.
func (u *FreelancerInferenceDataUpsertBulk) UpdateBudgetOverrunPercentage() *FreelancerInferenceDataUpsertBulk {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.UpdateBudgetOverrunPercentage()
	})
}

// ClearBudgetOverrunPercentage clears the value of the "budget_overrun_percentage" field.
func (u *FreelancerInferenceDataUpsertBulk) ClearBudgetOverrunPercentage() *FreelancerInferenceDataUpsertBulk {
	return u.Update(func(s *FreelancerInferenceDataUpsert) {
		s.ClearBudgetOverrunPercentage()
	})
}

// Exec executes the query.
func (u *FreelancerInferenceDataUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FreelancerInferenceDataCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FreelancerInferenceDataCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FreelancerInferenceDataUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
