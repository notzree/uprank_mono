# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import inference_pb2 as inference__pb2


class InferenceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EmbedText = channel.unary_unary(
                '/inference.Inference/EmbedText',
                request_serializer=inference__pb2.EmbedTextRequest.SerializeToString,
                response_deserializer=inference__pb2.EmbedTextResponse.FromString,
                )
        self.UpsertVector = channel.unary_unary(
                '/inference.Inference/UpsertVector',
                request_serializer=inference__pb2.UpsertVectorRequest.SerializeToString,
                response_deserializer=inference__pb2.UpsertVectorResponse.FromString,
                )
        self.QueryVector = channel.unary_unary(
                '/inference.Inference/QueryVector',
                request_serializer=inference__pb2.QueryVectorRequest.SerializeToString,
                response_deserializer=inference__pb2.QueryVectorResponse.FromString,
                )
        self.DeleteVector = channel.unary_unary(
                '/inference.Inference/DeleteVector',
                request_serializer=inference__pb2.DeleteVectorRequest.SerializeToString,
                response_deserializer=inference__pb2.DeleteVectorResponse.FromString,
                )


class InferenceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def EmbedText(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpsertVector(self, request, context):
        """rpc Embed()
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryVector(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteVector(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_InferenceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EmbedText': grpc.unary_unary_rpc_method_handler(
                    servicer.EmbedText,
                    request_deserializer=inference__pb2.EmbedTextRequest.FromString,
                    response_serializer=inference__pb2.EmbedTextResponse.SerializeToString,
            ),
            'UpsertVector': grpc.unary_unary_rpc_method_handler(
                    servicer.UpsertVector,
                    request_deserializer=inference__pb2.UpsertVectorRequest.FromString,
                    response_serializer=inference__pb2.UpsertVectorResponse.SerializeToString,
            ),
            'QueryVector': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryVector,
                    request_deserializer=inference__pb2.QueryVectorRequest.FromString,
                    response_serializer=inference__pb2.QueryVectorResponse.SerializeToString,
            ),
            'DeleteVector': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteVector,
                    request_deserializer=inference__pb2.DeleteVectorRequest.FromString,
                    response_serializer=inference__pb2.DeleteVectorResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'inference.Inference', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Inference(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def EmbedText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inference.Inference/EmbedText',
            inference__pb2.EmbedTextRequest.SerializeToString,
            inference__pb2.EmbedTextResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpsertVector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inference.Inference/UpsertVector',
            inference__pb2.UpsertVectorRequest.SerializeToString,
            inference__pb2.UpsertVectorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def QueryVector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inference.Inference/QueryVector',
            inference__pb2.QueryVectorRequest.SerializeToString,
            inference__pb2.QueryVectorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteVector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/inference.Inference/DeleteVector',
            inference__pb2.DeleteVectorRequest.SerializeToString,
            inference__pb2.DeleteVectorResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
